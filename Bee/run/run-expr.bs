use sys: text, lang, cols.gen, diag
pkg bee.run

def engine partial
protected:

	typeref, code byte[], at ref int virtual
		var op = (opcode! code[at++]).extend()
		if op.kind() <= opkind.number
			if op == opcode.null || (byte! op) >= (byte! opcode.string)
				value = root.get op
				return
			if op == opcode.ident
				value = ctx.get cident code, ref at
				return
			value = new value
			return
		if op == opcode.array
			if code[at++] != 0
				raise notImplementedException "Fixed and multi-dimensional arrays not implemented"
			typeref code, ref at
			value = root.get opcode.array, value
			return
		raise notImplementedException()

//##################################################################################################

	literal, op opcode, code byte[], at ref int override
		var n int
		switch op
		case opcode.undef
			value = new value
			return
		case opcode.null
			value = new value vtype.object, null
			return
		case opcode.false
			value = false
			return
		case opcode.true
			value = true
			return
		case opcode.this
			value = new value ctx.self
			return
		case opcode.base
			value = new value ctx.self?.baseClass
			return
	//----------------------------------------------------------------------------------------------
	//todo: value+ivalue
		case opcode.ident
			var ident = cident code, ref at
			value = new value vtype.ident, (ctx.which ident) ?? ctx.root, ident
			return
		case opcode.string
			n = code[at++]
			if n >= 1<<7
				n = n & 127 + (code[at++] << 7)
				if n >= 1<<14
					n = n & ((1<<14)-1) + (code[at++] << 14)
					if n >= 1<<21
						n = n & ((1<<21)-1) + (code[at++] << 21)
			value = encoding.UTF8.getString code, at, n
			at += n
			return
	//todo: char, wchar, lchar, default, exception
		case opcode.byte
			value = code[at++]
			return
		case opcode.ushort
			value = cushort code, ref at
			return
		case opcode.uint
			value = cuint code, ref at
			return
		case opcode.ulong
			value = culong code, ref at
			return
		case opcode.sbyte
			value = sbyte! code[at++]
			return
		case opcode.short
			value = cshort code, ref at
			return
		case opcode.int
			value = cint code, ref at
			return
		case opcode.long
			value = clong code, ref at
			return
		case opcode.float
			value = cfloat code, ref at
			return
		case opcode.double
			value = cdouble code, ref at
			return
		raise notImplementedException()

//##################################################################################################
//	for now we ignore the new in statements like `new x[y]` (thus making it `x[y]`),
//	but can convert it e.g. to `new(x[y])` => index("x", "y").create(argc:0)

	special, op opcode, code byte[], at ref int override
		var create = false
	next:
		switch op
		case opcode.create
			create = true
			op = (opcode! code[at]).extend()
			if op.kind() == opkind.special &&
			  (byte! op) < (byte! opcode.generic)
				at++
				goto next
			goto case opcode.ecall
		case opcode.ecall
			if create; typeref code, ref at
			else expression code, ref at
			var self obj = null
			if value.type == vtype.ident
				self  = value.ptr as obj
				value = (iProps! value.ptr).get value.str
			var fn = box value
			value = create ?
				new value fn.create 0 :
				fn.call self, 0
			return
		case opcode.call
			if create; typeref code, ref at
			else expression code, ref at
			self = null
			if value.type == vtype.ident
				self  = value.ptr as obj
				value = (iProps! value.ptr).get value.str
			fn = box value
			expression code, ref at
			args.add result//rvalue ...but we could use value if `ref` is involved
			value = create ?
				new value fn.create 1 :
				fn.call self, 1
			args.remove 1
			return
		case opcode.call2
			if create; typeref code, ref at
			else expression code, ref at
			self = null
			if value.type == vtype.ident
				self  = value.ptr as obj
				value = (iProps! value.ptr).get value.str
			fn = box value
			expression code, ref at
			args.add result
			expression code, ref at
			args.add result
			value = create ?
				new value fn.create 2 :
				fn.call self, 2
			args.remove 2
			return
		case opcode.mcall
			var n int = code[at++]
			if create; typeref code, ref at
			else expression code, ref at
			self = null
			if value.type == vtype.ident
				self  = value.ptr as obj
				value = (iProps! value.ptr).get value.str
			fn = box value
			var argc = n-1
			while --n > 0
				expression code, ref at
				args.add result
			value = create ?
				new value fn.create argc :
				fn.call self, argc
			args.remove argc
			return

		case opcode.index
		case opcode.mindex
			n = op == opcode.index ? 2 : code[at++]
			expression code, ref at
			self = null
			if value.type == vtype.ident
				self  = value.ptr as obj
				value = (iProps! value.ptr).get value.str
			fn = box value
			argc = n-1
			while --n > 0
				expression code, ref at
				args.add result
			value = fn.index self, argc
			args.remove argc
			return

		case opcode.var
			var ident = cident code, ref at
			typeref code, ref at
			if value.type == vtype.undef
				expression code, ref at
				ctx.vars.set ident, value
				return
			fn = box value
			expression code, ref at
			args.add result
			value = fn.call null, 1 // type conversion (var x:int = 1.2 ==> (int! 1))
			args.remove 1
			ctx.vars.set ident, value // todo: embed type constraint
			return
		case opcode.dot
			expression code, ref at
			fn = box value
			ident = cident code, ref at
			value = new value fn, ident
			return

		case opcode.ternary
			expression code, ref at
			if result.bool
				at += 4
				expression code, ref at
				var fsz = cint code, ref at
				at += fsz
			else
				var tsz = cint code, ref at
				at += tsz
				at += 4
				expression code, ref at
			return

		raise notImplementedException()

//##################################################################################################

	binary, op opcode, code byte[], at ref int override

		expression code, ref at

		if op == opcode.logicAnd || op == opcode.logicOr
			if (value == true) == (op == opcode.logicOr)
				value = op == opcode.logicOr
				var n = cint code, ref at
				at += n
				return
			expression code, ref at
			return

		var left = value
		expression code, ref at
		switch op

		case opcode.assign
			left.set value
			return
		case opcode.orAssign
			left.set value = left | value
			return
		case opcode.xorAssign
			left.set value = left ^ value
			return
		case opcode.andAssign
			left.set value = left & value
			return
		case opcode.lshAssign
			left.set value = left.shiftLeft value
			return
		case opcode.rshAssign
			left.set value = left.shiftRight value
			return
		case opcode.addAssign
			left.set value = left + value
			return
		case opcode.subAssign
			left.set value = left - value
			return
		case opcode.mulAssign
			left.set value = left * value
			return
		case opcode.divAssign
			left.set value = left / value
			return
		case opcode.modAssign
			left.set value = left % value
			return

		case opcode.bitOr
			value = left | value
			return
		case opcode.bitXor
			value = left ^ value
			return
		case opcode.bitAnd
			value = left & value
			return
		case opcode.shiftLeft
			value = left.shiftLeft value
			return
		case opcode.shiftRight
			value = left.shiftRight value
			return
		case opcode.add
			value = left + value
			return
		case opcode.sub
			value = left - value
			return
		case opcode.mul
			value = left * value
			return
		case opcode.div
			value = left / value
			return
		case opcode.mod
			value = left % value
			return

		case opcode.equals
			value = new value left == value
			return
		case opcode.differ
			value = new value left != value
			return
		case opcode.less
			value = new value left < value
			return
		case opcode.more
			value = new value left > value
			return
		case opcode.lesseq
			value = new value left <= value
			return
		case opcode.moreeq
			value = new value left >= value
			return

		raise notImplementedException()

//##################################################################################################

	unary, op opcode, code byte[], at ref int override

		expression code, ref at
		switch op
		case opcode.plus
			value = +value
			return
		case opcode.neg
			value = -value
			return
		case opcode.flip
			value = ~value
			return
		case opcode.not
			value = new value !value.bool
			return

		case opcode.postInc
			if value.type == vtype.ident
				value = value.self++
			return
		case opcode.postDec
			if value.type == vtype.ident
				value = value.self--
			return

		case opcode.inc
			++value.self
			return
		case opcode.dec
			++value.self
			return

		raise notImplementedException()

