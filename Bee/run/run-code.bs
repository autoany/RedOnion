use sys: text, lang, cols.gen, diag
pkg bee.run

def engine partial
protected:

	statement, op opcode, code byte[], at ref int override
		debug.assert \
			op.kind() == opkind.statement ||
			op.kind() == opkind.statement2
		switch op
		default
			raise notImplementedException()
		case opcode.block
			if opts & opt.blockScope != 0; ctx.push this
			block code, ref at
			if opts & opt.blockScope != 0; ctx.pop()
			return
		case opcode.return
		case opcode.raise
			expression code, ref at
			goto case opcode.break
		case opcode.break
		case opcode.continue
			exit = op
			return
	//----------------------------------------------------------------------------------------------
		case opcode.for
			if opts & opt.blockScope != 0; ctx.push this
			expression code, ref at
			var test = at
			var notest = code[at] == 0
			if notest; ++at
			else expression code, ref at
			var size = cint code, ref at
			var last = at
			var stts = at + size
			var cend = stts + 4 + bits.int code, stts
			if value.type != vtype.undef && !value.bool
				at = cend;
				if opts & opt.blockScope != 0; ctx.pop()
				return
			for
				at = stts
				block code, ref at
				if exit != 0 && exit != opcode.continue
					break
				at = last
				expression code, ref at
				if !notest
					at = test
					expression code, ref at
					if !value.bool
						break
			at = cend
			if opts & opt.blockScope != 0; ctx.pop()
			if exit == opcode.break || exit == opcode.continue
				exit = 0
			return
	//----------------------------------------------------------------------------------------------
		case opcode.while
		case opcode.until
			if opts & opt.blockScope != 0; ctx.push this
			test = at
			do
				at = test
				expression code, ref at
				if value.bool == (op == opcode.until)
					break
				block code, ref at
			while exit == 0 || exit == opcode.continue
			if opts & opt.blockScope != 0; ctx.pop()
			if exit == opcode.break || exit == opcode.continue
				exit = 0
			return
		case opcode.do
		case opcode.dountil
			if opts & opt.blockScope != 0; ctx.push this
			do
				block code, ref at
				if exit != 0 && exit != opcode.continue
					break
				expression code, ref at
			while value.bool != (op == opcode.dountil)
			if opts & opt.blockScope != 0; ctx.pop()
			if exit == opcode.break || exit == opcode.continue
				exit = 0
			return
	//----------------------------------------------------------------------------------------------
		case opcode.if
			if opts & opt.blockScope != 0; ctx.push this
			expression code, ref at
			if value.bool
				block code, ref at
				if at < code.length && code[at] == byte! opcode.else
					at++
					size = cint code, ref at
					at += size
			else
				size = cint code, ref at
				at += size
				if at < code.length && code[at] == byte! opcode.else
					at++
					block code, ref at
			if opts & opt.blockScope != 0; ctx.pop()
			return

//##################################################################################################

	other, op opcode, code byte[], at ref int override
		switch op
		default
			raise notImplementedException()
		case opcode.func
			var size = cint code, ref at
			var body = at + size
			debug.assert code[at+2] == 0 //TODO: generics
			at += 3 // flags & generics
			var argc = code[at++]
			var fname = cident code, ref at
			var ftsz = cint code, ref at
			var ftat = at
			at += ftsz
			var args = argc == 0 ? null : new argInfo[argc]
			for var i = 0; i < argc; i++
				var asz = cint code, ref at
				var aend = at + asz
				args[i].name = cident code, ref at
				var tsz = cint code, ref at
				args[i].type = at
				at += tsz
				var vsz = cint code, ref at
				args[i].value = at
				debug.assert at+vsz == aend
				at = aend
			debug.assert at == body
			at = body
			size = cint code, ref at
			ctx.root.set fname, new value root.create code, at, size, ftat, args, null, ctx.vars
			at += size
			value = new value vtype.ident, ctx.root, fname
			return
			