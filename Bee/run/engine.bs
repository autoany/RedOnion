use sys: text, lang, cols.gen, diag
pkg bee.run

@@ runtime engine (use only with compressed code from codeGenerator! not from pseudoGenerator!)
def engine abstractEngine partial

	def opt enum @flags
		none		= 0
		blockScope	= 1<<0	// variables disapear after leaving block
		funcText	= 1<<1	// return full text of functions in value
	opts opt get set
	;; engine options

	def argInfo struct
	public:
		var name	string	// argument/parameter name
		var type	int		// type code offset/index
		var value	int		// value code offset/index

	def iRoot interface iObject
		@@ box value (stringObj, numberObj, ...)
		box iObject, value
		@@ create new function
		create iObject, code byte[], codeAt int, codeSize int, typeAt int, args argInfo[], string = null, scope iObject = null

		@@ get typeref (stringFun, numberFun, ...)
		get value, opcode
		@@ get typeref with param (array or generic)
		get value, opcode, value
		@@ get typeref with params (array or generic)
		get value, opcode, params par value[]

	root iRoot get set
	;; root object (global namespace)

	var defaultParserOptions parser.opt static =
		parser.opt.script |
		parser.opt.untyped|parser.opt.typed

	.ctor
		cgen = new codeGenerator defaultParserOptions
		root = new ecma262.root this
		ctx = new context this
	.ctor root iRoot
		cgen = new codeGenerator defaultParserOptions
		.root = root
		ctx = new context this
	.ctor root iRoot, opt parser.opt
		cgen = new codeGenerator opt
		.root = root
		ctx = new context this
	.ctor root iRoot, opton parser.opt, optoff parser.opt
		cgen = new codeGenerator opton, optoff
		.root = root
		ctx = new context this

	@@ reset engine
	reset this virtual
		exit = 0
		root.reset()
		cgen.reset()
		args.clear()
		ctx = new context this
		ctxstack.clear()

	@@ result of last expression (rvalue)
	result value get
		return value.type == vtype.ident ?
			(iProps! value.ptr).get value.str : value

	@@ compile source to code
	compile byte[], string
		var code byte[]
		try
			code = (cgen.unit string).toArray()
		finally
			cgen.reset()
		return code

	@@ run script (given as string)
	eval this, string
	; alias "exec"
		eval compile string

	@@ box value (stringObj, numberObj, ...)
	box iObject, value virtual
		for
			switch value.type
			default
				return root.box value
			case vtype.object
				return obj! value.ptr
			case vtype.ident
				value = (iProps! value.ptr).get(value.str)
				continue

//workarounds for old VSIX
	@alias "exec"
	eval this, code byte[] new
	;; run script
		eval code, 0, code.length
	@alias "exec"
	eval this, code byte[], at int, size int override
		base.eval code, at, size

	expression this, code byte[] new
	;; evaluate expression
		expression code, 0
	expression this, code byte[], at int override
	;; evaluate expression
		base.expression code, at
		
//----------------------------------------------------------------------------------------------
protected:

	block this, code byte[], at ref int override
		exit = opcode.undef
		base.block code, ref at

	var value
	;; result of last expression (lvalue)
	var cgen codeGenerator
	;; code generator

protected internal:

	var args = new arglist
	;; argument list for function calls

	@@ argument list for function calls
	def arglist list.[value] public
		length int => count
		remove, last int
			removeRange count - last, last
		arg value, argc int, int = 0
			var idx = count-argc+int
			return idx < count ? this[idx] : new value

	@@ stack of blocks of current function/method
	def context struct iProps public
	public:
		self iObject get
		;; current object accessible by 'this' keyword
		vars iObject get
		;; variables of current block (previous block/scope is in baseClass)
		root iObject get
		;; root (activation) object (new variables not declared with var will be created here)

		@@ root context
		.ctor engine internal
			_self = _vars = _root = engine.root
		@@ function execution context
		.ctor engine, self iObject, scope iObject internal
			_self = self ?? engine.root
			_root = _vars = engine.createVars engine.createVars scope ?? engine.root
			_vars.set "arguments", new value vars.baseClass

		push, engine
			_vars = engine.createVars vars
		pop
			_vars = vars.baseClass

		has bool, string
			return vars.has string
		which iObject, string
			return vars.which string
		get value, string
			return vars.get string
		get bool, string, out value
			return vars.get string, out value
		set bool, string, value
			return vars.set string, value
		del bool, string
			return vars.del string
		reset
			vars.reset()

	var ctx context
	;; current context (method)
	var ctxstack = new stack.[context]
	;; stack of contexts (methods)

	@@ create new execution/activation context (for function call)
	createContext, self iObject protected internal
		createContext self, ctx.vars
	@@ create new execution/activation context (for function call with scope - usually function inside function)
	createContext, self iObject, scope iObject protected internal
		ctxstack.push ctx
		ctx = new context this, self, scope
	@@ create new variables holder object
	createVars iObject, vars iObject protected internal virtual
		return new obj this, vars
	@@ destroy last execution/activation context
	destroyContext value protected internal
		ctx = ctxstack.pop()
		var value = exit == opcode.return ? result : new value
		if exit != opcode.raise; exit = opcode.undef
		return value
