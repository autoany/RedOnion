pkg bee.run

def tflag enum ushort
	none		= 0x0000

	access		= 0x000F
	public		= 0x0001
	private		= 0x0002
	protected	= 0x0003
	internal	= 0x0004
	iprivate	= 0x0006
	iprotected	= 0x0007

	scope		= 0x00F0
	final		= 0x0010
	virtual		= 0x0020
	abstract	= 0x0030
	override	= 0x0040
	readonly	= 0x0050
	const		= 0x0060
	static		= 0x0070
	rostatic	= 0x0080 @@ static readonly

	other		= 0x3F00
	hide		= 0x0100 @@ C#:new (hide inherited)
	partial		= 0x0200 @@ partial class/struct/enum/interface
	unsafe		= 0x0400 @@ unsafe context (allow pointers)
	implicit	= 0x0800 @@ operators only
	inline		= 0x1000 @@ methods (+def name inline = method group)

extensions:

	access	tflag => this & tflag.access
	scope	tflag => this & tflag.scope

	accessText string => _access[int! this.access()]
	scopeText  string => _scope [(int! this.scope()) >> 4]

	var _access = new string[]
		null, "public", "private", "protected",
		"internal", null, "private internal", "protected internal",
		null,	null,	null,	null,	null,	null,	null,	null
	var _scope = new string[]
		null, "final", "virtual", "abstract", "override",
		"readonly", "const", "static",
		"static readonly", null, null, null, null, null, null, null

def opkind enum byte
	literal		= 0x00 @@ constants, (non-number) literals and references
	number		= 0x10 @@ numbers (int, byte, double, ...)
	special		= 0x20 @@ special operators (call, index, new, ternary, ...)
	assign		= 0x30 @@ assign and compound-assignment operators
	binary		= 0x40 @@ binary operators with compound-assignmnet counterpart
	logic		= 0x50 @@ logic (boolean) binary operators
	unary		= 0x60 @@ unary operators (except post/pre: + - ~ !)
	prepost		= 0x70 @@ pre- and post-fix operators (++ --)
	statement	= 0x80 @@ statements, loops, etc.
	statement2	= 0x90 @@ statement group 2: switch, try..catch..finaly, using
	access		= 0xA0 @@ access modifiers (public, private, protected, internal)
	scope		= 0xB0 @@ scope modifiers (virtual, static, ...)
	mods		= 0xC0 @@ other modifiers (new, partial)
	model		= 0xD0 @@ object model (classes, methods, fields, properties, attributes)
	reserved	= 0xE0 @@ unused kind
	meta		= 0xF0 @@ comments and other metadata that can be ignored during execution

def opcode enum ushort

//	flags and masks
	fUnused		= 0x8000 @@ unused operator
	fUnary		= 0x4000 @@ unary operator
	fTernary	= 0x2000 @@ ternary operator
	fMulti		= 0x6000 @@ operator accepting multiple arguments (call, index)
	mPriority	= 0x1F00 @@ operator priority
	mCode		= 0x00FF @@ code mask
	mKind		= 0x00F0 @@ kind mask

	fFp			= 0x8000 @@ floating point (number section)
	fSig		= 0x4000 @@ signed
	mSz			= 0x3F00 @@ number size mask

//	constants and literals
	undef		= 0x0000 @@ undefined value
	null		= 0x0001 @@ null/nullptr
	object		= 0x0101 @@ object type
	false		= 0x0002 @@ boolean false
	true		= 0x0003 @@ boolean true
	this		= 0x0004 @@ this (self) - preferred
	self		= 0x0104 @@ self (this) - alternative (used in extension methods)
	base		= 0x0005 @@ base (super) - preferred
	super		= 0x0105 @@ super (base) - alternative (Java)
	value		= 0x0006 @@ value in setter
	ivalue		= 0x0007 @@ implicit value (in case of conditional switch)
	exception	= 0x0008 @@ exception in catch block
	default		= 0x0009 @@ default value		+[len byte, type chars as UTF8 bytes]
	ident		= 0x000A @@ identifier			+[len byte, chars as UTF8 bytes]
	string		= 0x000B @@ string				+[len int/i7e, chars as UTF8 bytes]
	char		= 0x010C @@ short char			+[byte]
	wchar		= 0x020D @@ wide char			+[2B char]
	lchar		= 0x040E @@ long char			+[4B char]
	number		= 0x000F @@ number as string (for converters)

	byte		= 0x0110 @@ u8
	ushort		= 0x0211 @@ u16
	uint		= 0x0412 @@ u32
	ulong		= 0x0813 @@ u64
	sbyte		= 0x4114 @@ s8
	short		= 0x4215 @@ s16
	int			= 0x4416 @@ s32
	long		= 0x4817 @@ s64
	float		= 0xC418 @@ f32
	double		= 0xC819 @@ f64
	ldouble		= 0xCA1A @@ f80
	bool		= 0x011B @@ used only as type specifier (true/false used in expressions)
	complex		= 0x101C @@	reserved prefix for complex numbers
	decimal		= 0x901D @@ f128
	quad		= 0x101E @@ u128
	hyper		= 0x501F @@ s128

//	special
	create		= 0x4020 @@	new
	ecall		= 0x4021 @@ f()		empty (no-argument) call
	call		= 0x0022 @@	f(arg)	call with single argument
	call2		= 0x2023 @@ f(x,y)	call with two arguments
	mcall		= 0x6024 @@	f(,,)	call with more than two arguments
	index		= 0x0025 @@	a[i]	indexing with single argument
	mindex		= 0x6026 @@ a[i,j]	indexing with more than one argument
	dot			= 0x0027 @@	.		(can work as left["right"] in scripting mode)
	var			= 0x2028 @@ var x[[:]type][=val] - moved to expressions that we can do if var... and for var...
	generic		= 0x6029 @@	t.[i]	generic type or call (any number of arguments)
	array		= 0x602A @@ t[n]	array declaration or creation
	nullcol		= 0x002B @@ ??		(one ?? two)
	nullcall	= 0x002C @@ ?.()
	nulldot		= 0x002D @@ ?.it
	ternary		= 0x202E @@	?:		(or: val1 if cond else val2)
	lambda		= 0x802F @@	=>		(reserved)

//	assign
	assign		= 0x0130 @@	=
	orAssign	= 0x0131 @@	|=
	xorAssign	= 0x0132 @@	^=
	andAssign	= 0x0133 @@	&=
	lshAssign	= 0x0134 @@	<<=
	rshAssign	= 0x0135 @@	>>=
	addAssign	= 0x0136 @@	+=
	subAssign	= 0x0137 @@	-=
	mulAssign	= 0x0138 @@	*=
	divAssign	= 0x0139 @@	/=
	modAssign	= 0x013A @@	%=

//	binary
	bitOr		= 0x0941 @@	|		!! changed priority !!
	bitXor		= 0x0D42 @@	^		!! changed priority !!
	bitAnd		= 0x0D43 @@	&		!! changed priority !!
	shiftLeft	= 0x0A44 @@	<<
	shiftRight	= 0x0A45 @@	>>
	add			= 0x0B46 @@	+
	sub			= 0x0B47 @@	-
	mul			= 0x0C48 @@	*
	div			= 0x0C49 @@	/
	mod			= 0x0C4A @@	%
	power		= 0x8D4B @@	**		(reserved)

//	logic + casts
	logicOr		= 0x0250 @@	||
	logicAnd	= 0x0351 @@	&&
//	priority 4..6 reserved for C# binary or, xor, and
	equals		= 0x0752 @@	==
	differ		= 0x0753 @@	!=
	less		= 0x0854 @@	<
	more		= 0x0855 @@	>
	lesseq		= 0x0856 @@	<=
	moreeq		= 0x0857 @@	>=
	identity	= 0x0858 @@ ===
	notIdentity	= 0x0859 @@ !==

	as			= 0x085A @@ as
	ascast		= 0x085B @@ as!
	cast		= 0x085C @@ !		(type! value)
	is			= 0x085D @@ is
	isnot		= 0x085E @@ is!
	
//	unary
	plus		= 0x4E60 @@	+x
	neg			= 0x4E61 @@	-x
	flip		= 0x4E62 @@	~x
	not			= 0x4E63 @@	!x
	addrof		= 0xCE64 @@	&x		(reserved)
	deref		= 0xCE65 @@	*x		(reserved)

	typeof		= 0xCE68 @@	typeof x
	nameof		= 0xCE69 @@ nameof x
	await		= 0x406A @@ await task
	delete		= 0x406D @@ delete
	ref			= 0x406E @@ ref
	out			= 0x406F @@ out

//	unary post/pre
	postInc		= 0x4F70 @@	x++
	postDec		= 0x4F71 @@	x--
	inc			= 0x5078 @@	++x
	dec			= 0x5079 @@	--x

//	statements
	block		= 0x0080 @@ block with its own scope
	return		= 0x0082 @@ return
	raise		= 0x0083 @@ throw/raise (Python uses raise)
	throw		= 0x0183 @@ throw (alternative to throw from Python)
	break		= 0x0084 @@ break
	continue	= 0x0085 @@ continue
	for			= 0x0086 @@ for init; test; iter: stts
	foreach		= 0x0087 @@ for var in list: stts
	in			= 0x0187 @@ (for parsing only)
	while		= 0x0088 @@ while cond do stts
	do			= 0x0089 @@ do stts; while cond
	until		= 0x008A @@ until cond do stts  
	dountil		= 0x008B @@ do stts; until cond
	if			= 0x008C @@ if cond then truestts
	then		= 0x018C @@ (for parsing only)
	unless		= 0x008D @@ unless cond do falsestts
	else		= 0x008E @@ if cond then truestts else falsestts

	goto		= 0x0090 @@ goto label
	label		= 0x0190 @@ label:   (for 1st phase of parsing/compilation)
	cgoto		= 0x0091 @@ goto case
	case		= 0x0191 @@ case 0:  (for parsing only)
	switch		= 0x0092 @@ switch x: case 1: break; case 2: break; default: continue
	cswitch		= 0x0093 @@ switch x: case < 0: ...; case 0: ...; case > 0: ...
	using		= 0x0094 @@ using macro (try..finally dispose)
	let			= 0x0194 @@ 'using' for script
	catch		= 0x0095 @@ try..catch..finally
	try			= 0x0195 @@ (for parsing only)
	finally		= 0x0295 @@ (for parsing only)
	except		= 0x0395 @@ catch from Python
	with		= 0x0096 @@ with var do stts
	from		= 0x0097 @@ LINQ
	select		= 0x0197 @@ (for parsing only)
	orderby		= 0x0297 @@ (for parsing only)

//NOTE: acces, scope and other modifiers were moved to tflags
//..... could thus be changed to parsing-only codes

//	access
	public		= 0x00A1
	private		= 0x00A2
	protected	= 0x00A3
	internal	= 0x00A4
	iprivate	= 0x00A6
	iprotected	= 0x00A7
//	scope
	final		= 0x00B1 @@ final (Java), sealed (C#), NotInheritable/NotOverridable (Basic)
	sealed		= 0x01B1 @@ final - alternative (C#)
	virtual		= 0x00B2
	abstract	= 0x00B3 @@ abstract (C#/Java), MustInherit/MustOverride (Basic)
	override	= 0x00B4
	readonly	= 0x00B5
	const		= 0x00B6
	static		= 0x00B7
	rostatic	= 0x00B8 @@ static readonly

//	other modifiers ...maybe move to Fx-meta class
	hide		= 0x00C0 @@ new
	partial		= 0x00C1
	unsafe		= 0x00C2
	async		= 0x00C3

//	model
	import		= 0x00D0 @@ import (Java/Python), use (B#), using (C#), include, ...
	include		= 0x01D0 @@ import - alternative (C++ Preprocessor)
	use			= 0x02D0 @@ import - alternative (B#)
	useAll		= 0x00D1 @@ using static (C#; Java: import SomeClass.*)
	useAs		= 0x00D2 @@ using name = ns.whatever

	@alias "namespace"
	space		= 0x00D3 @@ namespace (C#), package (Java), Module in Visual Basic is a bit different
	package		= 0x01D3 @@ namespace - alias (Java)
	pkg			= 0x02D3 @@ namespace - alias (short)

	class		= 0x00D4 @@ ref-class
	def			= 0x01D4 @@ define class or method/lambda - short
	define		= 0x02D4 @@ define class or method/lambda - long
	struct		= 0x00D5 @@ value-type
	enum		= 0x00D6 @@ integer with named values

	@alias "interface"
	face		= 0x00D7 @@ interface
	mixin		= 0x00D8 @@ mixin class/interface (to be implemented as composed-in-struct with redirections)
	delegate	= 0x00D9 @@ delegate (function prototype)
	attr		= 0x00DA @@ attribute

	func		= 0x00DB @@ method (function, procedure)
	operator	= 0x00DC @@ operator (type conversion or +-*/% ...)

	field		= 0x00DD @@ var in class
	event		= 0x00DE @@ event field

	prop		= 0x00DF @@ property (get-set or add-remove method pair)
	get			= 0x01DF @@ get (property)
	set			= 0x02DF @@ set (property)
	combine		= 0x03DF @@ add/combine (event/delegate)
	remove		= 0x04DF @@ remove (event/delegate)

//	metadata
	where		= 0x00FB @@ where rules
	comment		= 0x00FC @@ line comment
	doc			= 0x00FD @@ documenting comment
	mlcomm		= 0x00FE @@ multi-line comment
	white		= 0x00FF @@ white space

//	parsing only
	unknown		= 0xFFFF
	comma		= 0xFEFF

extensions:
	unused	=> this & fUnused	!= 0
	unary	=> this & fMulti	== fUnary
	binary	=> this & fMulti	== 0
	ternary	=> this & fMulti	== fTernary
	multi	=> this & fMulti	== fMulti
	postfix	=> this & mPriority == postInc & mPriority

	@@ operator priority in B# ('or', 'xor' and 'and' have higher priority than in C#)
	prior  opcode => this & mPriority
	@@ operator priority in C# (C/C++/Java and derivates - binary or/xor/and with same priority as logic)
	cprior opcode => this.code() >= bitOr.code() && this.code() <= bitAnd.code() ?
		opcode! this.code() & 7 + 3 << 8 : this.code() == opcode.cast.code() ? 0 : this.prior()

	code	=> byte! this
	kind	=> opkind! this & mKind
	numsz	=> byte! (ushort! this & mSz) >> 8

	text	string => _text[byte! this]
	extend	opcode => (opcode! _info[byte! this] << 8 | byte! this)

	tflag tflag get
		switch this.kind()
		case opkind.access
			return tflag! this.code()&15
		case opkind.scope
			return tflag! (this.code()&15)<<4
		case opkind.mods
			return tflag! 0x100 << this.code()&15
		default
			return 0

	var	_info = new byte[]
		//0    1    2    3    4    5    6    7     8    9    A    B    C    D    E    F
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x00, //0 constants
		0x01,0x02,0x04,0x08,0x41,0x42,0x44,0x48, 0xC4,0xC8,0xCA,0x01,0x10,0x90,0x10,0x50, //1 numbers
		0x40,0x40,0x00,0x20,0x60,0x00,0x60,0x00, 0x20,0x60,0x60,0x00,0x00,0x00,0x20,0x80, //2 special
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x81,0x81,0x81,0x81,0x81, //3 assign
		0x81,0x09,0x0D,0x0D,0x0A,0x0A,0x0B,0x0B, 0x0C,0x0C,0x0C,0x8D,0x8D,0x8D,0x08,0x08, //4 binary
		0x02,0x03,0x07,0x07,0x08,0x08,0x08,0x08, 0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88, //5 logic + casts
		0x4E,0x4E,0x4E,0x4E,0xCE,0xCE,0x4F,0xCE, 0xCE,0xCE,0x40,0xC0,0xC0,0x40,0x40,0x40, //6 unary
		0x4F,0x4F,0xCF,0xCF,0xCF,0xCF,0xCF,0xCF, 0x50,0x50,0x90,0x90,0x90,0x90,0x90,0x90, //7 post/pre
		//the rest of this table must be zeros
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //8 statements
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //9 statements
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //A access
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //B scope
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //C mods
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //D model
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //E unused
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00  //F meta

	var _text = new string[]
	//	literals
		"undefined", "null", "false", "true", "this", "base", "value", null,
		"exception", "default", null, "string", "char", "wchar", "lchar", "number",
	//	numbers
		"byte", "ushort", "uint", "ulong", "sbyte", "short", "int", "long",
		"float", "double", "long double", "bool", "complex", "decimal", "quad", "hyper",
	//	special
		"new",	"()",	"()",	"()",	"()",	"[]",	"[]",	".",
		"var",	".[]",	"[]",	"??",	"?.",	"?.()",	"?:",	"=>",
	//	assign
		"=",	"|=",	"^=",	"&=",	"<<=",	">>=",	"+=",	"-=",
		"*=",	"/=",	"%=",	null,	null,	null,	null,	"var",
	//	binary
		null,	"|",	"^",	"&",	"<<",	">>",	"+",	"-",
		"*",	"/",	"%",	"**",	null,	null,	"as",	"as!",
	//	logic + casts
		"||",	"&&",	"==",	"!=",	"<",	">",	"<=",	">=",	
		"===",	"!==",	"as",	"as!",	"!",	"is",	"is!",	null,
	//	unary
		"+",	"-",	"~",	"!",	"&",	"*",	"[]",	null,
		"typeof", "nameof", "await", null,	"new", "delete", "ref", "out",
	//	post/pre
		"++",	"--",	"++",	"--",	null,	null,	null,	null,
		null,	null,	null,	null,	null,	null,	null,	null,
	//	statements
		"{}", null, "return", "throw", "break", "continue", "for", "foreach",
		"while", "do", "until", "do-until", "if", "unless", "else", "with",
		"switch", "case", "default", "label", "goto", "using", "catch", "from",
		null,	null,	null,	null,	null,	null,	null,	null,
	//	access
		null, "public", "private", "protected",
		"internal", null, "private internal", "protected internal",
		null,	null,	null,	null,	null,	null,	null,	null,
	//	scope
		null, "final", "virtual", "abstract", "override",
		"readonly", "const", "static",
		"static readonly", null, null, null, null, null, null, null,
	//	mods
		"new", "partial", "get", "set", "async", null,	null,	null,
		null,	null,	null,	null,	null,	null,	null,	null,
	//	object model
		"import", "use static", "using", "namespace", "class", "struct", "enum", "interface",
		"mixin", "delegate", "@", "function", "operator", "field", "event", "property",
	//	tail
		null,	null,	null,	null,	null,	null,	null,	null,
		null,	null,	null,	null,	null,	null,	null,	null,
	//	meta (comments)
		null,	null,	null,	null,	null,	null,	null,	null,
		null,	null,	null,	null,	null,	null,	null,	null
