use sys: text, lang, cols.gen
pkg bee.run.ecma262

//TODO: Array

def root obj, engine.iRoot

	undefined	value		get
	null		value		get
	nan			value		get
	infinity	value		get

	function	functionFun	get
	object		objectFun	get
	string		stringFun	get
	number		numberFun	get

	.ctor engine
		base engine, null, new props, new props

	//	constants
		baseProps.set "undefined",	_undefined	= new value
		baseProps.set "null",		_null		= new value vtype.object, null
		baseProps.set "nan",		_nan		= new value double.NaN
		baseProps.set "infinity",	_infinity	= new value double.positiveInfinity
		moreProps.set "inf",		_infinity	// alternative shortcut - can be overwritten = goes to moreProps

	//	prototypes
		var obj = new obj			engine
		var fun = new functionObj	engine, obj
		var str = new stringObj		engine, obj
		var num = new numberObj		engine, obj

	//	functions (class constructors)
		baseProps.set "function",	new value _function	= new functionFun	engine, fun, fun
		baseProps.set "object",		new value _object	= new objectFun		engine, fun, obj, this
		baseProps.set "string",		new value _string	= new stringFun		engine, fun, str
		baseProps.set "number",		new value _number	= new numberFun		engine, fun, num

	box iObject, value
		for
			switch value.type
			case vtype.undef
				return new obj engine, .object.prototype
			case vtype.object
				return obj! value.ptr
			case vtype.ident
				value = (iProps! value.ptr).get value.str
				continue
			case vtype.string
				return new stringObj engine, .string.prototype, value.str
			default
				if value.isnum
					return new numberObj engine, .number.prototype, value
				raise notImplementedException()

	create iObject, code byte[], codeAt int, codeSize int, typeAt int, args engine.argInfo[], string = null, scope iObject = null
		return new functionObj engine, function.prototype,
			code, codeAt, codeSize, typeAt, args, string, scope == this ? null : scope

	get value, op opcode
		return op == opcode.null ? new value .object : get op.text()
	get value, op opcode, value
		raise notImplementedException()
	get value, op opcode, params par value[]
		raise notImplementedException()