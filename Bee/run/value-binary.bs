use sys: text, lang, cols.gen, diag, run.i
pkg bee.run

def value struct partial

	operator + value, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.vt == vtype.string
			return new value lhs.str + rhs.string
		if rhs.vt == vtype.string
			return new value lhs.string + rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value lhs.dta.float + rhs.float
				return new value lhs.dta.double + rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value lhs.float + rhs.dta.float
				return new value lhs.double + rhs.dta.double
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long + rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int + rhs.int
				return new value lhs.long + rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint + rhs.uint
			return new value lhs.ulong + rhs.ulong

		return new value

//----------------------------------------------------------------------------------------------

	operator - value, lhs value, rhs value static
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str
		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value lhs.dta.float - rhs.float
				return new value lhs.dta.double - rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value lhs.float - rhs.dta.float
				return new value lhs.double - rhs.dta.double
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long - rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int - rhs.int
				return new value lhs.long - rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint - rhs.uint
			return new value lhs.ulong - rhs.ulong

		return new value

//----------------------------------------------------------------------------------------------

	operator * value, lhs value, rhs value static
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str
		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value lhs.dta.float * rhs.float
				return new value lhs.dta.double * rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value lhs.float * rhs.dta.float
				return new value lhs.double * rhs.dta.double
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long * rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int * rhs.int
				return new value lhs.long * rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint * rhs.uint
			return new value lhs.ulong * rhs.ulong

		return new value

//----------------------------------------------------------------------------------------------
// 0/0 === undef, 0/.0 === NaN

	operator / value, lhs value, rhs value static
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str
		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value lhs.dta.float / rhs.float
				return new value lhs.dta.double / rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value lhs.float / rhs.dta.float
				return new value lhs.double / rhs.dta.double
			if lhs.is64 || rhs.is64
				var long = rhs.long
				if long == 0; return new value
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long / long
			if lhs.signed
				if rhs.signed || rhs.numsz < 4
					var int = rhs.int
					if int == 0; return new value
					return new value lhs.int / int
				var long = rhs.long
				if long == 0; return new value
				return new value lhs.long / long
			if !rhs.signed || rhs.numsz < 4
				var uint = rhs.uint
				if uint == 0; return new value
				return new value lhs.uint / uint
			var ulong = rhs.ulong
			if ulong == 0; return new value
			return new value lhs.ulong / ulong

		return new value

//----------------------------------------------------------------------------------------------

	operator % value, lhs value, rhs value static
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str
		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value lhs.dta.float % rhs.float
				return new value lhs.dta.double % rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value lhs.float % rhs.dta.float
				return new value lhs.double % rhs.dta.double
			if lhs.is64 || rhs.is64
				var long = rhs.long
				if long == 0; return new value
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long % long
			if lhs.signed
				if rhs.signed || rhs.numsz < 4
					var int = rhs.int
					if int == 0; return new value
					return new value lhs.int % int
				var long = rhs.long
				if long == 0; return new value
				return new value lhs.long % long
			if !rhs.signed || rhs.numsz < 4
				var uint = rhs.uint
				if uint == 0; return new value
				return new value lhs.uint % uint
			var ulong = rhs.ulong
			if ulong == 0; return new value
			return new value lhs.ulong % ulong

		return new value

//##############################################################################################

	operator & value, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

	//	alternative concat (known in Visual Basic)
		if lhs.vt == vtype.string
			return new value lhs.str + rhs.string
		if rhs.vt == vtype.string
			return new value lhs.string + rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp || rhs.isfp
				return new value lhs.long & rhs.long
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long & rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int & rhs.int
				return new value lhs.long & rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint & rhs.uint
			return new value lhs.ulong & rhs.ulong

		return new value
	
//----------------------------------------------------------------------------------------------

	operator | value, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

	//	alternative concat
		if lhs.vt == vtype.string
			return new value lhs.str + rhs.string
		if rhs.vt == vtype.string
			return new value lhs.string + rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp || rhs.isfp
				return new value lhs.long | rhs.long
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long | rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int | rhs.int
				return new value lhs.long | rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint | rhs.uint
			return new value lhs.ulong | rhs.ulong

		return new value

//----------------------------------------------------------------------------------------------

	operator ^ value, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.isnum && rhs.isnum
		//	alternative to math.pow if float/double is involved
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return new value math.pow lhs.dta.float, rhs.float
				return new value math.pow lhs.dta.double, rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return new value math.pow lhs.float, rhs.dta.float
				return new value math.pow lhs.double, rhs.dta.double
			if lhs.isfp || rhs.isfp
				return new value lhs.long ^ rhs.long
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long ^ rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int ^ rhs.int
				return new value lhs.long ^ rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint ^ rhs.uint
			return new value lhs.ulong ^ rhs.ulong

		return new value

//----------------------------------------------------------------------------------------------
//	C# requires the second argument of operator << to be int

	shiftLeft value, by value
		return shiftLeft this, by
	shiftLeft value, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

	//	this could become some formatting later
		if lhs.vt == vtype.string
			return new value lhs.str + rhs.string
		if rhs.vt == vtype.string
			return new value lhs.string + rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp || rhs.isfp
				return new value lhs.long << rhs.int
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long << rhs.int
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int << rhs.int
				return new value lhs.long << rhs.int
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint << rhs.int
			return new value lhs.ulong << rhs.int

		return new value

	shiftRight value, by value
		return shiftLeft this, by
	shiftRight value, lhs value, rhs value static

	//	we could 'pull' numbers out of string (but only if rhs.vt == vtype.ident)
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp || rhs.isfp
				return new value lhs.long >> rhs.int
			if lhs.is64 || rhs.is64
				return new value (lhs.is64 ? lhs.vt : rhs.vt), lhs.long >> rhs.int
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int >> rhs.int
				return new value lhs.long >> rhs.int
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint >> rhs.int
			return new value lhs.ulong >> rhs.int

		return new value

//##############################################################################################

	operator == bool, lhs value, rhs value static

		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.isnum && rhs.isnum
			if lhs.isfp || rhs.isfp
				return lhs.double == rhs.double
			if lhs.is64 || rhs.is64
				return lhs.long == rhs.long
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return lhs.int == rhs.int
				return new value lhs.long == rhs.long
			if !rhs.signed || rhs.numsz < 4
				return lhs.uint == rhs.uint
			return lhs.ulong == rhs.ulong

		switch lhs.vt
		case vtype.undef
		//	undefined == null (equality) but undefined !== null (not identical)
			return rhs.vt == vtype.undef || rhs.vt == vtype.object && rhs.ptr == null
		case vtype.object
		//	ptr is null for vtype.undefined
			return (rhs.vt == vtype.object || rhs.vt == vtype.undef) && lhs.ptr == rhs.ptr

		switch rhs.vt
		case vtype.undef
		case vtype.object
			return false

		// for now, may get changed for side-effects
		return lhs.string == rhs.string

	operator != bool, lhs value, rhs value static
		return !(lhs == rhs)

	equals bool, object override
		if object is value
			return this == value! object
		switch vt
		default
			return false
		case vtype.object
			return ptr == object
		case vtype.ident
			return (iProps! ptr).get(str).equals object
		case vtype.string
			return object is string && str			== string!	object
		case vtype.char
			return object is char	&& dta.char		== char!	object
		case vtype.bool
			return object is bool	&& dta.bool		== bool!	object
		case vtype.byte
			return object is byte	&& dta.byte		== byte!	object
		case vtype.ushort
			return object is ushort	&& dta.ushort	== ushort!	object
		case vtype.uint
			return object is uint	&& dta.uint		== uint!	object
		case vtype.ulong
			return object is ulong	&& dta.ulong	== ulong!	object
		case vtype.sbyte
			return object is sbyte	&& dta.sbyte	== sbyte!	object
		case vtype.short
			return object is short	&& dta.short	== short!	object
		case vtype.int
			return object is int	&& dta.int		== int!		object
		case vtype.long
			return object is long	&& dta.long		== long!	object
		case vtype.float
			return object is float	&& dta.float	== float!	object
		case vtype.double
			return object is double	&& dta.double	== double!	object

	getHashCode int override
		switch vt
		default
			return ~0
		case vtype.object
			return ptr == null ? 0 : ptr.getHashCode()
		case vtype.ident
			return (iProps! ptr).get(str).getHashCode()
		case vtype.string
			return str.getHashCode()
		case vtype.char
		case vtype.bool
		case vtype.byte
		case vtype.ushort
		case vtype.uint
		case vtype.ulong
		case vtype.sbyte
		case vtype.short
		case vtype.int
		case vtype.long
			return dta.long.getHashCode()
		case vtype.float
		case vtype.double
			return dta.double.getHashCode()

//==============================================================================================

	operator < bool, lhs value, rhs value static
		
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.vt == vtype.string
			return (string.compare lhs.str, rhs.string, culture, compareOptions.none) < 0
		if rhs.vt == vtype.string
			return (string.compare lhs.string, rhs.str, culture, compareOptions.none) < 0

		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return lhs.dta.float < rhs.float
				return lhs.dta.double < rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return lhs.float < rhs.dta.float
				return lhs.double < rhs.dta.double
			if lhs.is64 || rhs.is64
				return lhs.vt == vtype.ulong ?
					lhs.dta.ulong < rhs.dta.ulong && (rhs.vt == vtype.ulong || rhs.dta.long >= 0) :
					lhs.dta.long  < rhs.dta.long  || (rhs.vt == vtype.ulong && lhs.dta.long < 0)
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int < rhs.int
				return new value lhs.long < rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint < rhs.uint
			return new value lhs.ulong < rhs.ulong

		return false

	operator <= bool, lhs value, rhs value static
		
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.vt == vtype.string
			return (string.compare lhs.str, rhs.string, culture, compareOptions.none) <= 0
		if rhs.vt == vtype.string
			return (string.compare lhs.string, rhs.str, culture, compareOptions.none) <= 0

		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return lhs.dta.float <= rhs.float
				return lhs.dta.double <= rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return lhs.float <= rhs.dta.float
				return lhs.double <= rhs.dta.double
			if lhs.is64 || rhs.is64
				return lhs.vt == vtype.ulong ?
					lhs.dta.ulong <= rhs.dta.ulong && (rhs.vt == vtype.ulong || rhs.dta.long >= 0) :
					lhs.dta.long  <= rhs.dta.long  || (rhs.vt == vtype.ulong && lhs.dta.long < 0)
			if lhs.signed 
				if rhs.signed || rhs.numsz < 4
					return new value lhs.int <= rhs.int
				return new value lhs.long <= rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint <= rhs.uint
			return new value lhs.ulong <= rhs.ulong

		return false

//----------------------------------------------------------------------------------------------

	operator > bool, lhs value, rhs value static
		
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.vt == vtype.string
			return (string.compare lhs.str, rhs.string, culture, compareOptions.none) > 0
		if rhs.vt == vtype.string
			return (string.compare lhs.string, rhs.str, culture, compareOptions.none) > 0

		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return lhs.dta.float > rhs.float
				return lhs.dta.double > rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return lhs.float > rhs.dta.float
				return lhs.double > rhs.dta.double
			if lhs.is64 || rhs.is64
				return lhs.vt == vtype.ulong ?
					lhs.dta.ulong > rhs.dta.ulong && (rhs.vt == vtype.ulong || rhs.dta.long < 0) :
					lhs.dta.long  > rhs.dta.long  || (rhs.vt == vtype.ulong && lhs.dta.long >= 0)
			if lhs.signed 
				if rhs.signed || rhs.numsz > 4
					return new value lhs.int > rhs.int
				return new value lhs.long > rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint > rhs.uint
			return new value lhs.ulong > rhs.ulong

		return false

	operator >= bool, lhs value, rhs value static
		
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str

		if lhs.vt == vtype.string
			return (string.compare lhs.str, rhs.string, culture, compareOptions.none) >= 0
		if rhs.vt == vtype.string
			return (string.compare lhs.string, rhs.str, culture, compareOptions.none) >= 0

		if lhs.isnum && rhs.isnum
			if lhs.isfp
				if lhs.vt == vtype.float && !rhs.is64
					return lhs.dta.float >= rhs.float
				return lhs.dta.double >= rhs.double
			if rhs.isfp
				if rhs.vt == vtype.float && !lhs.is64
					return lhs.float >= rhs.dta.float
				return lhs.double >= rhs.dta.double
			if lhs.is64 || rhs.is64
				return lhs.vt == vtype.ulong ?
					lhs.dta.ulong >= rhs.dta.ulong && (rhs.vt == vtype.ulong || rhs.dta.long < 0) :
					lhs.dta.long  >= rhs.dta.long  || (rhs.vt == vtype.ulong && lhs.dta.long >= 0)
			if lhs.signed 
				if rhs.signed || rhs.numsz > 4
					return new value lhs.int >= rhs.int
				return new value lhs.long >= rhs.long
			if !rhs.signed || rhs.numsz < 4
				return new value lhs.uint >= rhs.uint
			return new value lhs.ulong >= rhs.ulong

		return false

//----------------------------------------------------------------------------------------------

	identical bool, rhs value
		return identical this, rhs
	identical bool, lhs value, rhs value static
		if lhs.vt == vtype.ident
			lhs = (iProps! lhs.ptr).get lhs.str
		if rhs.vt == vtype.ident
			rhs = (iProps! rhs.ptr).get rhs.str
		return lhs.vt == rhs.vt && lhs.ptr == rhs.ptr &&
			lhs.str == rhs.str && lhs.dta.long == rhs.dta.long

