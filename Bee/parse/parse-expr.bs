use bee.run, sys: io, text, cols.gen, diag
pkg bee

def parser partial

	expression, flags flag = flag.none virtual
	;; parse expression

		var bottom = opsAt
		//^ cannot pop operators bellow this level (they belong to the caller, not us)
	unext:
		var unary = true
		//^ true  after binary operators and at start of expression: '(', '[', ',' etc.
		//^ false after identifier, literal or closing paren/brace
	next:
		var code = opcode
		var kind = code.kind()
		if code == opcode.ident ||	//--------------------------------------------------- identifier
		  kind == opkind.number ||	// type specifier (byte, bool, int, ...)
		  code == opcode.string || code == opcode.char || // type names
		//TODO: support inline functions and lambda
		//..... + look ahead for '(' or '"' in script mode to distinquish call from definition
		  code == opcode.func || code == opcode.object
			if !unary; goto autocall
			if word.length > 127
				raise parseError this, "Identifier name too long"
			cgen.push opcode.ident, word
			if peek == '!'
				op opcode.cast, bottom
				next().next()
				goto unext
			next()
			unary = false
			goto next

		switch kind
		case opkind.literal		//########################################################## literal
			switch code
			default				//-------------------------------------------------- null, this, ...
				debug.assert code == opcode.undef || code == opcode.null ||
					code == opcode.false || code == opcode.true ||
					code == opcode.this || code == opcode.base ||
					code == opcode.exception
				if !unary; goto autocall
				cgen.push code
				next()
				unary = false
				goto next
			case opcode.default	//---------------------------------------------------------- default
				raise parseError this, "TODO"
			case opcode.number	//------------------------------------------- number, string or char
				if instr
					raise parseError this, "Unterminated string (or char) literal"
				if curr == '"'; code = opcode.string
				else if curr == '\''; code = opcode.char
				if !unary; goto autocall
				cgen.push code, rest()
				next()
				unary = false
				goto next

		case opkind.assign		//######################################################### operator
			checkUnary unary, false
			op code
			next()
			goto unext
		case opkind.binary		//----------------------------------------------------------- binary
			if code != opcode.add && code != opcode.sub
				goto binary_check
			if unary
				code = code == opcode.add ? opcode.plus : opcode.neg
				if next().opcode != opcode.number
					goto unary
			//	patch '+1' and '-2' as whole number (not +(1) or -(2))
				cgen.push opcode.number, code.text() + rest()
				next()
				unary = false
				goto next
			if white && !peekWhite
				goto autocall
			goto binary
		case opkind.logic
		binary_check:
			checkUnary unary, false
		binary:
			next()
			op code, bottom
			goto unext
		case opkind.unary		//------------------------------------------------------------ unary
			checkUnary unary, true
			next()
		unary:
			op code
			goto next
		case opkind.prepost
			if unary
				op code
				next()
				goto next
			switch code
			case opcode.inc
				op opcode.postInc, bottom
				next()
				goto next
			case opcode.dec
				op opcode.postDec, bottom
				next()
				goto next
			default
				raise expectedUnary this

		case opkind.special		//########################################################## special
			switch code
			case opcode.create
				checkUnary unary, true
				next()
				op code
				type flags
				//TODO: initializer
				unary = false
				goto next
			case opcode.dot
				if unary || white
					if unary && peek >= '0' && peek <= '9' // patch '.7' but not 'x.7' or '...).7'
						cgen.push opcode.number, code.text() + next().rest()
						next()
						unary = false
						goto next
					if unary || opts & opt.dotThisAfterWhite != 0
						if flags & (flag.static|flag.with) == flag.static
							raise parseError this, "Dot-shortcut for 'this' not allowed in static method"
						if !unary
							goto autocall
						cgen.push flags & flag.with != 0 ? opcode.ivalue : opcode.this
						unary = false
				if next().word == null
					raise parseError this, "Expected word after '.'"
				if word.length > 127
					raise parseError this, "Identifier name too long"
				cgen.push opcode.ident, word
				cgen.prepare opcode.dot
				if peek == '!'
					op opcode.cast, bottom
					next().next()
					goto unext
				next()
				unary = false
				goto next
			case opcode.ternary	//------------------------------------------------------- ternary ?:
				while opsAt > bottom
					cgen.prepare pop()
				next().expression flags &~flag.limit
				if eol then nextLine()
				if curr != ':'
					raise parseError this, "Expected matching ':' for ternary '?'"
				next().expression flags
				cgen.prepare opcode.ternary
				unary = false
				goto next
			case opcode.var		//--------------------------------------------- variable declaration
				if next().word == null
					raise parseError this, "Expected variable name"
				if word.length > 127
					raise parseError this, "Variable name too long"
				cgen.push opcode.ident, word
				next()
				if curr == ':'
					if next().word == null
						raise parseError this, "Expected variable type"
				type flags
				if opcode == opcode.assign
					next().expression flags
				else
					cgen.push opcode.undef
				cgen.prepare opcode.var
				unary = false
				goto next
			break

		case opkind.meta		//############################################################ other
			debug.assert code == opcode.unknown
			switch curr
			case '('			//---------------------------------------------------------------- (
				if unary || white
					if !unary; goto autocall
					next().expression flags &~flag.limit
					if curr != ')'
						raise parseError this, "Expected matching ')'"
					next()
					unary = false
					goto next
				if next().curr == ')'
					cgen.prepare opcode.ecall
					next()
					unary = false
					goto next

				expression flags &~flag.limit

				if curr == ')'
					cgen.prepare opcode.call
					next()
					unary = false
					goto next

				if curr != ','
					raise parseError this, "Expected ',' or ')'"
				do
					op opcode.comma
					next().expression flags &~flag.limit
				while curr == ','
				if curr != ')'
					raise parseError this, "Expected matching ')'"
				next()
				cgen.prepare opcode.mcall
				unary = false
				goto next
			case '['			//---------------------------------------------------------------- [
				if unary
					if opts & opt.bracketsAsParens == 0
						raise parseError this, "Unexpected '[' - nothing to index"
					next().expression flags &~flag.limit
					if curr != ']'
						raise parseError this, "Expected matching ']'"
					next()
					unary = false
					goto next
				if next().curr == ']'
					if opts & opt.bracketsAsParens == 0
						raise parseError this, "Unexpected '[' - nothing to index"
					cgen.prepare opcode.ecall
					next()
					unary = false
					goto next

				expression flags &~flag.limit

				if curr == ']'
					cgen.prepare opcode.index
					next()
					unary = false
					goto next

				if curr != ','
					raise parseError this, "Expected ',' or ']'"
				do
					op opcode.comma
					next().expression flags &~flag.limit
				while curr == ','
				if curr != ']'
					raise parseError this, "Expected matching ']'"
				next()
				cgen.prepare opcode.mindex
				unary = false
				goto next

	//######################################################################################### TAIL
			default
				goto done
		default
			if code.kind() >= opkind.statement
				goto done
			break
		raise parseError this, "Unrecognised token: {0} / {1}", code, word ?? curr.toString()

	done:
		if unary
			if eol
				nextLine()
				goto next;
			raise expectedBinary this

		while opsAt > bottom
			cgen.prepare pop()
		return

	//#################################################################################### auto call
	autocall:
		debug.assert !unary
		expression flags
		if curr != ','
			cgen.prepare opcode.call
			unary = false
			goto next
		do
			op opcode.comma
			next().expression flags
		while curr == ','
		cgen.prepare opcode.mcall
		unary = false
		goto next
