use sys: io, diag
pkg bee

def scanner
; debuggerDisplay "{_lnum}:{_at}: {_curr}; {_word}; {_line}"

	.ctor
		line = null
	.ctor line string
		this.line = line
	.ctor textReader
		reader = textReader

	@@ source text reader
	reader textReader get set
		_reader = value
		setLine null
		lnum = 0
		state = 0
		nextLine()

	@@ current line
	line string get set
		_reader = null
		setLine value
		next()
	setLine this, value string virtual
		_line = value
		lnum++
		at	= 0
		end	= 0
		word = null
		if !instr; curr = '\0'
		tabExtra = 0
		indent = -1

	lnum int get set
	;; current line number
	at int get set.protected
	;; start of current token/lexeme (index of first character)
	end int get set.protected
	;; end of current token/lexeme (index after last character)
	word string get set.protected
	;; current word or null (if not word)
	curr char get set.protected
	;; current character or '\0' (if word)
	;; @note identifies type of token, which for strings means " or ' after any $@
	white bool get set.protected
	;; indicates that there was some white-space before current token
	iesc char get set = '$'
	;; escape character for identifiers (words - e.g. $ for B#, @ for C#)

	state byte get set
	;; scanner state

	const TEXT		byte public = 0
	const CHAR		byte public = 1
	const STRING	byte public = 2
	const VERBATIM	byte public = 3
	const COMMENT	byte public = 4

	normal	=> state == TEXT
	;; normal state (text)
	instr	=> state >= CHAR && state <= VERBATIM
	;; still inside string (or character literal)
	comment	=> state == COMMENT
	;; still inside multi-line comment

	eol => curr == '\n'
	;; end of line indicator (curr == '\n')
	eof => line == null
	;; end of file indicator
	peekEol => eof || end >= line.length
	;; next is end of line
	peek char => peekEol ? '\n' : line[end]
	;; next (look-ahead) char ('\n' for end of line)
	peekWhite bool => char.isWhiteSpace peek
	;; next (look-ahead) char is white (or end of line/file)
	peekAt char, i int
	;; peek characters after (or before) current token
		i += end
		return eof ? i == 0 ? '\n' : '\0' :
			i < line.length ? i >= 0 ? line[i] :
			i == -1 ? '\n' : '\0' :
			i == line.length ? '\n' : '\0'
	charAt char, i int
	;; get character of current token
		i += at
		return i < end ? line[i] : '\0'

	tabWidth int get set = 4
	;; makes the difference between @col and @at
	tabExtra int get set protected
	;; the difference between @col and @at (extra artifitial spaces)
	col int => at + tabExtra
	;; column of current token (uses @tabWidth)
		protected set
			tabExtra = value - at

	indent int get set.protected
	;; indentation of current line (in spaces, tabs converted, -1 if undecided or EOF)
	first => indent == col
	;; indicates that scanner is at first token of the line (after leading whitespace)

	wstart bool, c char virtual protected
	;; return true if @c starts a word
	;; (e.g. c == '_' || char.isLetter c)
		return c == '_' || char.isLetter c
	wcont bool, c char virtual protected
	;; return true if @c is still in a word
	;; (e.g. c == '_' || char.isLetterOrDigit c)
		return c == '_' || char.isLetterOrDigit c

	wstart bool protected
	;; return true if @curr starts a word
	;; (e.g. curr == '_' || char.isLetter curr)
		return wstart curr
	wcont bool protected
	;; return true if @curr is still in a word
	;; (e.g. curr == '_' || char.isLetterOrDigit curr)
		return wcont curr

	nextLine this, skipEmpty = true
	;; read next line and parse first token
	;; @skipEmpty skip empty lines (whitespace-only)
	;; @remarks Won't call @next() if @skipEmpty = false
		do
			setLine reader?.readLine()
			if eof; return
			if !skipEmpty; return
			next()
		while eol

	next this, line bool, skipEmpty = true virtual
	;; parse next word, literal or character on this or next (non-empty) line
		if line && eol
			nextLine skipEmpty
		else
			next()
			if line && eol
				nextLine skipEmpty

	next this virtual
	;; parse next word, literal or character on this line
		if instr
			skipString state == VERBATIM
			return
		word = null
		curr = '\0'
		skipWhite()
		at = end
		if indent < 0; indent = col
		curr = peek
		if eol; return
		if wstart()
			skipWord()
			word = line.substring at, end-at
			return
		var ahead = peekAt 1
		if curr == iesc && wstart ahead
			end++
			skipWord()
			word = line.substring at, end-at
			return
		if char.isDigit curr // we rather leave .1 to parser (consider x.1, <x>.1)
			for
				if ++end == line.length
					break
				var prev = curr
				curr = line[end]
				if (curr == '+' || curr == '-') &&
				  (prev == 'e' || prev == 'E')
					continue
				if !wcont() && (curr != '.' || !char.isDigit peekAt 1)
					break
			curr = line[at]
			return
		if curr == '"' || curr == '\''
			skipString()
			return
		if curr == '@' || curr == '$'
			if ahead == '"' || ahead == '\''
				end++
				var verbatim = curr == '@'
				curr = ahead
				skipString verbatim
				return
			if curr == '$' && ahead == '@'
				var ahead2 = peekAt 2
				if ahead2 == '"' || ahead2 == '\''
					end += 2
					curr = ahead2
					skipString true
					return
		end++
		return

	read char
	;; read one character from token
		return at == end ? '\0' : line[at++]
	rest string
	;; read rest of the token (or whole token if at start of it) as string
		var s = line.substring at, end-at
		at = end
		return s

	skip char
	;; skip one character (including end of line)
	;; @return the skipped character or '\n' if next line was read
		if peekEol
			nextLine()
			return '\n'
		return line[end++]

	skipWord this
	;; skip whole word or numeric literal
		if eol; raise invalidOperationException "No word"
		do
			if ++end == line.length
				break
			curr = line[end]
		while wcont()
		curr = line[at]

	nextWord string
	;; parse and return next word (throws if not word)
		return next().readWord()
	readWord string
	;; read last word (throws if not word)
		if word == null
			raise parseError this, "Expected word"
		return word

	skipSimpleWhite this
	;; skip/read white space (but not comments) on this line
		white = end == 0
		for
			if peekEol; curr = '\n'; return
			var c = peek
			if char.isWhiteSpace c
				white = true
				do
					if c == '\t'; tabExtra += tabWidth-1 - col%tabWidth
				while ++end < line.length && char.isWhiteSpace c = line[end]
				continue
			return

	skipWhite this virtual
	;; skip/read white space (including comments) on this line
		white = end == 0
		if comment
			multiLineComment()
			if comment
				return
		for
			if peekEol; curr = '\n'; return
			var c = peek
			if char.isWhiteSpace c
				white = true
				do
					if c == '\t'; tabExtra += tabWidth-1 - col%tabWidth
				while ++end < line.length && char.isWhiteSpace c = line[end]
				continue
			if c == '#' && preprocOrComment(); white = true; break
			if c == '/' && end + 1 < line.length
				c = line[end + 1]
				if c == '/' && singleLineComment(); white = true; break
				if c == '*' && multiLineComment(); white = true
					if comment
						return
					continue
			return
		if eol; curr = '\n'
	
	preprocOrComment bool protected virtual
	;; parse preprocessor line or comment: #...
	;; @return true if supported
		end = line.length
		return true

	singleLineComment bool protected virtual
	;; parse single line comment: //...
	;; @return true if supported
		end = line.length
		return true

	multiLineComment bool protected virtual
	;; parse multi line comment: /*...*/
	;; @return true if supported
		if state != COMMENT; end += 2
		state = COMMENT
		for
			if peekEol
				if nextLine(false).eof; return true
				continue
			if line[end++] == '*' && end < line.length && line[end] == '/'
				end++
				state = TEXT
				return true

	skipString this, verbatim = false
	;; skip/read string or char literal
	;; @verbatim don't interpret control characters
	;; @remarks any character (except '\' if not verbatim) can be used as delimiter
	;;	which means that it can be used to read e.g. /regex/
		var kind = curr
		if !instr
			state = verbatim ? VERBATIM : kind == '\'' ? CHAR : STRING
			if !peekEol; end++
		for
			if peekEol; return
			var c = line[end++]
			if c == kind; break
			if !verbatim && c == '\\' && end < line.length; end++
			//TODO \x + \u
		state = TEXT