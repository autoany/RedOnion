use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def parser partial

	reset this
	;; reset operator stack
		opsAt = 0

	ops opcode[] get set.private = new opcode[64]
	;; operator stack (to be processed according to priority/precedence)
	opsAt  int get set.private
	;; write position (top) for operator stack

	op this, op opcode
	;; push right-associative operator (assign or special)
		debug.assert op == opcode.comma ||
			op.prior() <= opcode.assign.prior() ||
			op.unary() && !op.postfix()

		if opsAt == ops.length
			array.resize ref _ops, ops.length << 1
		ops[opsAt++] = op

	op this, op opcode, bottom int
	;; push left-associative operator but first pop and prepare operators with higher or same priority
		debug.assert op.prior() > opcode.assign.prior()

		while opsAt > bottom && top().prior() >= op.prior()
			cgen.prepare pop()

		if opsAt == ops.length
			array.resize ref _ops, ops.length << 1
		ops[opsAt++] = op

	top opcode
	;; get/peek top operator (without taking/poping it)
		debug.assert opsAt > 0

		return ops[opsAt-1]

	pop opcode
	;; get and remove (pop) top operator
		debug.assert opsAt > 0

		return ops[--opsAt]


