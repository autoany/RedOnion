use bee.run, sys: io, text, cols.gen, diag
pkg bee

def parser lexer partial

	opts opt get set
	def opt enum @flags
		none				= 0
		script				= 1<<0	@@ targeting stript engine (not .NET)
		typed				= 1<<1	@@ typed language (require static types)
		untyped				= 1<<2	@@ untyped language (no static types)

		dotThisAfterWhite	= 1<<16	@@ "x .y" => "x(this.y)" if set, "x.y" otherwise
		bracketsAsParens	= 1<<17	@@ "f[] * [3 + 4]" => "f() * (3 + 4)" if set, error otherwise
									@@ @note: "g f [x], y" => "g(f(x), y)"; "g f (x), y" => "g(f(x,y))"

	def flag enum @flags
		none		= 0
		limit		= 1<<0	@@ expression in limited context (inside if/while/using... condition/declaration)
		noexpr		= 1<<1	@@ allow empty/no expression/type (used in fullexpr and fulltype)
		nosize		= 1<<2	@@ do not emit block size (in @block)
		wasdo		= 1<<3	@@ after 'do' (used in @statements - terminate on while/until)
		wasif		= 1<<4	@@ after 'if' (used in @statements - terminate on else)
		single		= 1<<5	@@ parse only one class (used in @classes when called from @expression)
		member		= 1<<6	@@ top level of member function (can become property)

	//	unused but planned
		with		= 1<<16	@@ inside `with` statement (.x => {ivalue}.x, not this.x)
		static		= 1<<17	@@ in static method/class (.x not allowed, unless inside `with`)

public:
	@@ parse compilation unit (full source file / script) from string
	unit, string
		reader = new stringReader string
		unit()
		reader = null

	@@ parse compilation unit (full source file / script) from stream
	unit, textReader, dispose bool
		if !dispose
			reader = textReader
			unit()
		else using reader = textReader
			unit()
		reader = null

	@@ parse compilation unit (full source file / script) from stream
	unit, stream, dispose bool
		unit (new streamReader stream), dispose

protected:
	@@ parent indentation (childs must have higher except labels that can have same)
	var pindent = -1

	@@ parser saved context (for current line only)
	def savedAt struct
	public:
		var at int @@ parser position
		var pi int @@ previous indentation (pindent)
		.ctor parser
			at = parser.at
			pi = parser.pindent

	@@ revert parser state
	revert this, savedAt
		pindent = savedAt.pi
		if at == savedAt.at; return
		end = savedAt.at
		next()

protected:

	@@ parse compilation unit (full source file / script) from the reader or line already set on scanner
	unit virtual
		pindent = -1
		imports flag.none
		do
			while (byte! opcode) == (byte! opcode.space)
				var opword = word
				var ns = next(true).word
				if ns == null
					raise parseError this, "Expected namespace or type name after '{0}'", opword
				while next().opcode == opcode.dot
					if next(true).word == null
						raise parseError this, "Expected namespace or type name after '.'"
					ns += "." + word
				cgen.ident opcode.space, ns
		while classes flag.none
		block flag.nosize

	@@ parse imports (use, using, import)
	imports bool, flags flag virtual
	//TODO: import ns.* (Java) and using static cls => opcode.useAll
	//TODO: using something = ns.whatever => opcode.useAs
		if (byte! opcode) != (byte! opcode.import) && opcode != opcode.using
			return false
		do
			var opword = word
			var ns = next(true).word
			if ns == null
				raise parseError this, "Expected namespace or type name after '{0}'", opword
			var ns2 string = null
			for
				while next().opcode == opcode.dot
					if next(true).word == null
						raise parseError this, "Expected namespace or type name after '.'"
					ns += "." + word
				cgen.ident opcode.import, ns

				while curr == ':'
					if next(true).word == null
						if eol; break
						raise parseError this, "Expected namespace or type name after ':'"
					ns2 = ns
					ns = ns + "." + word
					while next().opcode == opcode.dot
						if next(true).word == null
							raise parseError this, "Expected namespace or type name after '.'"
						ns += "." + word
					cgen.ident opcode.import, ns

				if curr != ','
					break
				do next true
				while curr == ','
				if word == null
					if eol; break
					raise parseError this, "Expected namespace or type name after ','"
				if ns2 == null; ns = word
				else ns = ns2 + "." + word
			if curr == ';'
				do next()
				while curr == ';'
				if !eol; continue
			if !eol
				raise parseError this, "Expected end of line after import(s)"
			nextLine()
		while (byte! opcode) == (byte! opcode.import) || opcode == opcode.using
		return true

public:
//	workaround for old VSIX
	next this override
		base.next()
	next this, line bool, skipEmpty = true override
		base.next line, skipEmpty
