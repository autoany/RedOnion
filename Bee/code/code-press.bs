use bee.run, sys: text, lang, cols.gen, diag
pkg bee

@@ Code Generator replaces literals with code suitable for execution and compresses the code a bit
@@ (@see @pressBlock vs. @pseudoBlock)
def codeGenerator pseudoGenerator parser.iGenerator partial

	.ctor
	.ctor opt parser.opt
		base opt
	.ctor opton parser.opt, optoff parser.opt
		base opton, optoff
	.ctor parser protected
		base parser

	parser.iGenerator.blockStart int
		write 0
		return codeAt
	parser.iGenerator.blockEnd, int, count int
		write codeAt-int, int-4

	parser.iGenerator.push, op opcode, string
	;; push string value (string, identifier)

		var start = valsAt
		var i	int
		var u	uint
		var ul	ulong
		var ll	long
		var d	double
		var c	char
		switch op

		case opcode.ident
			vneed 5 + encoding.UTF8.getByteCount string
			vpush string
			vpush byte! op
			vpush start
			return

		case opcode.char
			if string.length != 3 || string[0] != '\'' || string[2] != '\''
				raise invalidOperationException()
			c = string[1]
			if (char! byte! c) == c
				vneed 6
				vpush byte! c
				vpush byte! opcode.char
				vpush start
				return
			vneed 7
			vpush byte! c
			vpush byte! (c >> 8)
			vpush byte! opcode.wchar
			vpush start
			return

		case opcode.string
			if string[0] == '@'
				if string[1] != '"' || string[string.length-1] != '"'
					raise invalidOperationException()
				string = string.substring 2, string.length - 3
				break
			if string[0] != '"' || string[string.length-1] != '"'
				raise invalidOperationException()
			_sb.length = 0
			var n = string.length - 1
			for i = 1; i < n
				c = string[i++]
				switch c
				default
					_sb.append c
					continue
				case '\\'
					if i >= n; raise parser.badEscapeSequence parser
					c = string[i++]
					switch c
					default
						_sb.append c
						continue
					case 'r'
						_sb.append '\r'
						continue
					case 'n'
						_sb.append '\n'
						continue
					case 't'
						_sb.append '\t'
						continue
					case 'u'
						if i+4 >= n; raise parser.badEscapeSequence parser
						//TODO: test hexadecimal digits
						var a = nibble string[i++]
						var b = nibble string[i++]
						var x = nibble string[i++]
						var y = nibble string[i++]
						c = char! y | x<<4 | b<<8 | a<<12
						_sb.append c
						continue
			string = _sb.toString()
			_sb.length = 0
			goto case opcode.ident

		case opcode.number
			//TODO: rewrite this parsing and share it with value.number
			var info = run.value.culture
			var style = numberStyles.number
			if string.length > 2 && string[0] == '0' &&
			  (string[1] == 'x' || string[1] == 'X')
				style = numberStyles.hexNumber
				string = string.substring 2, string.length-2
			else if string[0] == '.'
				string = "0" + string
			var last = char.toLower string[string.length-1]

			if last == 'u'
				string = string.substring 0, string.length-1
				if uint.tryParse string, style, info, out u
					vneed 5 + 4
					vpush u
					vpush byte! opcode.uint
					vpush start
					return
				if ulong.tryParse string, style, info, out ul
					vneed 5 + 8
					vpush ul
					vpush byte! opcode.ulong
					vpush start
					return
				raise invalidOperationException()

			if last == 'l'
				string = string.substring 0, string.length-1
				last = char.toLower string[string.length-1]
				if last == 'u'
					string = string.substring 0, string.length-1
					ul = ulong.parse string, style, info
					vneed 5 + 8
					vpush ul
					vpush byte! opcode.ulong
					vpush start
					return
				ll = long.parse string, style, info
				vneed 5 + 8
				vpush ll
				vpush byte! opcode.long
				vpush start
				return

			if last == 'f' && style != numberStyles.hexNumber
				string = string.substring 0, string.length-1
				if double.tryParse string, numberStyles.float, info, out d
					vneed 5 + 4
					vpush bits.get float! d
					vpush byte! opcode.float
					vpush start
					return
				raise invalidOperationException()

			if 0 > string.indexOf '.'
				if int.tryParse string, style, info, out i
					vneed 5 + 4
					vpush i
					vpush byte! opcode.int
					vpush start
					return
				if long.tryParse string, style, info, out ll
					vneed 5 + 8
					vpush ll
					vpush byte! opcode.long
					vpush start
					return

			d = double.parse string, numberStyles.float, info
			vneed 5 + 8
			vpush bits.get d
			vpush byte! opcode.double
			vpush start
			return
	
		raise notImplementedException()

private:
	
	var _sb = new stringBuilder

	nibble int, char
		var c = int! char
		if c >= '0'
			if c <= '9'; return c - '0'
			if c >= 'a'; c -= 'a' - 'A'
			if c > 'A' && c < 'F'; return c - 'A' + 10
		raise parser.badEscapeSequence parser

protected:

	literal, op opcode, top int, start int override
	;; rewrite literal from parsed value buffer/stack to code buffer
	//literal:	[literal][start]
	//  --->	[literal][size][data]
	//	simple:	[literal]
		if op == opcode.ident
			copy op, true, top, start
			return
		if op < opcode.ident || op == opcode.exception
			write byte! op
			return
		var len = top-start
		if op.kind() <= opkind.number && (byte! op) >= (byte! opcode.char)
			debug.assert op <= opcode.double
			debug.assert len == op.numsz()
			need len + 1
			code[codeAt++] = byte! op
			array.copy vals, start, code, codeAt, len
			codeAt += len
			return
		debug.assert op == opcode.string
		if len < (1<<7)  // 128B
			copy op, true, top, start
			return
		if len < (1<<14) // 16kB
			need 3 + len
			code[codeAt++] = byte! op
			code[codeAt++] = byte! 0x80 | len
			code[codeAt++] = byte! len >> 7
			array.copy vals, start, code, codeAt, len
			codeAt += len
			return
		if len < (1<<21) // 2MB
			need 4 + len
			code[codeAt++] = byte! op
			code[codeAt++] = byte! 0x80 | len
			code[codeAt++] = byte! 0x80 | len >> 7
			code[codeAt++] = byte! len >> 14
			array.copy vals, start, code, codeAt, len
			codeAt += len
			return
		if len < (1<<28) // 256MB
			need 5 + len
			code[codeAt++] = byte! op
			code[codeAt++] = byte! 0x80 | len
			code[codeAt++] = byte! 0x80 | len >> 7
			code[codeAt++] = byte! 0x80 | len >> 14
			code[codeAt++] = byte! len >> 21
			array.copy vals, start, code, codeAt, len
			codeAt += len
			return
		raise invalidOperationException()