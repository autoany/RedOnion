use bee.run, sys: text, lang, cols.gen, diag, io
pkg bee

def pseudoGenerator partial
protected:

	@@ ensure code buffer capacity
	need, size int
		var need = codeAt + size
		var cap = code.length
		if need < cap; return
		do cap <<= 1 while need > cap
		array.resize ref _code, cap

	@@ write single byte to code buffer
	write, byte
		need 1
		code[codeAt++] = byte
	@@ write single byte to code buffer at specified position
	write, byte, codeAt int
		code[codeAt++] = byte

	@@ write two bytes to code buffer
	write, ushort
		need 2
		code[codeAt++] = byte! ushort
		code[codeAt++] = byte! ushort >> 8
	@@ write two bytes to code buffer at specified position
	write, ushort, codeAt int
		code[codeAt++] = byte! ushort
		code[codeAt++] = byte! ushort >> 8

	@@ write integer (4B LE) to code buffer
	write, int
		need 4
		code[codeAt++] = byte! int
		code[codeAt++] = byte! int >> 8
		code[codeAt++] = byte! int >> 16
		code[codeAt++] = byte! int >> 24
	@@ write integer (4B LE) to code buffer at specified position
	write, int, codeAt int
		code[codeAt++] = byte! int
		code[codeAt++] = byte! int >> 8
		code[codeAt++] = byte! int >> 16
		code[codeAt++] = byte! int >> 24
	@@ write string (UTF8, no terminator, no size mark) to code buffer
	write, string
		write encoding.UTF8.getBytes string
	@@ write byte array to code buffer
	write, bytes byte[]
		need bytes.length
		array.copy bytes, 0, code, codeAt, bytes.length
		codeAt += bytes.length

	@@ write string literal or identifier to code buffer
	@@ @opcode	leading code (type of literal or identifier)
	@@ @blen	true for byte-length (e.g. identifier), false for short/int length (string literal)
	@@ @string	value to write to code buffer
	write, opcode, blen bool, string
		write opcode, blen, encoding.UTF8.getBytes string

	@@ write string literal or identifier to code buffer
	@@ @opcode	leading code (type of literal or identifier)
	@@ @blen	true for byte-length (e.g. identifier), false for short/int length (string literal)
	@@ @bytes	array of bytes to write to code buffer
	write, opcode, blen bool, bytes byte[]
		if blen
			if bytes.length > 255
				raise invalidOperationException "Byte array too long"
			need 2 + bytes.length
			code[codeAt++] = byte! opcode
			code[codeAt++] = byte! bytes.length
		else
			need 5 + bytes.length
			code[codeAt++] = byte! opcode
			code[codeAt++] = byte! bytes.length
			code[codeAt++] = byte! bytes.length >> 8
			code[codeAt++] = byte! bytes.length >> 16
			code[codeAt++] = byte! bytes.length >> 24
		array.copy bytes, 0, code, codeAt, bytes.length
		codeAt += bytes.length

//##################################################################################################
protected:

	@@ copy string literal or identifier from vals to code buffer
	@@ @opcode	leading code (type of literal or identifier)
	@@ @blen	true for byte-length (e.g. identifier), false for int length (string literal)
	@@ @string	value to write to code buffer
	copy, opcode, blen bool, top int, start int
		var len = top-start
		if blen
			if len > 255; raise invalidOperationException "Byte array too long"
			need 2 + len
			code[codeAt++] = byte! opcode
			code[codeAt++] = byte! len
		else
			need 5 + len
			code[codeAt++] = byte! opcode
			code[codeAt++] = byte! len
			code[codeAt++] = byte! len >> 8
			code[codeAt++] = byte! len >> 16
			code[codeAt++] = byte! len >> 24
		array.copy vals, start, code, codeAt, len
		codeAt += len

	@@ copy block from parsed values to code buffer
	copy, top int, start int
		var len = top-start
		need len
		array.copy vals, start, code, codeAt, len
		codeAt += len

//--------------------------------------------------------------------------------------------------

	@@ rewrite code from parsed value buffer/stack to code buffer
	rewrite, top int, type = false virtual

	//literal:	[literal][start]
	//  --->	[literal][size][data]
	//unar:		[arg][op][start]
	//  --->	[op][arg]
	//	--->	[create][type]
	//	--->	[create][call][type][arg]
	//	--->	[create][call2][type][arg1][arg2]
	//	--->	[create][mcall][count][type][args...]
	//binar:	[larg][lstart][rarg][rstart][op][lstart]
	//	--->	[op][larg][rarg]
	//	or		[logic][larg][rsize][rarg]
	//ternary:	[op][start][targ][tstart][farg][fstart][op][start]
	//	--->	[?:][cond][tsize][targ][fsize][farg]
	//	or		[call2][fn][arg1][arg2]
	//	or		[var][name][type][value]
	//mcall:	[op][start][func][fstart][arg1][start1][arg2][start2]....
	//	--->	[op][count][func][args...]

	full:
		var start = topInt top
		top -= 4
		var create = false
	next:
		var op = (opcode! vals[--top]).extend()
		debug.assert op.kind() < opkind.statement

		if op.kind() <= opkind.number
			if !type && !create
				literal op, top, start
				return
			if op == opcode.ident
				copy op, true, top, start
				return
			debug.assert op > opcode.ident || op == opcode.undef ||
				op == opcode.this || op == opcode.null/*object*/
			write byte! op
			return

		write byte! op
		if op.unary()
			create |= op == opcode.create
			goto next

		if op.binary()
		//	first/left argument
			rewrite topInt(top), type || create
		//	second/right argument
			if op == opcode.dot
				start = topInt top
				top -= 4
				op = (opcode! vals[--top]).extend()
				if op != opcode.ident
					raise invalidOperationException()
				var len = top-start
				if len > 127; raise invalidOperationException "Identifier too long"
				need 1 + len
				code[codeAt++] = byte! len
				array.copy vals, start, code, codeAt, len
				codeAt += len
				return
			if op != opcode.logicAnd && op != opcode.logicOr
				goto full
		//	prepare slot for size of second argument
			var second = codeAt
			write 0
			rewrite top
		//	update size of second argument (for skipping)
			write codeAt - second - 4, second
			return

		if op.ternary()
		//	top of middle/second argument
			var mtop = topInt top

			if op == opcode.var
				debug.assert !create
				var varat = --codeAt			// remove our opcode.var
				rewrite topInt mtop
				code[varat] = byte! opcode.var	// rewrite opcode.ident with opcode.var
				rewrite mtop, true
				goto full

		//	rewrite first argument (condition, method or variable)
			rewrite topInt(mtop), type || create
			if op == opcode.ternary
			//	prepare slot for size of second argument (if true)
				var second = codeAt
				write 0
				rewrite mtop
			//	update size of second argument (for skipping)
				write codeAt - second - 4, second
			//	prepare slot for size of third argument (if false)
				var third = codeAt
				write 0
				rewrite top
			//	update size of third argument (for skipping)
				write codeAt - third - 4, third
				return
		//	rewrite second argument (first for method - call2)
			rewrite mtop
		//	rewrite third argument (second for method - call2)
			goto full

		switch op
		case opcode.array
			type = false
			create = true
			break
		case opcode.generic
			type = true
			break
		default
			debug.assert op == opcode.mcall || op == opcode.mindex
			break
		var n = vals[--top]
		write byte! n
		rewrite top, n, type, create

	@@ rewrite n-expressions/values from parsed value buffer/stack to code buffer
	rewrite, top int, n int, type = false, create = false
		if n > 1
			rewrite topInt(top), n-1, type, create
			create = false
		rewrite top, type || create

	@@ rewrite literal from parsed value buffer/stack to code buffer
	literal, op opcode, top int, start int virtual
	//literal:	[literal][start]
	//  --->	[literal][size][data]
	//	simple:	[literal]
		if op < opcode.ident || op == opcode.exception
			write byte! op
			return
		debug.assert op == opcode.ident || op == opcode.number ||
			op == opcode.string || op == opcode.char
		copy op, op != opcode.string && op != opcode.char, top, start

//--------------------------------------------------------------------------------------------------
//	debug view
private:

	_debuggerDisplay_code string get
		if codeAt == 0
			return string.empty
		var sb = new stringBuilder
		var i = 0
		while i < codeAt && i < 32
			sb.appendFormat "{0:X2}", code[i++]
		if i < codeAt
			sb.append "..."
		return sb.toString()