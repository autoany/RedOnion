use bee.run, sys: text, lang, cols.gen, diag, io
pkg bee

@@ generates uncompressed pseudo-code (for source generators)
def pseudoGenerator parser.iGenerator partial
; debuggerDisplay "Code: {_debuggerDisplay_code}; Vals: {_debuggerDisplay_vals};" +
;	" Parser: {Parser._lnum}:{Parser._at}: {Parser._curr}; {Parser._word}; {Parser._line}"

	var parser protected

	.ctor
		.parser = new parser this
	.ctor opt parser.opt
		.parser = new parser this
		.parser.opts = opt
	.ctor opton parser.opt, optoff parser.opt
		.parser = new parser this
		.parser.opts = (parser.opts | opton) &~optoff
	.ctor parser protected
		.parser = parser

	reset this
		parser.reset()
		codeAt = 0

	eof bool => parser.eof

//==================================================================================================

	code byte[] get set.private = new byte[256]
	;; buffer for final code (units, classes, methods, statements, expressions)
	codeAt int get set.protected
	;; write position (top) for code buffer

	toArray byte[]
	;; copy code to separate byte array
		var arr = new byte[codeAt]
		array.copy code, 0, arr, 0, codeAt
		return arr

	expression this
	;; compile expression at parser position to code buffer
		var at = valsAt
		parser.expression()
		rewrite valsAt
		valsAt = at
	type this
	;; compile type at parser position to code buffer
		var at = valsAt
		parser.type()
		rewrite valsAt, true
		valsAt = at

	expression this, string
	;; compile provided expression to code buffer
		parser.line = string
		expression()

	type this, string
	;; compile provided type to code buffer
		parser.line = string
		type()

//--------------------------------------------------------------------------------------------------

	unit this, string
	;; compile full source file / script from string
		reset()
		parser.unit string
	unit this, textReader, dispose bool
	;; compile full source file / script from stream
		reset()
		parser.unit textReader, dispose
	unit this, stream, dispose bool
	;; compile full source file / script from stream
		reset()
		parser.unit stream, dispose

//==================================================================================================
