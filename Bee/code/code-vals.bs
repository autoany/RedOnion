use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def pseudoGenerator parser.iGenerator partial
//--------------------------------------------------------------------------------------------------
//	parser.iGenerator interface

	parser.iGenerator.push, opcode
	;; push simple value (this, null, false, ...)
		var start = valsAt
		vneed 5
		vpush byte! opcode
		vpush start

	parser.iGenerator.push, opcode, string
	;; push string value (string, identifier)
		var start = valsAt
		vneed 5 + encoding.UTF8.getByteCount string
		vpush string
		vpush byte! opcode
		vpush start

//--------------------------------------------------------------------------------------------------
//	generated code (this section could be public - AST parser/gen does not need full code)
protected:

	vals byte[] get set.private = new byte[256]
	;; value buffer/stack (variables, expression trees in postfix notation)
	valsAt int get set
	;; write position (top) for value buffer/stack

	topInt int
	;; peek (read but not pop) top integer from value buffer/stack
		return topInt valsAt

	topInt int, top int
	;; peek (read but not pop) top integer from value buffer/stack with end at @top
	;; @top index after the integer
		debug.assert valsAt >= top && top >= 4

		var value int =      vals[--top]
		value = value << 8 | vals[--top]
		value = value << 8 | vals[--top]
		return  value << 8 | vals[--top]

//--------------------------------------------------------------------------------------------------
//	code buffer helpers
protected:

	vneed, size int
	;; ensure value buffer/stack capacity
		var need = valsAt + size
		var cap = vals.length
		if need < cap; return
		do cap <<= 1 while need > cap
		array.resize ref _vals, cap

	popByte byte
	;; pop top byte from value buffer/stack
		debug.assert valsAt > 0
		return vals[--valsAt]

	popInt int
	;; pop top integer from value buffer/stack
		debug.assert valsAt >= 4

		var v = int! vals[--valsAt]
		v = v << 8 | vals[--valsAt]
		v = v << 8 | vals[--valsAt]
		return v << 8 | vals[--valsAt]

	push, byte
	;; push single byte to value buffer/stack
		vneed 1
		vpush byte
	push, int
	;; push single integer to value buffer/stack
		vneed 4
		vpush int
	push, string
	;; push string (sequence of characters) in UTF8 encoding to value buffer/stack
		push encoding.UTF8.getBytes string
	push, bytes byte[]
	;; push sequence of bytes
		vneed bytes.length
		vpush bytes

	push, uint
	;; push single unsigned integer to value buffer/stack
		vneed 4
		vpush uint
	push, long
	;; push single long integer to value buffer/stack
		vneed 8
		vpush long
	push, ulong
	;; push single long unsigned integer to value buffer/stack
		vneed 8
		vpush ulong
	push, short
	;; push single short integer to value buffer/stack
		vneed 2
		vpush short
	push, ushort
	;; push single short unsigned integer to value buffer/stack
		vneed 2
		vpush ushort

	push, float
	;; push single/float number to value buffer/stack
		vneed 4
		vpush float
	push, double
	;; push double (fp) number to value buffer/stack
		vneed 8
		vpush double

//--------------------------------------------------------------------------------------------------
//	internal helpers
internal:

	vpush, byte
		vals[valsAt++] = byte
	vpush, int
		vals[valsAt++] = byte! int
		vals[valsAt++] = byte! int >> 8
		vals[valsAt++] = byte! int >> 16
		vals[valsAt++] = byte! int >> 24
	vpush, string
		valsAt += encoding.UTF8.getBytes string, 0, string.length, vals, valsAt
	vpush, bytes byte[]
		array.copy bytes, 0, vals, valsAt, bytes.length
		valsAt += bytes.length

	vpush, uint
		vals[valsAt++] = byte! uint
		vals[valsAt++] = byte! uint >> 8
		vals[valsAt++] = byte! uint >> 16
		vals[valsAt++] = byte! uint >> 24
	vpush, ulong
		vpush uint! ulong
		vpush uint! ulong >> 32
	vpush, long
		vpush ulong! long

	vpush, short
		vals[valsAt++] = byte! short
		vals[valsAt++] = byte! short >> 8
	vpush, ushort
		vals[valsAt++] = byte! ushort
		vals[valsAt++] = byte! ushort >> 8

	vpush, float
		vpush bits.get float
	vpush, double
		vpush bits.get double

//--------------------------------------------------------------------------------------------------
//	debug view
private:

	_debuggerDisplay_vals string get
		if valsAt == 0
			return string.empty
		var sb = new stringBuilder
		var i = valsAt
		for var j = 0; i > 0 && j < 33; j++
			sb.appendFormat "{0:X2}", vals[--i]
		if i > 0
			sb.append "..."
		return sb.toString()
