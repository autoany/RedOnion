use bee.run, sys: text, lang, cols.gen, diag
pkg bee

@@ C# source generator from pseudo-code (do not use with compressed code!)
def csGenerator bsGenerator partial

	def alias enum @flags
		none		= 0	// no name change
		aliasOnly	= 1 // change aliases only
		firstUpper	= 2	// make first letter uppercase, always, even for variables, arguments and fields
		exceptLocal	= 3 // make first letter uppercase, except for local variables and arguments
		exceptVars	= 4 // make first letter uppercase, except for fields, arguments and variables

	aliasing alias get set =
		alias.exceptLocal

	defClassAccess tflag get set =
		tflag.public
	defMethodAccess tflag get set =
		tflag.public
	defPropertyAccess tflag get set =
		tflag.public

	@@ add local variable
	addLocal bool, string
		if local == null; local = new hashSet.[string]
		else if localStack != null && localStack.count > 0 && local == localStack.peek()
			local = new hashSet.[string] local
		return local.add string
	@@ check if local variable of specified name exists
	hasLocal bool, string
		return local != null && local.contains string
	@@ save current set of local variables and create new set with same content
	pushLocal
		if localStack == null; localStack = new stack.[hashSet.[string]]
		localStack.push local
	@@ load previous (saved/pushed) set of local variables
	popLocal
		local = localStack.pop()

	@@ check if bultin of specified name exists
	hasBuiltin bool, string
		return builtins != null && builtins.contains string

	@@ check if builtin or local variable of specified name exists
	localOrBuiltin bool, string
		return hasBuiltin(string) || hasLocal string

	copyBuiltins hashSet.[string]
		return new hashSet.[string] builtins
	copyCsBuiltins hashSet.[string] static
		return new hashSet.[string] csBuiltins

	builtins iCollection.[string] get.protected set = csBuiltins
	;; bultin literals and types
	aliases iDictionary.[string,string] get.protected set = stdAliases
	;; aliases (fully qualified)

//--------------------------------------------------------------------------------------------------

	reset this override
		space = null
		wasBlock = false
		sb2.length = 0
		name.length = 0
		base.reset()

	@@ generate source
	eval this, code byte[], at int, size int override
		reset()
		if size == 0; return
		var end = at + size
		for
			wasBlock = false
			process code, ref at
			if wasBlock; wasBlock = false
			else write ';'
			if at >= end
				break
			line()
		if space != null
			indent--
			line()
			write "}"

protected:

	var name protected = new stringBuilder
	;; used for name manipulation (first upper, aliases)

	var sb2 protected = new stringBuilder
	swap
		var sb1 = sb
		sb  = sb2
		sb2 = sb1
	paste
		sb.append sb2
		sb2.length = 0

	var local hashSet.[string]
	var localStack stack.[hashSet.[string]]

	@@ bultin literals and types
	var csBuiltins static = new hashSet.[string] new string[]
		"null", "false", "true" //NOTE: would need to separate these to convert e.g. ($null! 0)
		"string", "char", "bool"
		"byte",	"ushort", "uint", "ulong"
		"sbyte", "short", "int", "long"
		"float", "double", "decimal"

	@@ standard aliases
	var stdAliases static = new dictionary.[string,string]
	.ctor static
		stdAliases["sys"] = "System";
		stdAliases["System.cols"] = "System.Collections";
		stdAliases["System.Collections.gen"] = "System.Collections.Generic";
		stdAliases["System.Collections.spec"] = "System.Collections.Specialized";
		stdAliases["System.io"] = "System.IO";
		stdAliases["System.IO.zip"] = "System.IO.Compression";
		stdAliases["System.lang"] = "System.Globalization";
		stdAliases["System.model"] = "System.ComponentModel";
		stdAliases["System.cmodel"] = "System.ComponentModel";
		stdAliases["System.run"] = "System.Runtime";
		stdAliases["System.Runtime.i"] = "System.Runtime.InteropServices";
		stdAliases["System.Runtime.is"] = "System.Runtime.InteropServices";
		stdAliases["System.Runtime.inter"] = "System.Runtime.InteropServices";
		stdAliases["System.Runtime.interop"] = "System.Runtime.InteropServices";
		stdAliases["System.interop"] = "System.Runtime.InteropServices";
		stdAliases["System.ref"] = "System.Reflection";
		stdAliases["System.refl"] = "System.Reflection";
		stdAliases["System.reflect"] = "System.Reflection";
		stdAliases["System.diag"] = "System.Diagnostics";
		stdAliases["System.debug"] = "System.Diagnostics";
		stdAliases["System.winforms"] = "System.Windows.Forms";
		stdAliases["System.wf"] = "System.Windows.Forms";
		stdAliases["System.win"] = "System.Windows";
		stdAliases["System.wins"] = "System.Windows";

		stdAliases["ms"] = "Microsoft";
		stdAliases["Microsoft.cs"] = "Microsoft.CSharp";
		stdAliases["Microsoft.vs"] = "Microsoft.VisualStudio";
		stdAliases["Microsoft.VisualStudio.test"] = "Microsoft.VisualStudio.TestTools.UnitTesting";
		stdAliases["Microsoft.VisualStudio.utest"] = "Microsoft.VisualStudio.TestTools.UnitTesting";

	@@ change name for C# (remove leading '$' or replace aliases and make first uppercase ...if set in @aliasing)
	unalias string, afterDot = false, type = false
		var s = name.toString()
		name.length = 0
		return unalias s, afterDot, type
	@@ change name for C# (remove leading '$' or replace aliases and make first uppercase ...if set in @aliasing)
	unalias string, s string, afterDot = false, type = false
		debug.assert name.length == 0
		if aliasing == alias.none
			if s[0] == '$'; s = s.substring 1
			if !type && hasBuiltin s; s = '@' + s
			return s
		for var pos = 0; pos < s.length
			var dot = s.indexOf '.', pos
			if dot < 0; dot = s.length
			if name.length > 0
				name.append '.'
			if s[pos] == '$'
				var part = s.substring pos+1, dot-pos-1
				if !type && hasBuiltin part
					name.append '@'
				name.append part
			else
				var fst = name.length
				var part = s.substring pos, dot-pos
				name.append part
				var other string
				if !afterDot && aliases != null && aliases.tryGetValue name.toString(), out other
					name.length = 0
					name.append other
				else if aliasing >= alias.firstUpper &&
				  (aliasing == alias.firstUpper || fst > 0 || afterDot || !hasLocal name.toString())
					name[fst] = char.toUpper name[fst]
				else if fst == 0 && !type && hasBuiltin part
					name.insert 0, '@'
			pos = dot + 1
		s = name.toString()
		name.length = 0
		return s