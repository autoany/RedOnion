use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def csGenerator partial
protected:

	typeref, code byte[], at ref int override
		var op = (opcode! code[at++]).extend()
		switch op
		default
			if op.kind() <= opkind.number
				debug.assert op == opcode.string || op == opcode.char ||
				  op.kind() == opkind.number
				write op.text()
				return
			raise notImplementedException()
		case opcode.undef
			return
		case opcode.null
			write "object"
			return
		case opcode.ident
			var s = cident code, ref at
			if aliasing == alias.none
				if s[0] == '$'; s = s.substring 1
				write s
				return
			if inside == opcode.dot
				name.append s
				return
			write unalias s, false, true
			return
		case opcode.dot
			debug.assert name.length == 0
			typeref code, ref at
			s = cident code, ref at
			if name.length == 0
				write '.'
				write unalias s, true, true
				return
			name.append '.'
			name.append s
			if inside != opcode.dot
				write unalias false, true
			return
		case opcode.array
			var n = code[at++]
			typeref code, ref at
			if n == 1
				write "[]"
				return
			write '['
			while --n > 0
				expression code, ref at
			write ']'
			return
		case opcode.generic
			n = code[at++]
			typeref code, ref at
			if n == 1
				write "<>"
				return
			write '<'
			while --n > 0
				typeref code, ref at
			write '>'
			return

//----------------------------------------------------------------------------------------------

	var space string = null

	other, op opcode, code byte[], at ref int override

		switch op
		default
			raise notImplementedException()

		case opcode.import
			write "using "
			write unalias cident(code, ref at), false, true
			return

		case opcode.space
			if space != null
				indent--
				line()
				write "}"
			if code[at] == 0
				at++
				space = null
				return
			write "namespace "
			write space = unalias cident(code, ref at), false, true
			line()
			write "{"
			indent++
			line()
			return

		case opcode.class
		case opcode.struct
		case opcode.enum
		case opcode.face
			var size = cint code, ref at
			var body = at + size
			var tflags = tflag! cushort code, ref at
			var gtnum = code[at++]
			var bcnum = code[at++]
			var access = tflags.accessText() ?? defClassAccess.accessText()
			if access != null; write access; write ' '
			var scope  = tflags.scopeText()
			if scope  != null; write scope; write ' '
			if tflags & tflag.hide    != 0; write "new "
			if tflags & tflag.unsafe  != 0; write "unsafe "
			if tflags & tflag.partial != 0; write "partial "
			write op.text()
			write ' '
			write unalias cident(code, ref at), false, true
			if gtnum != 0
			//	TODO: generic parameters
				raise notImplementedException()
			if bcnum != 0
				var first = true
				do
					write first ? ": " : ", "
					first = false
					typeref code, ref at
				while --bcnum > 0
			debug.assert at == body
			at = body
			block code, ref at
			return 

		case opcode.field
		case opcode.event
			size = cint code, ref at
			tflags = tflag! cushort code, ref at
			access = tflags.accessText()
			if access != null; write access; write ' '
			scope  = tflags.scopeText()
			if scope  != null; write scope; write ' '
			if op == opcode.event; write "event "
			var s = unalias cident code, ref at
			if code[at] == 0
				at++
				write s
			else
				typeref code, ref at
			write ' '
			write s
			if code[at] == 0; at++
			else
				write " = "
				expression code, ref at
			return

		case opcode.func
			pushLocal()
			size = cint code, ref at
			body = at + size
			tflags = tflag! cushort code, ref at
			access = tflags.accessText() ?? defMethodAccess.accessText()
			if access != null; write access; write ' '
			scope = tflags.scopeText()
			if scope  != null; write scope; write ' '
			if tflags & tflag.hide    != 0; write "new "
			if tflags & tflag.unsafe  != 0; write "unsafe "
			debug.assert code[at] == 0 //TODO: generics
			at++
			var argc = code[at++]
			s = unalias cident code, ref at
			size = cint code, ref at
			var args = at+size
			if size == 0 || code[at] == 0
				write "void"
			else
				typeref code, ref at
			write ' '
			write s
			write '('
			debug.assert at == args || size == 1 && code[at] == 0
			at = args
			for var i = 0; i < argc; i++
				size = cint code, ref at
				var narg = at+size
				if i > 0; write ", "
				s = cident code, ref at
				addLocal s
				size = cint code, ref at
				var vat = at+size
				if size == 0 || code[at] == 0
					write unalias s
				else
					typeref code, ref at
				write ' '
				write s
				debug.assert at == vat || size == 1 && code[at] == 0
				at = vat
				size = cint code, ref at
				if size != 0 && code[at] != 0
					write " = "
					expression code, ref at
				debug.assert at == narg || size == 1 && code[at] == 0
				at = narg
			write ')'
			debug.assert at == body
			at = body
			block code, ref at
			popLocal()
			return

		case opcode.prop
			size = cint code, ref at
			body = at + size
			tflags = tflag! cushort code, ref at
			access = tflags.accessText() ?? defPropertyAccess.accessText()
			if access != null; write access; write ' '
			scope = tflags.scopeText()
			if scope  != null; write scope; write ' '
			if tflags & tflag.hide    != 0; write "new "
			if tflags & tflag.unsafe  != 0; write "unsafe "
			if code[at] != 0 //generic property
				raise notImplementedException()
			at++
			argc = code[at++]
			s = unalias cident code, ref at
			size = cint code, ref at
			args = at+size
			debug.assert size != 0 && code[at] != 0 //property without a type
			typeref code, ref at
			write ' '
			write s
			at = args
			if argc > 0; raise notImplementedException()
			debug.assert at == body
			at = body
			size = cint code, ref at
			var end = at + size
			line()
			write "{"
			indent++
			while at < end
				switch (opcode! (ushort! code[at++] << 8)) | opcode.prop
				default
					raise notImplementedException()
				case opcode.get
					line()
					write "get"
					size = cint code, ref at
					at += size
					block code, ref at
					continue
				case opcode.set
					line()
					write "set"
					pushLocal()
					addLocal "value" //TODO: special ident
					size = cint code, ref at
					at += size
					block code, ref at
					popLocal()
					continue
			indent--
			line()
			write "}"
			return