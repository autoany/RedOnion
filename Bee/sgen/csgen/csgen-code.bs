use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def csGenerator partial
protected:

	var wasBlock = false

	block this, code byte[], at ref int override
		var n = current.kind() >= opkind.model ? 0 : cint code, ref at
		var size = cint code, ref at
		if size == 0
			write " {}"
			wasBlock = true
			return
		if aliasing >= alias.exceptLocal; pushLocal()
		var end = at + size
		var elseif = false
		if n == 1 && current == opcode.else && code[at] == byte! opcode.if
			write ' '
			elseif = true
		else
			line()
			write "{"
			indent++
			line()
		for
			wasBlock = false
			process code, ref at
			if wasBlock; wasBlock = false
			else write ';'
			if at >= end
				break
			line()
		at = end
		if !elseif
			indent--
			line()
			write "}"
		else line()
		wasBlock = true
		if aliasing >= alias.exceptLocal; popLocal()

	statement, op opcode, code byte[], at ref int override
		switch op
		default
			base.statement op, code, ref at
			return

		case opcode.raise
			if code[at] == 0
				at++
				write "throw"
			write "throw "
			expression code, ref at
			return

		case opcode.for
			write "for ("
			if code[at] == 0; ++at
			else expression code, ref at
			if code[at] == 0; ++at; write ';'
			else write "; "; expression code, ref at
			at += 4
			if 0 == cint code, ref at; write ';'
			else write "; "; expression code, ref at
			write ')'
			block code, ref at
			return
		case opcode.foreach
			write "foreach ("
			if code[at] != (byte! opcode.var)
				write "var "
			expression code, ref at
			write " in "
			expression code, ref at
			write ')'
			block code, ref at
			return

		case opcode.while
		case opcode.until
			write op == opcode.while ? "while (" : "until ("
			expression code, ref at
			write ')'
			block code, ref at
			return
		case opcode.do
		case opcode.dountil
			write "do"
			block code, ref at
			line()
			write op == opcode.do ? "while (" : "until ("
			expression code, ref at
			write ')'
			wasBlock = false
			return

		case opcode.if
			write "if ("
			expression code, ref at
			write ')'
			block code, ref at
			if at >= code.length || code[at] != byte! opcode.else
				return
			current = opcode.else
			at++
			line()
			write "else"
			block code, ref at
			return