use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def csGenerator partial

	expression this, code byte[], at ref int override
		var xpar = current == opcode.typeof || current == opcode.nameof
		if xpar; write '('
		base.expression code, ref at
		if xpar; write ')'

protected:

	parens bool override get
		var inside	= .inside
		if (byte! inside) >= 0x80; return false
		var op		= .current
		if op == opcode.call || op == opcode.call2 || op == opcode.mcall
			return true
		if inside.cprior() <= opcode.assign.cprior()
			return inside == opcode.cast ||
			  inside.kind() == opkind.special && (
			  op.cprior() <= opcode.assign.cprior() ||
			  inside == opcode.dot)
		return op.cprior() < inside.cprior() ||
		  op == opcode.shiftLeft || op == opcode.shiftLeft ||
		  inside == opcode.shiftLeft || inside == opcode.shiftLeft ||
  		  inside == opcode.bitOr

	literal, op opcode, code byte[], at ref int override
		if op != opcode.ident
			base.literal op, code, ref at
			return
		var n = code[at++]
		var s = encoding.UTF8.getString code, at, n
		at += n
		if aliasing == alias.none
			if s[0] == '$'; s = s.substring 1
			if hasBuiltin s; write '@'
			write s
			return
		if inside == opcode.dot
			name.append s
			return
		write unalias s

	special, op opcode, code byte[], at ref int override
		var create = false
	next:
		switch op
		default
			base.special op, code, ref at
			return

		case opcode.create
			create = true
			write "new "
			op = (opcode! code[at]).extend()
			if op.kind() == opkind.special &&
			  (byte! op) < (byte! opcode.generic)
				at++
				goto next
			goto case opcode.ecall
		case opcode.ecall
			if create
				if code[at] == (byte! opcode.array)
					typeref code, ref at
					return // no ()
				typeref code, ref at
			else expression code, ref at
			write "()"
			return
		case opcode.call
			if create; typeref code, ref at
			else expression code, ref at
			write '('
			expression code, ref at
			write ')'
			return
		case opcode.call2
			if create; typeref code, ref at
			else expression code, ref at
			write '('
			expression code, ref at
			write ", "
			expression code, ref at
			write ')'
			return
		case opcode.mcall
			var mcn = int! code[at++] - 1
			if mcn < 2; raise invalidOperationException()
			if create; typeref code, ref at
			else expression code, ref at
			write '('
			expression code, ref at
			while --mcn > 0
				write ", "
				expression code, ref at
			write ')'
			return

		case opcode.dot
			debug.assert name.length == 0
			expression code, ref at
			var s = cident code, ref at
			if name.length == 0
				write '.'
				write unalias s, true
				return
			name.append '.'
			name.append s
			if inside != opcode.dot
				write unalias()
			return

		case opcode.var
			s = cident code, ref at
			if s[0] == '$'
				s = s.substring 1
			else if aliasing != alias.none
				if aliasing == alias.firstUpper
					s = (char.toUpper s[0]) + s.substring 1
				else addLocal s
			if code[at] == 0
				at++
				write "var "
				write s
			else
				typeref code, ref at
				write ' '
				write s
			if code [at] == 0; at++
			else
				write " = "
				expression code, ref at
			return

	binary, op opcode, code byte[], at ref int override
		switch op
		default
			base.binary op, code, ref at
			return
		case opcode.cast
			var paren = parens
			if paren; write '('
			write '('
			typeref code, ref at
			write ')'
			expression code, ref at
			if paren; write ')'
			return
		case opcode.ascast
			paren = parens
			if paren; write '('
			swap()
			expression code, ref at
			swap()
			write '('
			typeref code, ref at
			write ')'
			paste()
			if paren; write ')'
			return
