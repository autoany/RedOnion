use bee.run, sys: text, lang, cols.gen, diag
pkg bee

def bsGenerator partial
protected:

	typeref, code byte[], at ref int virtual
		var op = (opcode! code[at++]).extend()
		switch op
		default
			if op.kind() <= opkind.number
				debug.assert op == opcode.string || op == opcode.char ||
				  op.kind() == opkind.number
				write op.text()
				return
			raise notImplementedException()
		case opcode.undef
			return
		case opcode.null
			write "object"
			return
		case opcode.ident
			write cident code, ref at
			return
		case opcode.dot
			typeref code, ref at
			write '.'
			write cident code, ref at
			return
		case opcode.array
			var n = code[at++]
			typeref code, ref at
			if n == 1
				write "[]"
				return
			write '['
			while --n > 0
				expression code, ref at
			write ']'
			return
		case opcode.generic
			n = code[at++]
			typeref code, ref at
			if n == 1
				write ".[]"
				return
			write ".["
			while --n > 0
				typeref code, ref at
			write ']'
			return

//----------------------------------------------------------------------------------------------

	other, op opcode, code byte[], at ref int override

		switch op
		default
			raise notImplementedException()

		case opcode.import
			write "use "
			write cident code, ref at
			return

		case opcode.space
			if code[at] == 0
				write "pkg"
				return
			write "pkg "
			write cident code, ref at
			return

		case opcode.class
		case opcode.struct
		case opcode.enum
		case opcode.face
			var size = cint code, ref at
			var body = at + size
			var tflags = tflag! cushort code, ref at
			var gtnum = code[at++]
			var bcnum = code[at++]
			write "def "
			write cident code, ref at
			if gtnum != 0
			//	TODO: generic parameters
				raise notImplementedException()
			if op != opcode.class
				write ' '
				write op.text()
			if bcnum > 0; do
				write ' '
				typeref code, ref at
			while --bcnum > 0
			var access = tflags.accessText()
			if access != null; write ' '; write access
			var scope  = tflags.scopeText()
			if scope  != null; write ' '; write scope
			if tflags & tflag.partial != 0; write " partial"
			if tflags & tflag.unsafe  != 0; write " unsafe"
			if tflags & tflag.hide    != 0; write " new"
			debug.assert at == body
			at = body
			block code, ref at
			return

		case opcode.field
		case opcode.event
			size = cint code, ref at
			tflags = tflag! cushort code, ref at
			write op == opcode.event ? "event " :
				tflags.scope() == tflag.const ? "const " : "var "
			write cident code, ref at
			if code[at] == 0; at++
			else
				write ' '
				typeref code, ref at
			access = tflags.accessText()
			if access != null; write ' '; write access
			if tflags.scope() != tflag.const
				scope = tflags.scopeText()
				if scope != null; write ' '; write scope
			if code[at] == 0; at++
			else
				write " = "
				expression code, ref at
			return

		case opcode.func
			size = cint code, ref at
			body = at + size
			tflags = tflag! cushort code, ref at
			debug.assert code[at] == 0 //TODO: generics
			at++
			var argc = code[at++]
			write cident code, ref at
			size = cint code, ref at
			var args = at+size
			if size != 0 && code[at] != 0
				write ' '
				typeref code, ref at
			debug.assert at == args || size == 1 && code[at] == 0
			at = args
			while argc > 0
				size = cint code, ref at
				var narg = at+size
				write ", "
				write cident code, ref at
				size = cint code, ref at
				var vat = at+size
				if size != 0 && code[at] != 0
					write ' '
					typeref code, ref at
				debug.assert at == vat || size == 1 && code[at] == 0
				at = vat
				size = cint code, ref at
				if size != 0 && code[at] != 0
					write " = "
					expression code, ref at
				debug.assert at == narg || size == 1 && code[at] == 0
				at = narg
				argc--
			access = tflags.accessText()
			if access != null; write ' '; write access
			scope = tflags.scopeText()
			if scope != null; write ' '; write scope
			if tflags & tflag.hide    != 0; write "new "
			if tflags & tflag.unsafe  != 0; write "unsafe "
			debug.assert at == body
			at = body
			block code, ref at
			return

		case opcode.prop
			size = cint code, ref at
			body = at + size
			tflags = tflag! cushort code, ref at
			if code[at] != 0 //generic property
				raise notImplementedException()
			at++
			argc = code[at++]
			write cident code, ref at
			size = cint code, ref at
			args = at+size
			debug.assert size != 0 && code[at] != 0 //property without a type
			write ' '
			typeref code, ref at
			at = args
			if argc > 0; raise notImplementedException()
			access = tflags.accessText()
			if access != null; write ' '; write access
			scope = tflags.scopeText()
			if scope != null; write ' '; write scope
			if tflags & tflag.hide    != 0; write "new "
			if tflags & tflag.unsafe  != 0; write "unsafe "
			debug.assert at == body
			at = body
			size = cint code, ref at
			var end = at + size
			indent++
			while at < end
				switch (opcode! (ushort! code[at++] << 8)) | opcode.prop
				default
					raise notImplementedException()
				case opcode.get
					line()
					write "get"
					break
				case opcode.set
					line()
					write "set"
					break
				size = cint code, ref at
				at += size
				block code, ref at
			indent--
			return

