using System;
using System.Collections.Generic;
using System.Reflection;
using utility;

namespace kerbalua.src.completion {
    public class UserDataCompletion {

        internal static List<string> Complete(Type t, List<CompletionParser.VarSuffixNode> suffixes)
        {
            var completions = new List<string>();

            // The very last part of "suffixes" is assumed
            // to be an incomplete name so we want the type immediately 
            // prior to it

            List<Node> nodes = CreateNodes(suffixes);
            t = GetSecondToLastType(t, nodes);
            var allMembers = ListAllMembers(t);
            var lastNode=nodes[nodes.Count - 1] as FieldOrProperty;
            var stringToComplete = lastNode?.name;
            if(stringToComplete==null){
                stringToComplete = "";
            }

            foreach(var member in allMembers){
                if(member.StartsWith(stringToComplete)){
                    completions.Add(member);
                }
            }

            completions.Sort();
            return completions;
        }

        static public HashSet<string> ListAllMembers(Type t)
        {
            var strs = new HashSet<string>();
            foreach (var member in t.GetMembers()) {
                if (member.Name.Contains("_")) {
                    strs.Add(member.Name.Split('_')[1]);
                } else {
                    strs.Add(member.Name);
                }
            }
            return strs;
        }

        static Type GetSecondToLastType(Type t, List<Node> nodes)
        {
            for (int i = 0; i < nodes.Count - 1; i++) {
                t = nodes[i].GetReturnType(t);
                //Console.WriteLine("type is " + t);
            }
            return t;
        }

        static List<Node> CreateNodes(List<CompletionParser.VarSuffixNode> suffixes){
            var nodes = new List<Node>();
            var parts = EnumerateParts(suffixes);
            object currentPart;
            CompletionParser.VarSuffixNode previousSuffixWithName=null;
            while (parts.MoveNext()) {
                currentPart = parts.Current;
                if (currentPart.GetType() == typeof(CompletionParser.Funcall)) {
                    int nArgs = ((CompletionParser.Funcall)currentPart).NArgs;

                    // Call previous Node's return result if no name (NamelessCall)
                    if (previousSuffixWithName == null) {
                        nodes.Add(new NamelessCall(nArgs));
                    } else {
                        nodes.Add(new MethodCall(previousSuffixWithName.Name.ToString(), nArgs));
                        previousSuffixWithName = null;
                    }
                } else {
                    if(previousSuffixWithName!=null){
                        nodes.Add(new FieldOrProperty(previousSuffixWithName.Name.ToString(), 0));
                        previousSuffixWithName = null;
                    }

                    var currentSuffix = (CompletionParser.VarSuffixNode)currentPart;
                    if(currentSuffix.Name==null){
                        nodes.Add(new ArrayAccess(currentSuffix.NArgs));
                    } else{
                        previousSuffixWithName = currentSuffix;
                    }
                }
            }
            if(previousSuffixWithName!=null){
                nodes.Add(new FieldOrProperty(previousSuffixWithName.Name.ToString(), 0));
            }

            return nodes;
        }

        // Flattens the suffixes and puts their included function calls first
        // This makes it easier to process the parts in a loop
        static IEnumerator<object> EnumerateParts(List<CompletionParser.VarSuffixNode> suffixes)
        {
            foreach(var suffix in suffixes){
                foreach(var funcall in suffix.funcalls){
                    yield return funcall;
                }
                yield return suffix;
            }
            yield break;
        }



        class MethodCall : Node {
            string name;
            public MethodCall(string name,int argNum) : base(argNum)
            {
                this.name = name;
            }

            public override Type GetReturnType(Type t)
            {
                // TODO: Doesn't yet handle calls to fields containing delegates
                MethodInfo mi=t.GetMethod(name);
                if(mi!=null){
                    return mi.ReturnType;
                }

                var fieldOrPropertyNode = new FieldOrProperty(name, 0);
                var delegateT = fieldOrPropertyNode.GetReturnType(t);
                return delegateT.GetMethod("Invoke").ReturnType;
            }

            public override string ToString()
            {
                return "." + name + "("+argNum+")";
            }
        }
        class FieldOrProperty : Node {
            public string name;
            public FieldOrProperty(string name,int argNum) : base(argNum)
            {
                this.name = name;
            }

            public override Type GetReturnType(Type t)
            {
                var p = t.GetProperty(name);
                if(p!=null){
                    return p.PropertyType;
                }
                var f = t.GetField(name);
                return f.FieldType;
            }

            public override string ToString()
            {
                return "." + name;
            }
        }
        class ArrayAccess : Node {
            public ArrayAccess(int argNum) : base(argNum)
            {
            }

            public override Type GetReturnType(Type t)
            {
                return t.GetProperty("Item").PropertyType;
            }

            public override string ToString()
            {
                return "[" + argNum + "]";
            }
        }
        class NamelessCall : Node {
            public NamelessCall(int argNum) : base(argNum)
            {
            }

            public override Type GetReturnType(Type t)
            {
                return t.GetMethod("Invoke").ReturnType;
            }

            public override string ToString()
            {
                return "(" + argNum + ")";
            }
        }
        abstract class Node{
            protected int argNum;
            protected Node(int argNum){
                this.argNum = argNum;
            }

            abstract public Type GetReturnType(Type t);

            abstract public override string ToString();
        }
    }
}
