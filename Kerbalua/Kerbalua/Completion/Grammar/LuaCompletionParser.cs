//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LuaCompletion.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class LuaCompletionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, NAME=56, NORMALSTRING=57, CHARSTRING=58, 
		LONGSTRING=59, INT=60, HEX=61, FLOAT=62, HEX_FLOAT=63, COMMENT=64, LINE_COMMENT=65, 
		WS=66, SHEBANG=67;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_prefixexp = 10, RULE_functioncall = 11, RULE_varOrExp = 12, 
		RULE_var = 13, RULE_varSuffix = 14, RULE_terminalVar = 15, RULE_terminalVarSuffix = 16, 
		RULE_nameAndArgs = 17, RULE_newExp = 18, RULE_arrayAccessExp = 19, RULE_args = 20, 
		RULE_functiondef = 21, RULE_funcbody = 22, RULE_parlist = 23, RULE_tableconstructor = 24, 
		RULE_fieldlist = 25, RULE_field = 26, RULE_terminalField = 27, RULE_fieldsep = 28, 
		RULE_operatorOr = 29, RULE_operatorAnd = 30, RULE_operatorComparison = 31, 
		RULE_operatorStrcat = 32, RULE_operatorAddSub = 33, RULE_operatorMulDivMod = 34, 
		RULE_operatorBitwise = 35, RULE_operatorUnary = 36, RULE_operatorPower = 37, 
		RULE_number = 38, RULE_string = 39;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "prefixexp", "functioncall", "varOrExp", "var", "varSuffix", 
		"terminalVar", "terminalVarSuffix", "nameAndArgs", "newExp", "arrayAccessExp", 
		"args", "functiondef", "funcbody", "parlist", "tableconstructor", "fieldlist", 
		"field", "terminalField", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'do'", "'end'", "'while'", "'repeat'", 
		"'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'", 
		"'function'", "'local'", "'return'", "'::'", "'.'", "':'", "'nil'", "'false'", 
		"'true'", "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", 
		"'<'", "'>'", "'<='", "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'//'", "'&'", "'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", 
		"LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LuaCompletion.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LuaCompletionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuaCompletionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuaCompletionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__26) | (1L << NAME))) != 0)) {
				{
				{
				State = 82; stat();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 88; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; varlist();
				State = 93; Match(T__1);
				State = 94; explist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97; label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 98; Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 99; Match(T__3);
				State = 100; Match(NAME);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 101; Match(T__4);
				State = 102; block();
				State = 103; Match(T__5);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 105; Match(T__6);
				State = 106; exp(0);
				State = 107; Match(T__4);
				State = 108; block();
				State = 109; Match(T__5);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 111; Match(T__7);
				State = 112; block();
				State = 113; Match(T__8);
				State = 114; exp(0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 116; Match(T__9);
				State = 117; exp(0);
				State = 118; Match(T__10);
				State = 119; block();
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 120; Match(T__11);
					State = 121; exp(0);
					State = 122; Match(T__10);
					State = 123; block();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12) {
					{
					State = 130; Match(T__12);
					State = 131; block();
					}
				}

				State = 134; Match(T__5);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 136; Match(T__13);
				State = 137; Match(NAME);
				State = 138; Match(T__1);
				State = 139; exp(0);
				State = 140; Match(T__14);
				State = 141; exp(0);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__14) {
					{
					State = 142; Match(T__14);
					State = 143; exp(0);
					}
				}

				State = 146; Match(T__4);
				State = 147; block();
				State = 148; Match(T__5);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 150; Match(T__13);
				State = 151; namelist();
				State = 152; Match(T__15);
				State = 153; explist();
				State = 154; Match(T__4);
				State = 155; block();
				State = 156; Match(T__5);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 158; Match(T__16);
				State = 159; funcname();
				State = 160; funcbody();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 162; Match(T__17);
				State = 163; Match(T__16);
				State = 164; Match(NAME);
				State = 165; funcbody();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 166; Match(T__17);
				State = 167; namelist();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 168; Match(T__1);
					State = 169; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__18);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 175; explist();
				}
			}

			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 178; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(T__19);
			State = 182; Match(NAME);
			State = 183; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaCompletionParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaCompletionParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(NAME);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 186; Match(T__20);
				State = 187; Match(NAME);
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 193; Match(T__21);
				State = 194; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; var();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 198; Match(T__14);
				State = 199; var();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaCompletionParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaCompletionParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 14, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(NAME);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 206; Match(T__14);
					State = 207; Match(NAME);
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 16, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; exp(0);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 214; Match(T__14);
					State = 215; exp(0);
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				{
				State = 222; Match(T__22);
				}
				break;
			case T__23:
				{
				State = 223; Match(T__23);
				}
				break;
			case T__24:
				{
				State = 224; Match(T__24);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 225; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 226; @string();
				}
				break;
			case T__25:
				{
				State = 227; Match(T__25);
				}
				break;
			case T__16:
				{
				State = 228; functiondef();
				}
				break;
			case T__26:
			case NAME:
				{
				State = 229; prefixexp();
				}
				break;
			case T__30:
				{
				State = 230; tableconstructor();
				}
				break;
			case T__42:
			case T__49:
			case T__52:
			case T__53:
				{
				State = 231; operatorUnary();
				State = 232; exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 268;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 236;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 237; operatorPower();
						State = 238; exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 240;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 241; operatorMulDivMod();
						State = 242; exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 244;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 245; operatorAddSub();
						State = 246; exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 248;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 249; operatorStrcat();
						State = 250; exp(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 252;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 253; operatorComparison();
						State = 254; exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 256;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 257; operatorAnd();
						State = 258; exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 260;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 261; operatorOr();
						State = 262; exp(3);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 264;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 265; operatorBitwise();
						State = 266; exp(2);
						}
						break;
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 20, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; varOrExp();
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274; nameAndArgs();
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 22, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; varOrExp();
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 281; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_varOrExp);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; newExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public TerminalVarContext terminalVar() {
			return GetRuleContext<TerminalVarContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 26, RULE_var);
		try {
			int _alt;
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 290; Match(NAME);
					}
					break;
				case T__26:
					{
					State = 291; newExp();
					State = 292; varSuffix();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 296; varSuffix();
						}
						} 
					}
					State = 301;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; terminalVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ArrayAccessExpContext arrayAccessExp() {
			return GetRuleContext<ArrayAccessExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 28, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 305; nameAndArgs();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				{
				State = 311; arrayAccessExp();
				}
				break;
			case T__20:
				{
				State = 312; Match(T__20);
				State = 313; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalVarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public TerminalVarSuffixContext terminalVarSuffix() {
			return GetRuleContext<TerminalVarSuffixContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public TerminalVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterTerminalVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitTerminalVar(this);
		}
	}

	[RuleVersion(0)]
	public TerminalVarContext terminalVar() {
		TerminalVarContext _localctx = new TerminalVarContext(Context, State);
		EnterRule(_localctx, 30, RULE_terminalVar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(NAME);
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 317; varSuffix();
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 323; terminalVarSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalVarSuffixContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LuaCompletionParser.Eof, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public TerminalVarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalVarSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterTerminalVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitTerminalVarSuffix(this);
		}
	}

	[RuleVersion(0)]
	public TerminalVarSuffixContext terminalVarSuffix() {
		TerminalVarSuffixContext _localctx = new TerminalVarSuffixContext(Context, State);
		EnterRule(_localctx, 32, RULE_terminalVarSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 325; nameAndArgs();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331; Match(T__20);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 332; Match(NAME);
				}
			}

			State = 335; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 337; Match(T__21);
				State = 338; Match(NAME);
				}
			}

			State = 341; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public TerminalVarContext terminalVar() {
			return GetRuleContext<TerminalVarContext>(0);
		}
		public NewExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterNewExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitNewExp(this);
		}
	}

	[RuleVersion(0)]
	public NewExpContext newExp() {
		NewExpContext _localctx = new NewExpContext(Context, State);
		EnterRule(_localctx, 36, RULE_newExp);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; Match(T__26);
				State = 344; exp(0);
				State = 345; Match(T__27);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; Match(T__26);
				State = 348; terminalVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public TerminalVarContext terminalVar() {
			return GetRuleContext<TerminalVarContext>(0);
		}
		public ArrayAccessExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterArrayAccessExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitArrayAccessExp(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpContext arrayAccessExp() {
		ArrayAccessExpContext _localctx = new ArrayAccessExpContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayAccessExp);
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351; Match(T__28);
				State = 352; exp(0);
				State = 353; Match(T__29);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(T__28);
				State = 356; terminalVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TerminalVarContext terminalVar() {
			return GetRuleContext<TerminalVarContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 40, RULE_args);
		int _la;
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; Match(T__26);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 360; explist();
					}
				}

				State = 363; Match(T__27);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364; tableconstructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; @string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366; Match(T__26);
				State = 370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 367; explist();
					State = 368; Match(T__14);
					}
					break;
				}
				State = 372; terminalVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 42, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(T__16);
			State = 376; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__26);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25 || _la==NAME) {
				{
				State = 379; parlist();
				}
			}

			State = 382; Match(T__27);
			State = 383; block();
			State = 384; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_parlist);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; namelist();
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__14) {
					{
					State = 387; Match(T__14);
					State = 388; Match(T__25);
					}
				}

				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TerminalFieldContext terminalField() {
			return GetRuleContext<TerminalFieldContext>(0);
		}
		public FieldsepContext fieldsep() {
			return GetRuleContext<FieldsepContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 48, RULE_tableconstructor);
		int _la;
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; Match(T__30);
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 395; fieldlist();
					}
				}

				State = 398; Match(T__31);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; Match(T__30);
				State = 403;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 400; fieldlist();
					State = 401; fieldsep();
					}
					break;
				}
				State = 405; terminalField();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; field();
			State = 414;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 409; fieldsep();
					State = 410; field();
					}
					} 
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 417; fieldsep();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_field);
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420; Match(T__28);
				State = 421; exp(0);
				State = 422; Match(T__29);
				State = 423; Match(T__1);
				State = 424; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; Match(NAME);
				State = 427; Match(T__1);
				State = 428; exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 429; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalFieldContext : ParserRuleContext {
		public TerminalVarContext terminalVar() {
			return GetRuleContext<TerminalVarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaCompletionParser.NAME, 0); }
		public TerminalFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterTerminalField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitTerminalField(this);
		}
	}

	[RuleVersion(0)]
	public TerminalFieldContext terminalField() {
		TerminalFieldContext _localctx = new TerminalFieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_terminalField);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; Match(T__28);
				State = 433; terminalVar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434; Match(T__28);
				State = 435; exp(0);
				State = 436; Match(T__29);
				State = 437; Match(T__1);
				State = 438; terminalVar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440; Match(NAME);
				State = 441; Match(T__1);
				State = 442; terminalVar();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443; terminalVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 56, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 66, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = TokenStream.LA(1);
			if ( !(_la==T__41 || _la==T__42) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 68, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 70, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 72, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 74, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(T__54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaCompletionParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaCompletionParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaCompletionParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaCompletionParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 76, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaCompletionParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaCompletionParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaCompletionParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaCompletionListener typedListener = listener as ILuaCompletionListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 78, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45', '\x1D9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 'V', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', 'Y', '\v', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\\', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x80', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x83', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x87', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x93', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xAD', '\n', '\x4', '\x5', 
		'\x4', '\xAF', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xB3', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\xB6', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xBF', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xC2', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xC6', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xCB', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xCE', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\xD3', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\xD6', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xDB', '\n', '\n', '\f', '\n', '\xE', '\n', '\xDE', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xED', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x10F', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x112', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x116', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x119', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\x11D', '\n', 
		'\r', '\r', '\r', '\xE', '\r', '\x11E', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x123', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x129', '\n', '\xF', '\x3', '\xF', '\a', 
		'\xF', '\x12C', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x12F', '\v', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x132', '\n', '\xF', '\x3', '\x10', 
		'\a', '\x10', '\x135', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x138', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x13D', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x141', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x144', '\v', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\a', '\x12', '\x149', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x14C', '\v', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x150', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x156', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x160', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x168', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x16C', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x175', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x178', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x17F', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x188', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x18B', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18F', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x196', '\n', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x199', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x19F', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x1A2', '\v', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1A5', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x1B1', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x1BF', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x2', 
		'\x3', '\x14', '*', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', '\x2', 
		'\n', '\x4', '\x2', '\x3', '\x3', '\x11', '\x11', '\x3', '\x2', '%', '*', 
		'\x3', '\x2', ',', '-', '\x3', '\x2', '.', '\x31', '\x3', '\x2', '\x32', 
		'\x36', '\x5', '\x2', '-', '-', '\x34', '\x34', '\x37', '\x38', '\x3', 
		'\x2', '>', '\x41', '\x3', '\x2', ';', '=', '\x2', '\x1FC', '\x2', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\b', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xB7', '\x3', '\x2', '\x2', '\x2', '\f', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x16', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x136', '\x3', '\x2', '\x2', '\x2', ' ', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x14A', '\x3', '\x2', '\x2', '\x2', '$', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x167', '\x3', '\x2', '\x2', '\x2', '*', '\x177', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x179', '\x3', '\x2', '\x2', '\x2', '.', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x198', '\x3', '\x2', '\x2', '\x2', '\x34', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1C2', '\x3', '\x2', '\x2', '\x2', '>', '\x1C4', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1CC', '\x3', '\x2', '\x2', '\x2', 'H', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x1D0', '\x3', '\x2', '\x2', '\x2', 'L', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1D6', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x4', '\x3', 
		'\x2', 'S', '\x3', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', '\x6', 
		'\x4', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\\', '\x5', '\b', '\x5', '\x2', '[', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x5', '\x3', 
		'\x2', '\x2', '\x2', ']', '\xAF', '\a', '\x3', '\x2', '\x2', '^', '_', 
		'\x5', '\xE', '\b', '\x2', '_', '`', '\a', '\x4', '\x2', '\x2', '`', '\x61', 
		'\x5', '\x12', '\n', '\x2', '\x61', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\xAF', '\x5', '\x18', '\r', '\x2', '\x63', '\xAF', '\x5', '\n', 
		'\x6', '\x2', '\x64', '\xAF', '\a', '\x5', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x6', '\x2', '\x2', '\x66', '\xAF', '\a', ':', '\x2', '\x2', 'g', 
		'h', '\a', '\a', '\x2', '\x2', 'h', 'i', '\x5', '\x4', '\x3', '\x2', 'i', 
		'j', '\a', '\b', '\x2', '\x2', 'j', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '\t', '\x2', '\x2', 'l', 'm', '\x5', '\x14', '\v', '\x2', 
		'm', 'n', '\a', '\a', '\x2', '\x2', 'n', 'o', '\x5', '\x4', '\x3', '\x2', 
		'o', 'p', '\a', '\b', '\x2', '\x2', 'p', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\n', '\x2', '\x2', 'r', 's', '\x5', '\x4', '\x3', 
		'\x2', 's', 't', '\a', '\v', '\x2', '\x2', 't', 'u', '\x5', '\x14', '\v', 
		'\x2', 'u', '\xAF', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\f', 
		'\x2', '\x2', 'w', 'x', '\x5', '\x14', '\v', '\x2', 'x', 'y', '\a', '\r', 
		'\x2', '\x2', 'y', '\x81', '\x5', '\x4', '\x3', '\x2', 'z', '{', '\a', 
		'\xE', '\x2', '\x2', '{', '|', '\x5', '\x14', '\v', '\x2', '|', '}', '\a', 
		'\r', '\x2', '\x2', '}', '~', '\x5', '\x4', '\x3', '\x2', '~', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\xF', '\x2', '\x2', '\x85', '\x87', '\x5', '\x4', '\x3', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\b', '\x2', '\x2', '\x89', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\x10', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		':', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x4', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x14', '\v', '\x2', '\x8E', '\x8F', '\a', '\x11', '\x2', 
		'\x2', '\x8F', '\x92', '\x5', '\x14', '\v', '\x2', '\x90', '\x91', '\a', 
		'\x11', '\x2', '\x2', '\x91', '\x93', '\x5', '\x14', '\v', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\a', '\x2', '\x2', '\x95', '\x96', '\x5', '\x4', '\x3', '\x2', '\x96', 
		'\x97', '\a', '\b', '\x2', '\x2', '\x97', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\a', '\x10', '\x2', '\x2', '\x99', '\x9A', '\x5', 
		'\x10', '\t', '\x2', '\x9A', '\x9B', '\a', '\x12', '\x2', '\x2', '\x9B', 
		'\x9C', '\x5', '\x12', '\n', '\x2', '\x9C', '\x9D', '\a', '\a', '\x2', 
		'\x2', '\x9D', '\x9E', '\x5', '\x4', '\x3', '\x2', '\x9E', '\x9F', '\a', 
		'\b', '\x2', '\x2', '\x9F', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x13', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\f', '\a', 
		'\x2', '\xA2', '\xA3', '\x5', '.', '\x18', '\x2', '\xA3', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x14', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x13', '\x2', '\x2', '\xA6', '\xA7', '\a', ':', '\x2', 
		'\x2', '\xA7', '\xAF', '\x5', '.', '\x18', '\x2', '\xA8', '\xA9', '\a', 
		'\x14', '\x2', '\x2', '\xA9', '\xAC', '\x5', '\x10', '\t', '\x2', '\xAA', 
		'\xAB', '\a', '\x4', '\x2', '\x2', '\xAB', '\xAD', '\x5', '\x12', '\n', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		']', '\x3', '\x2', '\x2', '\x2', '\xAE', '^', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x62', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x64', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', 'g', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'k', '\x3', '\x2', '\x2', '\x2', '\xAE', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', 'v', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x98', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAF', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB2', '\a', '\x15', '\x2', '\x2', '\xB1', '\xB3', 
		'\x5', '\x12', '\n', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB6', '\a', '\x3', '\x2', '\x2', '\xB5', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\t', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x16', 
		'\x2', '\x2', '\xB8', '\xB9', '\a', ':', '\x2', '\x2', '\xB9', '\xBA', 
		'\a', '\x16', '\x2', '\x2', '\xBA', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xC0', '\a', ':', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x17', 
		'\x2', '\x2', '\xBD', '\xBF', '\a', ':', '\x2', '\x2', '\xBE', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x18', '\x2', '\x2', 
		'\xC4', '\xC6', '\a', ':', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xCC', '\x5', '\x1C', '\xF', '\x2', 
		'\xC8', '\xC9', '\a', '\x11', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\x1C', 
		'\xF', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD4', 
		'\a', ':', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x11', '\x2', '\x2', '\xD1', 
		'\xD3', '\a', ':', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xDC', '\x5', '\x14', '\v', '\x2', '\xD8', '\xD9', '\a', 
		'\x11', '\x2', '\x2', '\xD9', '\xDB', '\x5', '\x14', '\v', '\x2', '\xDA', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\b', '\v', '\x1', 
		'\x2', '\xE0', '\xED', '\a', '\x19', '\x2', '\x2', '\xE1', '\xED', '\a', 
		'\x1A', '\x2', '\x2', '\xE2', '\xED', '\a', '\x1B', '\x2', '\x2', '\xE3', 
		'\xED', '\x5', 'N', '(', '\x2', '\xE4', '\xED', '\x5', 'P', ')', '\x2', 
		'\xE5', '\xED', '\a', '\x1C', '\x2', '\x2', '\xE6', '\xED', '\x5', ',', 
		'\x17', '\x2', '\xE7', '\xED', '\x5', '\x16', '\f', '\x2', '\xE8', '\xED', 
		'\x5', '\x32', '\x1A', '\x2', '\xE9', '\xEA', '\x5', 'J', '&', '\x2', 
		'\xEA', '\xEB', '\x5', '\x14', '\v', '\n', '\xEB', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\x110', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\f', '\v', '\x2', '\x2', '\xEF', '\xF0', '\x5', 'L', '\'', '\x2', '\xF0', 
		'\xF1', '\x5', '\x14', '\v', '\v', '\xF1', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\f', '\t', '\x2', '\x2', '\xF3', '\xF4', '\x5', 
		'\x46', '$', '\x2', '\xF4', '\xF5', '\x5', '\x14', '\v', '\n', '\xF5', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\f', '\b', '\x2', 
		'\x2', '\xF7', '\xF8', '\x5', '\x44', '#', '\x2', '\xF8', '\xF9', '\x5', 
		'\x14', '\v', '\t', '\xF9', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\f', '\a', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\x42', '\"', 
		'\x2', '\xFC', '\xFD', '\x5', '\x14', '\v', '\a', '\xFD', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\f', '\x6', '\x2', '\x2', '\xFF', 
		'\x100', '\x5', '@', '!', '\x2', '\x100', '\x101', '\x5', '\x14', '\v', 
		'\a', '\x101', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', 
		'\f', '\x5', '\x2', '\x2', '\x103', '\x104', '\x5', '>', ' ', '\x2', '\x104', 
		'\x105', '\x5', '\x14', '\v', '\x6', '\x105', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\f', '\x4', '\x2', '\x2', '\x107', '\x108', 
		'\x5', '<', '\x1F', '\x2', '\x108', '\x109', '\x5', '\x14', '\v', '\x5', 
		'\x109', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\f', 
		'\x3', '\x2', '\x2', '\x10B', '\x10C', '\x5', 'H', '%', '\x2', '\x10C', 
		'\x10D', '\x5', '\x14', '\v', '\x4', '\x10D', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x102', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x112', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x117', '\x5', '\x1A', '\xE', '\x2', '\x114', '\x116', 
		'\x5', '$', '\x13', '\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11C', '\x5', '\x1A', '\xE', '\x2', '\x11B', '\x11D', 
		'\x5', '$', '\x13', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x120', '\x123', '\x5', '\x1C', '\xF', 
		'\x2', '\x121', '\x123', '\x5', '&', '\x14', '\x2', '\x122', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x124', '\x129', '\a', ':', 
		'\x2', '\x2', '\x125', '\x126', '\x5', '&', '\x14', '\x2', '\x126', '\x127', 
		'\x5', '\x1E', '\x10', '\x2', '\x127', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x124', '\x3', '\x2', '\x2', '\x2', '\x128', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12C', '\x5', '\x1E', '\x10', '\x2', '\x12B', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x132', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x132', '\x5', ' ', '\x11', '\x2', '\x131', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x133', '\x135', 
		'\x5', '$', '\x13', '\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13D', '\x5', '(', '\x15', '\x2', '\x13A', '\x13B', 
		'\a', '\x17', '\x2', '\x2', '\x13B', '\x13D', '\a', ':', '\x2', '\x2', 
		'\x13C', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x142', '\a', ':', '\x2', '\x2', '\x13F', '\x141', '\x5', '\x1E', '\x10', 
		'\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\x5', '\"', '\x12', '\x2', '\x146', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x149', '\x5', '$', '\x13', '\x2', '\x148', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\a', '\x17', '\x2', 
		'\x2', '\x14E', '\x150', '\a', ':', '\x2', '\x2', '\x14F', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', '\x2', '\x2', 
		'\x3', '\x152', '#', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', 
		'\x18', '\x2', '\x2', '\x154', '\x156', '\a', ':', '\x2', '\x2', '\x155', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\x5', '*', '\x16', '\x2', '\x158', '%', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\a', '\x1D', '\x2', '\x2', '\x15A', '\x15B', '\x5', '\x14', 
		'\v', '\x2', '\x15B', '\x15C', '\a', '\x1E', '\x2', '\x2', '\x15C', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '\x1D', '\x2', '\x2', 
		'\x15E', '\x160', '\x5', ' ', '\x11', '\x2', '\x15F', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x1F', '\x2', 
		'\x2', '\x162', '\x163', '\x5', '\x14', '\v', '\x2', '\x163', '\x164', 
		'\a', ' ', '\x2', '\x2', '\x164', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\a', '\x1F', '\x2', '\x2', '\x166', '\x168', '\x5', 
		' ', '\x11', '\x2', '\x167', '\x161', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x168', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16B', '\a', '\x1D', '\x2', '\x2', '\x16A', '\x16C', 
		'\x5', '\x12', '\n', '\x2', '\x16B', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x178', '\a', '\x1E', '\x2', '\x2', '\x16E', 
		'\x178', '\x5', '\x32', '\x1A', '\x2', '\x16F', '\x178', '\x5', 'P', ')', 
		'\x2', '\x170', '\x174', '\a', '\x1D', '\x2', '\x2', '\x171', '\x172', 
		'\x5', '\x12', '\n', '\x2', '\x172', '\x173', '\a', '\x11', '\x2', '\x2', 
		'\x173', '\x175', '\x3', '\x2', '\x2', '\x2', '\x174', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\x5', ' ', '\x11', 
		'\x2', '\x177', '\x169', '\x3', '\x2', '\x2', '\x2', '\x177', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x170', '\x3', '\x2', '\x2', '\x2', '\x178', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x17A', '\a', '\x13', '\x2', '\x2', '\x17A', '\x17B', 
		'\x5', '.', '\x18', '\x2', '\x17B', '-', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17E', '\a', '\x1D', '\x2', '\x2', '\x17D', '\x17F', '\x5', '\x30', 
		'\x19', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x181', '\a', '\x1E', '\x2', '\x2', '\x181', '\x182', 
		'\x5', '\x4', '\x3', '\x2', '\x182', '\x183', '\a', '\b', '\x2', '\x2', 
		'\x183', '/', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', '\x5', '\x10', 
		'\t', '\x2', '\x185', '\x186', '\a', '\x11', '\x2', '\x2', '\x186', '\x188', 
		'\a', '\x1C', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18B', '\a', '\x1C', '\x2', '\x2', '\x18A', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18E', 
		'\a', '!', '\x2', '\x2', '\x18D', '\x18F', '\x5', '\x34', '\x1B', '\x2', 
		'\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x199', '\a', '\"', '\x2', '\x2', '\x191', '\x195', '\a', '!', '\x2', 
		'\x2', '\x192', '\x193', '\x5', '\x34', '\x1B', '\x2', '\x193', '\x194', 
		'\x5', ':', '\x1E', '\x2', '\x194', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x192', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x199', '\x5', '\x38', '\x1D', '\x2', '\x198', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x191', '\x3', '\x2', '\x2', '\x2', '\x199', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x1A0', '\x5', '\x36', '\x1C', '\x2', 
		'\x19B', '\x19C', '\x5', ':', '\x1E', '\x2', '\x19C', '\x19D', '\x5', 
		'\x36', '\x1C', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A5', '\x5', 
		':', '\x1E', '\x2', '\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\a', '\x1F', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x5', '\x14', '\v', '\x2', '\x1A8', '\x1A9', '\a', ' ', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\a', '\x4', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', 
		'\x14', '\v', '\x2', '\x1AB', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', ':', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '\x4', '\x2', 
		'\x2', '\x1AE', '\x1B1', '\x5', '\x14', '\v', '\x2', '\x1AF', '\x1B1', 
		'\x5', '\x14', '\v', '\x2', '\x1B0', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\a', '\x1F', '\x2', '\x2', '\x1B3', '\x1BF', '\x5', ' ', '\x11', 
		'\x2', '\x1B4', '\x1B5', '\a', '\x1F', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x5', '\x14', '\v', '\x2', '\x1B6', '\x1B7', '\a', ' ', '\x2', '\x2', 
		'\x1B7', '\x1B8', '\a', '\x4', '\x2', '\x2', '\x1B8', '\x1B9', '\x5', 
		' ', '\x11', '\x2', '\x1B9', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1BB', '\a', ':', '\x2', '\x2', '\x1BB', '\x1BC', '\a', '\x4', '\x2', 
		'\x2', '\x1BC', '\x1BF', '\x5', ' ', '\x11', '\x2', '\x1BD', '\x1BF', 
		'\x5', ' ', '\x11', '\x2', '\x1BE', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\t', '\x2', '\x2', 
		'\x2', '\x1C1', ';', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', 
		'#', '\x2', '\x2', '\x1C3', '=', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\a', '$', '\x2', '\x2', '\x1C5', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1C6', '\x1C7', '\t', '\x3', '\x2', '\x2', '\x1C7', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x1C9', '\a', '+', '\x2', '\x2', '\x1C9', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\t', '\x4', '\x2', '\x2', 
		'\x1CB', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\t', '\x5', 
		'\x2', '\x2', '\x1CD', 'G', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\t', '\x6', '\x2', '\x2', '\x1CF', 'I', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1D1', '\t', '\a', '\x2', '\x2', '\x1D1', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D3', '\a', '\x39', '\x2', '\x2', '\x1D3', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\t', '\b', '\x2', '\x2', '\x1D5', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\t', '\t', '\x2', 
		'\x2', '\x1D7', 'Q', '\x3', '\x2', '\x2', '\x2', '.', 'W', '[', '\x81', 
		'\x86', '\x92', '\xAC', '\xAE', '\xB2', '\xB5', '\xC0', '\xC5', '\xCC', 
		'\xD4', '\xDC', '\xEC', '\x10E', '\x110', '\x117', '\x11E', '\x122', '\x128', 
		'\x12D', '\x131', '\x136', '\x13C', '\x142', '\x14A', '\x14F', '\x155', 
		'\x15F', '\x167', '\x16B', '\x174', '\x177', '\x17E', '\x187', '\x18A', 
		'\x18E', '\x195', '\x198', '\x1A0', '\x1A4', '\x1B0', '\x1BE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
