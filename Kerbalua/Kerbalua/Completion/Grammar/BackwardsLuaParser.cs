//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BackwardsLua.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BackwardsLuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, BACKWARDS_NAME=9, 
		WS=10;
	public const int
		RULE_backwardsCompletionExpr = 0, RULE_terminal = 1, RULE_backwardsPartialCompletion = 2, 
		RULE_backwardsStartSymbol = 3, RULE_completionChain = 4, RULE_segment = 5, 
		RULE_anonymousPart = 6, RULE_backwardsField = 7, RULE_backwardsAnonCall = 8, 
		RULE_backwardsAnonArray = 9, RULE_backwardsCall = 10, RULE_backwardsArgs = 11, 
		RULE_arg = 12, RULE_ignoredExpr = 13;
	public static readonly string[] ruleNames = {
		"backwardsCompletionExpr", "terminal", "backwardsPartialCompletion", "backwardsStartSymbol", 
		"completionChain", "segment", "anonymousPart", "backwardsField", "backwardsAnonCall", 
		"backwardsAnonArray", "backwardsCall", "backwardsArgs", "arg", "ignoredExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "')'", "'('", "']'", "'['", "','", "'}'", "'{'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "BACKWARDS_NAME", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BackwardsLua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BackwardsLuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BackwardsLuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BackwardsLuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class BackwardsCompletionExprContext : ParserRuleContext {
		public BackwardsStartSymbolContext backwardsStartSymbol() {
			return GetRuleContext<BackwardsStartSymbolContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public BackwardsPartialCompletionContext backwardsPartialCompletion() {
			return GetRuleContext<BackwardsPartialCompletionContext>(0);
		}
		public CompletionChainContext completionChain() {
			return GetRuleContext<CompletionChainContext>(0);
		}
		public BackwardsCompletionExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsCompletionExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsCompletionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsCompletionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsCompletionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsCompletionExprContext backwardsCompletionExpr() {
		BackwardsCompletionExprContext _localctx = new BackwardsCompletionExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_backwardsCompletionExpr);
		int _la;
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BACKWARDS_NAME) {
					{
					State = 28; backwardsPartialCompletion();
					}
				}

				State = 33;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 31; Match(T__0);
					State = 32; completionChain();
					}
					break;
				}
				State = 35; Match(T__0);
				State = 36; backwardsStartSymbol();
				State = 37; terminal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; backwardsPartialCompletion();
				State = 40; terminal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BackwardsLuaParser.Eof, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 2, RULE_terminal);
		int _la;
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case BACKWARDS_NAME:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsPartialCompletionContext : ParserRuleContext {
		public ITerminalNode BACKWARDS_NAME() { return GetToken(BackwardsLuaParser.BACKWARDS_NAME, 0); }
		public BackwardsPartialCompletionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsPartialCompletion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsPartialCompletion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsPartialCompletion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsPartialCompletion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsPartialCompletionContext backwardsPartialCompletion() {
		BackwardsPartialCompletionContext _localctx = new BackwardsPartialCompletionContext(Context, State);
		EnterRule(_localctx, 4, RULE_backwardsPartialCompletion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(BACKWARDS_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsStartSymbolContext : ParserRuleContext {
		public ITerminalNode BACKWARDS_NAME() { return GetToken(BackwardsLuaParser.BACKWARDS_NAME, 0); }
		public BackwardsStartSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsStartSymbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsStartSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsStartSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsStartSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsStartSymbolContext backwardsStartSymbol() {
		BackwardsStartSymbolContext _localctx = new BackwardsStartSymbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_backwardsStartSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(BACKWARDS_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompletionChainContext : ParserRuleContext {
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public CompletionChainContext[] completionChain() {
			return GetRuleContexts<CompletionChainContext>();
		}
		public CompletionChainContext completionChain(int i) {
			return GetRuleContext<CompletionChainContext>(i);
		}
		public CompletionChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completionChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterCompletionChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitCompletionChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompletionChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompletionChainContext completionChain() {
		CompletionChainContext _localctx = new CompletionChainContext(Context, State);
		EnterRule(_localctx, 8, RULE_completionChain);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; segment();
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 53; Match(T__0);
					State = 54; completionChain();
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public BackwardsCallContext backwardsCall() {
			return GetRuleContext<BackwardsCallContext>(0);
		}
		public BackwardsFieldContext backwardsField() {
			return GetRuleContext<BackwardsFieldContext>(0);
		}
		public AnonymousPartContext[] anonymousPart() {
			return GetRuleContexts<AnonymousPartContext>();
		}
		public AnonymousPartContext anonymousPart(int i) {
			return GetRuleContext<AnonymousPartContext>(i);
		}
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_segment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 60; anonymousPart();
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 66; backwardsCall();
				}
				break;
			case BACKWARDS_NAME:
				{
				State = 67; backwardsField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousPartContext : ParserRuleContext {
		public BackwardsAnonCallContext backwardsAnonCall() {
			return GetRuleContext<BackwardsAnonCallContext>(0);
		}
		public BackwardsAnonArrayContext backwardsAnonArray() {
			return GetRuleContext<BackwardsAnonArrayContext>(0);
		}
		public AnonymousPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterAnonymousPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitAnonymousPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousPartContext anonymousPart() {
		AnonymousPartContext _localctx = new AnonymousPartContext(Context, State);
		EnterRule(_localctx, 12, RULE_anonymousPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 70; backwardsAnonCall();
				}
				break;
			case T__3:
				{
				State = 71; backwardsAnonArray();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsFieldContext : ParserRuleContext {
		public ITerminalNode BACKWARDS_NAME() { return GetToken(BackwardsLuaParser.BACKWARDS_NAME, 0); }
		public BackwardsFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsFieldContext backwardsField() {
		BackwardsFieldContext _localctx = new BackwardsFieldContext(Context, State);
		EnterRule(_localctx, 14, RULE_backwardsField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(BACKWARDS_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsAnonCallContext : ParserRuleContext {
		public BackwardsArgsContext backwardsArgs() {
			return GetRuleContext<BackwardsArgsContext>(0);
		}
		public BackwardsAnonCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsAnonCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsAnonCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsAnonCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsAnonCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsAnonCallContext backwardsAnonCall() {
		BackwardsAnonCallContext _localctx = new BackwardsAnonCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_backwardsAnonCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__1);
			State = 77; backwardsArgs();
			State = 78; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsAnonArrayContext : ParserRuleContext {
		public BackwardsArgsContext backwardsArgs() {
			return GetRuleContext<BackwardsArgsContext>(0);
		}
		public BackwardsAnonArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsAnonArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsAnonArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsAnonArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsAnonArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsAnonArrayContext backwardsAnonArray() {
		BackwardsAnonArrayContext _localctx = new BackwardsAnonArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_backwardsAnonArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__3);
			State = 81; backwardsArgs();
			State = 82; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsCallContext : ParserRuleContext {
		public BackwardsArgsContext backwardsArgs() {
			return GetRuleContext<BackwardsArgsContext>(0);
		}
		public ITerminalNode BACKWARDS_NAME() { return GetToken(BackwardsLuaParser.BACKWARDS_NAME, 0); }
		public BackwardsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsCallContext backwardsCall() {
		BackwardsCallContext _localctx = new BackwardsCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_backwardsCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(T__1);
			State = 85; backwardsArgs();
			State = 86; Match(T__2);
			State = 87; Match(BACKWARDS_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackwardsArgsContext : ParserRuleContext {
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public BackwardsArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backwardsArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterBackwardsArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitBackwardsArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackwardsArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackwardsArgsContext backwardsArgs() {
		BackwardsArgsContext _localctx = new BackwardsArgsContext(Context, State);
		EnterRule(_localctx, 22, RULE_backwardsArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; arg();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 90; Match(T__5);
				State = 91; arg();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public IgnoredExprContext ignoredExpr() {
			return GetRuleContext<IgnoredExprContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 24, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; ignoredExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IgnoredExprContext : ParserRuleContext {
		public IgnoredExprContext[] ignoredExpr() {
			return GetRuleContexts<IgnoredExprContext>();
		}
		public IgnoredExprContext ignoredExpr(int i) {
			return GetRuleContext<IgnoredExprContext>(i);
		}
		public IgnoredExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ignoredExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.EnterIgnoredExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBackwardsLuaListener typedListener = listener as IBackwardsLuaListener;
			if (typedListener != null) typedListener.ExitIgnoredExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBackwardsLuaVisitor<TResult> typedVisitor = visitor as IBackwardsLuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoredExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IgnoredExprContext ignoredExpr() {
		IgnoredExprContext _localctx = new IgnoredExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_ignoredExpr);
		int _la;
		try {
			int _alt;
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; Match(T__1);
				State = 100; ignoredExpr();
				State = 101; Match(T__2);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; Match(T__3);
				State = 104; ignoredExpr();
				State = 105; Match(T__4);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; Match(T__6);
				State = 108; ignoredExpr();
				State = 109; Match(T__7);
				}
				break;
			case T__0:
			case T__2:
			case T__4:
			case T__5:
			case T__7:
			case BACKWARDS_NAME:
			case WS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << BACKWARDS_NAME) | (1L << WS))) != 0)) {
					{
					{
					State = 111;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 117; Match(T__5);
						State = 118; ignoredExpr();
						}
						} 
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\x81', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x5', '\x2', ' ', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x31', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', ':', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '=', '\v', '\x6', 
		'\x3', '\a', '\a', '\a', '@', '\n', '\a', '\f', '\a', '\xE', '\a', '\x43', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'K', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '_', '\n', '\r', '\f', '\r', '\xE', '\r', '\x62', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		's', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 'v', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', 'z', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '}', '\v', '\xF', '\x5', '\xF', '\x7F', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\x41', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x4', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x2', '\x4', '\n', '\x2', '\x80', 
		'\x2', ',', '\x3', '\x2', '\x2', '\x2', '\x4', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x32', '\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'J', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x12', 'N', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'R', '\x3', '\x2', '\x2', '\x2', '\x16', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '[', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '~', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\x5', '\x6', '\x4', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', '\"', '$', '\x5', 
		'\n', '\x6', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 
		'\x3', '\x2', '\x2', '&', '\'', '\x5', '\b', '\x5', '\x2', '\'', '(', 
		'\x5', '\x4', '\x3', '\x2', '(', '-', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\x5', '\x6', '\x4', '\x2', '*', '+', '\x5', '\x4', '\x3', '\x2', 
		'+', '-', '\x3', '\x2', '\x2', '\x2', ',', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', '-', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x31', '\n', '\x2', '\x2', '\x2', '/', '\x31', '\a', 
		'\x2', '\x2', '\x3', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\v', '\x2', '\x2', '\x33', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\v', '\x2', '\x2', '\x35', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x36', ';', '\x5', '\f', '\a', '\x2', '\x37', 
		'\x38', '\a', '\x3', '\x2', '\x2', '\x38', ':', '\x5', '\n', '\x6', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '\v', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', 
		'\x2', '\x2', '\x2', '>', '@', '\x5', '\xE', '\b', '\x2', '?', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x46', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x44', 'G', '\x5', '\x16', '\f', '\x2', '\x45', 
		'G', '\x5', '\x10', '\t', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'K', '\x5', '\x12', '\n', '\x2', 'I', 'K', '\x5', '\x14', 
		'\v', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'K', '\xF', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', 
		'\v', '\x2', '\x2', 'M', '\x11', '\x3', '\x2', '\x2', '\x2', 'N', 'O', 
		'\a', '\x4', '\x2', '\x2', 'O', 'P', '\x5', '\x18', '\r', '\x2', 'P', 
		'Q', '\a', '\x5', '\x2', '\x2', 'Q', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x6', '\x2', '\x2', 'S', 'T', '\x5', '\x18', '\r', '\x2', 
		'T', 'U', '\a', '\a', '\x2', '\x2', 'U', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\x4', '\x2', '\x2', 'W', 'X', '\x5', '\x18', '\r', 
		'\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 'Y', 'Z', '\a', '\v', '\x2', 
		'\x2', 'Z', '\x17', '\x3', '\x2', '\x2', '\x2', '[', '`', '\x5', '\x1A', 
		'\xE', '\x2', '\\', ']', '\a', '\b', '\x2', '\x2', ']', '_', '\x5', '\x1A', 
		'\xE', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x1C', 
		'\xF', '\x2', '\x64', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x4', '\x2', '\x2', '\x66', 'g', '\x5', '\x1C', '\xF', '\x2', 'g', 
		'h', '\a', '\x5', '\x2', '\x2', 'h', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '\x6', '\x2', '\x2', 'j', 'k', '\x5', '\x1C', '\xF', '\x2', 
		'k', 'l', '\a', '\a', '\x2', '\x2', 'l', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\t', '\x2', '\x2', 'n', 'o', '\x5', '\x1C', '\xF', 
		'\x2', 'o', 'p', '\a', '\n', '\x2', '\x2', 'p', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', 'q', 's', '\n', '\x3', '\x2', '\x2', 'r', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '{', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\b', 
		'\x2', '\x2', 'x', 'z', '\x5', '\x1C', '\xF', '\x2', 'y', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '~', 'i', '\x3', '\x2', '\x2', '\x2', 
		'~', 'm', '\x3', '\x2', '\x2', '\x2', '~', 't', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1F', '#', ',', '\x30', 
		';', '\x41', '\x46', 'J', '`', 't', '{', '~',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
