var targetAltitude = 80000
var safeAltitude   = 72000
var ascentHeading  = 90
var firstAngle     = 10
var firstAltitude  = 1000
var narrowAltitude = 100

def gui
  var lblWidth = 120
  var boxWidth = 40
  var wnd = new ui.window
  def row label, value
    var row = wnd.add new ui.panel
    row.layout = ui.layout.horizontal
    var lbl = row.add new ui.label
    lbl.text = label
    lbl.minWidth = lblWidth
    var box = row.add new ui.textBox
    box.text = string value
    box.minWidth = boxWidth
    return box
  var ta = row "Target altitude: ", targetAltitude
  var sa = row "Safe altitude: ",   safeAltitude
  var ah = row "Ascent heading: ",  ascentHeading
  var fa = row "First angle: ",     firstAngle
  var a1 = row "First altitude: ",  firstAltitude
  var na = row "Narrow altitude: ", narrowAltitude
  var brow = wnd.add new ui.panel
  brow.layout = ui.layout.horizontal
  var cancel = brow.add new ui.button
  cancel.text = "Cancel"
  cancel.flexWidth = 1
  var launch = brow.add new ui.button
  launch.text = "Launch"
  launch.flexWidth = 1
  var selected = null
  cancel.click.add def => selected = false
  launch.click.add def => selected = true
  wnd.closed.add def => selected = false
  while selected == null
    wait
  if selected
    targetAltitude = double ta.text
    safeAltitude   = double sa.text
    ascentHeading  = double ah.text
    firstAngle     = double fa.text
    firstAltitude  = double a1.text
    narrowAltitude = double na.text
  wnd.dispose
  return selected
if !gui()
  return

ship.throttle = 0
user.throttle = 1

var lastPitchReport = 0.0
var prevPitchValue = 0
ship.heading = ascentHeading
/*
var ppid = new pid
var ypid = new pid
ppid.scale = 0.3
ypid.scale = 0.3
ppid.p = 0.9
ppid.i = 0.1
ppid.d = 0.5
ppid.r = 0.1
ypid.p = 0.9
ypid.i = 0.1
ypid.d = 0.5
ypid.r = 0.1
*/
def setPitch pitch
  ship.pitch = pitch
  var ap = ship.autopilot
  var dir = new vector ship.native.transform.inverseTransformDirection ap.direction
  var pd = math.deg.atan2 -dir.z, dir.y
  var cd = math.deg.atan2 dir.x, dir.y
  /*
  ppid.input = pd
  ypid.input = cd
  ap.rawPitch = ppid.update()
  ap.rawYaw   = ypid.update()
  */
  if time() - lastPitchReport >= .25 and pitch != prevPitchValue
    lastPitchReport = time()
    prevPitchValue = pitch
    print "Want: {0,6:F2}:{1,6:F2}", pitch, ascentHeading
    print "Have: {0,6:F2}:{1,6:F2}", ship.pitch, ship.heading
    print "Diff: {0,6:F2}:{1,6:F2}", pd, cd
    /*
    print "PIDs: {0,6:F2}:{1,6:F2}", ppid.output, ypid.output
    print "Vect: {0,4:F2}:{1,4:F2}:{2,4:F2}", dir.x, dir.y, dir.z
    var fwd = ship.forward
    print "Ship: {0,4:F2}:{1,4:F2}:{2,4:F2}", fwd.x, fwd.y, fwd.z
    */
    print

def steer
  if altitude <= narrowAltitude
    setPitch 90
  else if altitude <= firstAltitude
    setPitch 90 - firstAngle * altitude/firstAltitude
  else setPitch (90 - firstAngle) * math.deg.acos(math.clamp
    ((apoapsis - firstAltitude) / (safeAltitude - firstAltitude)),
    0, 1) / 90
    
var lastApoAbove = 0.0
def throttle
  if apoapsis >= targetAltitude
    ship.throttle = 0
    if lastApoAbove == 0.0
      print "Apoapsis reached"
    lastApoAbove = time()
  else if lastApoAbove != 0 and time() - lastApoAbove < 10
    ship.throttle = 0
  else
    var power = 1
    if apoapsis > safeAltitude and altitude < safeAltitude
      power = math.max 0.3, (targetAltitude-apoapsis) / math.max(1.0, targetAltitude-safeAltitude)
    if apoapsis > targetAltitude * 0.95
      power = math.min power, 0.01+20*(1-apoapsis/targetAltitude)
    ship.throttle = math.min power, user.throttle

def staging
  if !stage.ready
    return
  var nextDecoupler = ship.parts.nextDecoupler
  if nextDecoupler == null
    return
  if nextDecoupler.isType("LaunchClamp")
    print "Releasing launch clamps"
    stage
    return
  if !stage.engines.anyOperational
    print "No operational engine"
    stage
    return
  if stage.solidFuel + stage.liquidFuel <= 0.1
    print "Stage out of fuel"
    stage
    return

var vd = [
  new vector.draw,
  new vector.draw]
vd[0].scale = 15
vd[0].width = .5
vd[1].color = color.blue
vd[1].scale = 10
def vectors
  vd[0].vector = ship.forward
  vd[1].vector = ship.autopilot.direction
vectors
for var d in vd
  d.show

var subs = [
  system.update(steer),
  system.update(throttle),
  system.update(vectors),
  system.idle(staging)
]

print "Target apoapsis: " + targetAltitude
print "Safe altitude:   " + safeAltitude
until altitude >= safeAltitude and apoapsis >= targetAltitude*.99
  wait

for var e in subs
  e.remove
for var d in vd
  d.hide

user.throttle = 0
ship.autopilot.disable

print "Safe altitude reached"
