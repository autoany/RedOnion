var dirsubs = null // system.update subscriptions for direction manipulation
var wnd = new ui.window "Control " + ship.name
try
  wnd.x -= (unity.screen.width - 200) / 3

  // mode vs. the rest
  var split = wnd.addHorizontal()
  split.padding = 0

  // mode
  var mode = split.addVertical()
  def mbtn text
    var btn = mode.addExclusive text
    btn.width = 60
    return btn
  var mObt = mbtn "OBT" // orbital steering
  var mSrf = mbtn "SRF" // surface steering
  var mTgt = mbtn "TGT" // target steering and utils
  var mMan = mbtn "MAN" // maneuver execution
  var mNde = mbtn "NDE" // nodes only (+ "EXEC" button)
  mObt.pressed = true

  // main content (buttons and footer)
  var main = split.addVertical()
  main.width = 163
  main.childAnchors = ui.anchors.fill
  var btns = main.addHorizontal() //TODO: stack
  btns.childAnchors = ui.anchors.fill

  def lockdir fn
    if dirsubs != null
      dirsubs.remove
      dirsubs = null
    autopilot.disable
    if fn != null
      dirsubs = system.update def
        autopilot.direction = fn()
  def xbtn parent, text, steer
    var btn = parent.addExclusive2 text, lockdir.bind steer
    btn.width = 80
    return btn

  // orbital/surfece buttons
  var blk1 = btns.addVertical() //TODO: vertical flow and/or easy stretch for UNLOCK
  var row = blk1.addHorizontal()
  var bProgr  = xbtn row, "Progr.", def => mSrf.pressed ? ship.srfvel : ship.velocity
  var bRetro  = xbtn row, "Retro.", def => mSrf.pressed ? -ship.srfvel : -ship.velocity
  row = blk1.addHorizontal()
  var bNormal = xbtn row, "Normal", def => ship.velocity.cross ship.away
  var bAntiN  = xbtn row, "Anti-N", def => -ship.velocity.cross ship.away
  row = blk1.addHorizontal()
  var bRadOut = xbtn row, "Rad-OUT", def => ship.velocity.cross ship.away.cross ship.velocity
  var bRadIn  = xbtn row, "Rad-IN", def => -ship.velocity.cross ship.away.cross ship.velocity
  row = blk1.addHorizontal()
  var unlock = row.addExclusive2 "UNLOCK", lockdir.bind null
  unlock.flexWidth = 1
  unlock.flexHeight = 1
  unlock.pressed = true

  // startup selection
  if "control_dir" in global
    var sel = global.control_dir
    global.control_dir = null
    if sel == "obt.prograde"
      bProgr.pressed = true

  // main loop
  var done = false
  wnd.closed.add def
    done = true
  until done
    if mObt.pressed and altitude < math.max atmosphere.height/4, 1000
      mSrf.pressed = true
    blk1.visible = mObt.pressed or mSrf.pressed
    wait
    if stage.ready // could be moved to system.idle but why actually
      var nextDecoupler = ship.parts.nextDecoupler
      if nextDecoupler == null
      //nothing to separate (using stage.pending is too dangerous in this script)
        continue
      if nextDecoupler.isType "LaunchClamp"
      //not releasing launch clamps in this script
        continue
      if !stage.engines.anyOperational
        print "No operational engine"
        stage
      else if stage.fuel <= 0.1
        print "Stage out of fuel"
        stage

finally
  wnd.dispose
  if dirsubs != null
    dirsubs.remove
    dirsubs = null
  autopilot.disable
