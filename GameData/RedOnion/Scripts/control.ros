// list of all active control guis
var guis = new list
// requests for new windows (better do that in main)
var reqs = new queue

def control ship, target, x, y
  var self = this ?? new object
  self.terminate = false
  self.ship = ship
  self.target = target
  self.dirsubs = null // system.update subscriptions for direction manipulation
  self.stgsubs = null // system.idle subscription for staging
  var wnd = new ui.window false, ui.layout.vertical
  self.wnd = wnd
  guis.add self
  wnd.x -= (unity.screen.width - 200) / 3
  if x != null then wnd.x = x
  if y != null then wnd.y = y
  wnd.title = "Control " + ship.name
  wnd.closed.add def
    self.terminate = true
  var autopilot = ship.autopilot

//mode vs. the rest
  var split = wnd.addHorizontal()
  split.padding = 0

//mode
  var mode = split.addVertical()
  def mbtn text
    var btn = mode.addExclusive text
    btn.width = 60
    return btn
  var mObt = mbtn "OBT" // orbital steering
  var mSrf = mbtn "SRF" // surface steering
  var mTgt = mbtn "TGT" // target steering and utils
  var mMan = mbtn "MAN" // maneuver execution
  var mNde = mbtn "NDE" // nodes only (+ "EXEC" button)
  mObt.pressed = true

//main content (buttons and footer)
  var main = split.addVertical()
  main.width = 163
  main.childAnchors = ui.anchors.fill
  var btns = main.addHorizontal() //TODO: stack
  btns.childAnchors = ui.anchors.fill

//helper for buttons that control direction
  def lockdir fn, btn
    if self.dirsubs != null
      self.dirsubs.remove
      self.dirsubs = null
    autopilot.disable
    if fn != null and (btn == null || btn.pressed)
      self.dirsubs = system.update def
        autopilot.direction = fn()
//create button that controls direction
  def xbtn parent, text, initOrSteer, steer
    if steer == null
      var btn = parent.addExclusive2 text, lockdir.bind initOrSteer
      btn.width = 80
      return btn
    var btn = parent.addExclusive2 text, def
      initOrSteer()
      lockdir steer, btn
    btn.width = 80
    return btn
//create button that manages the subscriptions on its own
  def cbtn parent, text, fn
    var btn = parent.addExclusive2 text, def btn
      if self.dirsubs != null
        self.dirsubs.remove
        self.dirsubs = null
      autopilot.disable
      if fn != null and (btn == null || btn.pressed)
        fn()
    btn.width = 80
    return btn

//orbital/surface buttons
  var blk1 = btns.addVertical()
  var row = blk1.addHorizontal()
  var bProgr  = xbtn row, "Progr.", def => mSrf.pressed ? ship.srfvel : ship.velocity
  var bRetro  = xbtn row, "Retro.", def
    if mObt.pressed
      return -ship.velocity
  //landing assist
    var rv = -ship.srfvel
    if rv.size < 1 then rv = ship.away
    if ship.altitude >= 10000 or ship.periapsis >= 0
      autopilot.throttle = nan
      return rv
    var acc = ship.engines.getThrust() / ship.mass
    if acc <= 0.001
      autopilot.throttle = nan
      return rv
    if rv.angle(ship.away) > 120
      autopilot.throttle = 0
      return rv
    autopilot.throttle = math.min user.throttle, rv.size / acc
    return rv

  row = blk1.addHorizontal()
  var bNormal = xbtn row, "Normal", def => ship.velocity.cross ship.away
  var bAntiN  = xbtn row, "Anti-N", def => -ship.velocity.cross ship.away
  row = blk1.addHorizontal()
  var bRadOut = xbtn row, "Rad-OUT", def => ship.velocity.cross ship.away.cross ship.velocity
  var bRadIn  = xbtn row, "Rad-IN", def => -ship.velocity.cross ship.away.cross ship.velocity
  row = blk1.addHorizontal()
  var unlock = row.addExclusive2 "UNLOCK", lockdir.bind null
  unlock.flexWidth = 1
  unlock.flexHeight = 1
  unlock.pressed = true

//target buttons
  var blk2 = btns.addVertical()
  blk2.visible = false
  row = blk2.addHorizontal()
  var bTowards = xbtn row, "Towards", def
    prevTgtBtn = bTowards
    var target = ship.target ?? self.target
    if target != null
      return target.position - ship.position
    autopilot.killRot = true
    return vector.none
  var bAway = xbtn row, "Away Fr.", def
    prevTgtBtn = bAway
    var target = ship.target ?? self.target
    if target != null
      return ship.position - target.position
    autopilot.killRot = true
    return vector.none

  row = blk2.addHorizontal()
  var bMatchSpeed = xbtn row, "Match Speed", def
    prevTgtBtn = bMatchSpeed
    var dv = vector.none
    var target = ship.target ?? self.target
    if target == null
      autopilot.killRot = true
    else
      if target is types.part
        target = target.ship
      dv = target.velocity-ship.velocity
      if dv.size >= 0.01
        var d = dv.angle ship.forward // direction / face-angle error
        var e = d <= 1 ? 1 : math.deg.cos math.min 89.4, d^2.0 // min 0.0105
        autopilot.throttle = ship != global.ship ? nan :
          e * math.min ship == global.ship ? user.throttle : 0.5,
          dv.size * ship.mass / math.max 1, ship.engines.getThrust()
      else
        if ship == global.ship
          user.throttle = 0
        autopilot.throttle = nan
        unlock2.press
    return dv
  bMatchSpeed.flexWidth = 1

  row = blk2.addHorizontal()
  var bControlTarget = xbtn row, "Control Target", def
    var target = ship.target ?? self.target
    if target != null
      if target is types.part
        target = target.ship
      if target is types.ship
        var rq = new object
        rq.ship = target
        rq.target = ship
        rq.x = wnd.x
        rq.y = wnd.y + wnd.height * 2 < unity.screen.height ?
          wnd.y + wnd.height : wnd.y - wnd.height
        reqs.push rq
    prevTgtBtn.press
    return vector.none
  bControlTarget.flexWidth = 1

  row = blk2.addHorizontal()
  var unlock2 = row.addExclusive2 "UNLOCK", lockdir.bind def
    prevTgtBtn = unlock2
    return vector.none
  unlock2.flexWidth = 1
  unlock2.flexHeight = 1
  var prevTgtBtn = unlock2

//maneuvers
  var blk3 = btns.addVertical()
  blk3.visible = false
  row = blk3.addHorizontal()
  var warpDelay
  var report
  var dvMin
  def execInit
    warpDelay = null
    report = null
    dvMin = inf
    ship.sas = true
  def execSteer
    if bAbort.pressed
      return vector.none
    unless mMan.pressed or mNde.pressed
      return vector.none
    var nde = node.next
    if nde == null
      bAbort.press
      return vector.none
    var dv = nde.deltav
    var xt = 0.5 * stage.burnTime dv.size
    var dt = nde.eta - xt
    var d = dv.angle ship.forward // direction / face-angle error
    var e = d <= 1 ? 1 : math.deg.cos math.min 89.4, d^2.0 // min 0.0105
    if dt > 30 and time.warp.ready
      if warpDelay == null
        warpDelay = time()
        ship.sas = true
      else if (time.since(warpDelay) >= 1 and d < 1
        and ship.angularVelocity.size < 0.1)
        warpDelay = null
        time.warp.to time() + dt - (dt > 300 ? 300 : 10)
      if report == null or time.since(report) >= 1
        report = time()
        print "DV: {0,4:F1} AD: {1,4:F1} AV: {2,5:F2}", dv.size, d, ship.angularVelocity.size
    autopilot.throttle = dt >= 1 ? 0 : (dt <= 0 ? 1 : 1-dt) * e *
      dv.size * ship.mass / math.max 1, ship.engines.getThrust()
    dvMin = math.min dvMin, dv.size
    if dvMin < 0.05
      nde.remove
      bAbort.press
    return dv
  var bExec = xbtn row, "EXEC", execInit, execSteer

  var bCirc = cbtn row, "CIRC", def
    while node.next != null
      node.next.remove
      wait
    var orbit = ship.orbit
    if orbit.encounter and ship.timeAtPe > orbit.endTime
      orbit = orbit.next
      var tm = orbit.timeAtPe
      var body = orbit.body
      var pos = orbit.positionAt(tm) - body.position
      var vel = orbit.velocityAt(tm)
      var dv = math.sqrt(body.mu / pos.size) * pos.cross(vel.cross pos).normalized - vel
      new node tm, -dv.size
      print "Encounter with {0} detected", body.name
      print "ETA: {0}, UT: {1}", tm - time(), tm
    else
      var tm = time.now
      var body = ship.body
      if ship.eccentricity < 0.001
        print "Eccentricity is {0:F6}, adjusting now", ship.eccentricity
      else if ship.apoapsis > 0 and ship.timeToPe > ship.timeToAp
        tm = ship.timeAtAp
        print "Circularize at apoapsis: {0}m", ship.apoapsis
      else if ship.periapsis > math.max(atmosphere.height, 3000) and ship.eccentricity > 0.001
        tm = ship.timeAtPe
        print "Circularize at periapsis: {0}m", ship.periapsis
      else
        print "Circularizing immediately"
      var pos = ship.positionAt(tm) - body.position
      var vel = ship.velocityAt(tm)
      var dv = math.sqrt(body.mu / pos.size) * pos.cross(vel.cross pos).normalized - vel
      new node tm, dv
      print "ETA: {0}, UT: {1}", tm - time(), tm
    if mMan.pressed
      bExec.press
    else bAbort.press

  row = blk3.addHorizontal()
  var bHohm = cbtn row, "Hohmann", def
    var target = ship.target
    if target == null
      target = body.body
    if target == null
      target = ship.target
    if target == null
      print "No target"
      bAbort.press
      return
    var our = ship
    var its = target
    var ret = false
    if our.body != its.body
      if our.body.body == its or our.body.body == its.body
      //e.g. Mun to Kerbin, Kerbin to Duna or Mun to Minmus, calculate like if transfering the body itself
        ret = our.body.body == its
        our = our.body
        print "Warning: Assuming self as " + our.name
      else if its.body != null and its.body.body != null and our.body.body == its.body.body
      //e.g. Kerbin to Ike, redirect to Duna
        our = our.body
        its = its.body
        print "Warning: Assuming self as {0} and it as {1}", our.name, its.name
      else
        print "Incompatible orbits: {0} to {1}", our.body, its.body
        bAbort.press
        return
    while node.next != null
      node.next.remove
      wait
    if our.eccentricity > 0.01
      print "Warning: our e={0:F5}", our.eccentricity
    if its.eccentricity > 0.01
      print "Warning: its e={0:F5}", its.eccentricity
    var r1 = our.semiMajorAxis
    if ret; r1 -= ship.semiMajorAxis
    var r2 = ret ? its.radius + math.max(10000, its.atm.height) : its.semiMajorAxis
    var r3 = 0
    if its is types.body
      r3 = its.radius
      if r1 < r2; r3 = -r3
      r2 += r3
    var pt = 0.5 * ((r1+r2) / (2*r2))^1.5
    var ft = pt - math.floor pt
  //angular distance that target will travel during transfer (if circular)
    var theta = 360 * ft
  //angles to universal reference direction
    var sa = our.lan + our.argumentOfPeriapsis + our.trueAnomaly
    var ta = its.lan + its.argumentOfPeriapsis + its.trueAnomaly
    var t0 = time()
  //match angle (+k*360)
    var ma = math.clamp360 ta+theta-sa-180
  //angle change rate (inaccurate for eccentric orbits but good for a start)
    var ar = 360/our.period - 360/its.period
  //estimated burn time
    var mt = 5+.5*math.abs(math.sqrt(our.body.mu/r1) * (math.sqrt((2*r2)/(r1+r2)) - 1)
      ) * ship.mass/math.max 0.1,ship.engines.getThrust()
  //k closest to zero such that (ma + k*360)/ar >= mt
    var k = (mt*ar - ma)/360
  //closest integer
    if ar < 0 then k = math.floor k
    else k = math.ceiling k
  //time to node (exact if both orbits are perfectly circular)
    var dt = ret ? mt : (ma+k*360)/ar
  //precise burn vector
    var t1 = t0+dt
    var v1 = our.velocityAt(t1).size
    var p1 = our.positionAt(t1)-our.body.position
    var s1 = r1
    r1 = p1.size
    if ret; r1 -= ship.semiMajorAxis
  //https://en.wikipedia.org/wiki/Semi-major_and_semi-minor_axes#Orbital_period
    var s2 = r2
    if !ret; r2 = r3 + (its.positionAt(t1 + math.pi*math.sqrt(math.max(r1,r2)^3.0/its.body.mu))-its.body.position).size
  //https://en.wikipedia.org/wiki/Orbital_speed#Precise_orbital_speed
    var v2 = math.sqrt our.body.mu*(2/r1-2/(r1+r2))
    var dv = v2 - v1
    print "R: {0:F0}/{1:F0} ({2:F0}/{3:F0})", r1/1000, r2/1000, s1/1000, s2/1000
    print "V: {0:F0}/{1:F0} ETA: {2}", v1, v2, time.delta dt
    if our == ship
      new node t1, dv
    else
    //hyperbolic departure magnitude
      var pb = math.sqrt(dv^2+2*body.mu/ship.semiMajorAxis) - math.sqrt(body.mu/ship.semiMajorAxis)
      var mt = 5+.5*pb*ship.mass/math.max(0.1,ship.engines.getThrust())
    //correction for optimal angle
      var sa = ship.velocityAt(t1).angle body.velocityAt(t1), ship.north
      var da = math.deg.asin(1/(1+ship.semiMajorAxis*dv^2/body.mu))
      if r2 < r1 then da += 180
      var ca = math.clamp360 -da-sa
    //finalize eta and add node
      var t2 = t1
      t1 += ca * ship.period/360
      if ca > 180 and t1 - ship.period > time.now + mt
        t1 -= ship.period
      print "{0}-{1}: {2}, {3}", our, its, t1, t2
      print "DV: {0:F0}; Ang.: {1:F1}/{2:F1}/{3:F1}", pb, sa, da, ca
      var nd = new node t1, pb
    //correction for SOI size (we assumed departure at infinity)
      var t3 = nd.orbit.endTime
      var v3 = body.velocityAt t3
      if r2 < r1; v3 = -v3
      var dc = v3.angle nd.orbit.velocityAt(t3), ship.north
      var dt = time.delta dc * ship.period/360
      print "Departure correction: {0:F2}°, {1}", dc, dt
      if nd.eta + dt < mt; dt += ship.period
      nd.time += dt
    
    if mMan.pressed
      bExec.press
    else bAbort.press

  var bIncline = cbtn row, "Incline", def
    while node.next != null
      node.next.remove
      wait
    var di = 0 // inclination difference (target-current)
    var ta = 0 // angle from periapsis to DN (burn in normal direction here)
    var t0 = time()
    var i0 = ship.inclination
    var sp = ship.position - body.position
    var sv = ship.velocity
    var sn = sv.cross sp // our normal
    var sa = ship.trueAnomaly
    var target = ship.target ?? self.target
    if target is types.ship and target.landed
      print "TODO: Incline to landed, Incl.: {0,5:F1}", math.atan 2*math.tan target.latitude
      target = null
    if target == null or target == ship.body
      print "Incl.: {0,5:F1} Arg.: {1,5:F1}", i0, ship.argumentOfPeriapsis
      di = -i0
      ta = -ship.argumentOfPeriapsis - sa
      if i0 >= 150 // retrograde orbit
        di = 180-i0
    else
      var i1 = target.inclination
      var tp = target.position - body.position
      var tv = target.velocity
      var tn = tv.cross tp // its normal
      var ln = tn.cross sn // AN-DN line
      di = tn.angle sn, ln // angle between normals
      ta = ln.angle sp, sn // angle to DN
      print "Our I: {0,5:F1} its: {1,5:F1}, diff: {2,5:F1}", i0, i1, di
      print "To DN: {0,5:F1}, SA: {1,5:F1} PE-DN: {2,5:F1}", ta, sa, ta+sa
    ta = math.clamp360 ta
    if ta > 180
      ta -= 180
      di = -di
    ta = math.clamp360 ta+sa
    var dt = ship.timeToTrueAnomaly ta
    var t1 = t0 + dt
    var v1 = ship.velocityAt t1
    var dv = v1.rotate(-di, ship.positionAt(t1) - body.position) - v1

    if dt < 5+.5*stage.burnTime dv.size
      ta = math.clamp360 ta+180
      di = -di
      dt = ship.timeToTrueAnomaly ta
      t1 = t0 + dt
      v1 = ship.velocityAt t1
      dv = v1.rotate(-di, ship.positionAt(t1) - body.position) - v1

    print "DT: {0,5:F0} TA: {1,3:F0}", dt, ta
    new node t1, dv
    
    if mMan.pressed
      bExec.press
    else bAbort.press
    
  row = blk3.addHorizontal()
  var bAbort = xbtn row, "ABORT"
  bAbort.flexWidth = 1
  bAbort.flexHeight = 1

//startup selection
  if "control_dir" in global
    var sel = global.control_dir
    global.control_dir = null
    if sel == "obt.prograde"
      bProgr.pressed = true

//staging
  self.stgsubs = system.idle def
    if ship != global.ship
      return
    if !stage.ready
      return
    if stage.pending
    //not using that in this script
      return
    if ship.engines.count == 0
    //no point in staging if there is no engine
      return
    var nextDecoupler = ship.parts.nextDecoupler
    if nextDecoupler == null
        return
    if nextDecoupler.isType "LaunchClamp"
    //not releasing launch clamps in this script
      return
    if !stage.engines.anyOperational
      print "No operational engine"
      stage
      return
    if stage.fuel <= 0.1
      print "Stage out of fuel"
      stage
      return

//main loop
  self.main = def
    if self.terminate
      if self.dirsubs != null
        self.dirsubs.remove
        self.dirsubs = null
      if self.stgsubs != null
        self.stgsubs.remove
        self.stgsubs = null
      autopilot.disable()
      wnd.dispose()
      guis.remove self
      return false
    if mObt.pressed and ship.altitude < math.max atmosphere.height/4, 1000
      mSrf.pressed = true
    if !blk1.visible and (mObt.pressed or mSrf.pressed)
      blk2.visible = false
      blk3.visible = false
      blk1.visible = true
      unlock.press
    if !blk2.visible and mTgt.pressed
      blk1.visible = false
      blk3.visible = false
      blk2.visible = true
      unlock2.press
    if !blk3.visible and (mMan.pressed or mNde.pressed)
      blk1.visible = false
      blk2.visible = false
      blk3.visible = true
      lockdir //null, null - disable current
      bAbort.press
      
    //remember last target
    self.target = ship.target ?? self.target
    //visual hint which ship is active
    wnd.alpha = ship == global.ship ? 0.9 : 0.7
    return true

  wnd.visible = true
  return self

control ship
try
  while guis.count > 0
    for var i = 0; i < guis.count
      if guis[i].main(); i++
    if reqs.count > 0
      var rq = reqs.pop()
      control rq.ship, rq.target, rq.x, rq.y
    wait
finally
  for var gui in guis
    gui.terminate = true
    var dirsubs = gui.dirsubs
    gui.dirsubs = null
    if dirsubs != null
      dirsubs.remove
    var stgsubs = gui.stgsubs
    gui.stgsubs = null
    if stgsubs != null
      stgsubs.remove
    gui.wnd.dispose()
    gui.ship.autopilot.disable
  autopilot.disable
