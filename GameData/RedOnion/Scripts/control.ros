// list of all active control guis
var guis = new list

def control ship
  var self = this ?? new object
  self.terminate = false
  self.ship = ship
  self.dirsubs = null // system.update subscriptions for direction manipulation
  self.stgsubs = null // system.idle subscription for staging
  var wnd = new ui.window
  self.wnd = wnd
  self.main = null // signal that it is not fully created yet
  guis.add self
  wnd.x -= (unity.screen.width - 200) / 3
  wnd.title = "Control " + ship.name
  wnd.closed.add def
    self.terminate = true
  var autopilot = ship.autopilot

//mode vs. the rest
  var split = wnd.addHorizontal()
  split.padding = 0

//mode
  var mode = split.addVertical()
  def mbtn text
    var btn = mode.addExclusive text
    btn.width = 60
    return btn
  var mObt = mbtn "OBT" // orbital steering
  var mSrf = mbtn "SRF" // surface steering
  var mTgt = mbtn "TGT" // target steering and utils
  var mMan = mbtn "MAN" // maneuver execution
  var mNde = mbtn "NDE" // nodes only (+ "EXEC" button)
  mObt.pressed = true

//main content (buttons and footer)
  var main = split.addVertical()
  main.width = 163
  main.childAnchors = ui.anchors.fill
  var btns = main.addHorizontal() //TODO: stack
  btns.childAnchors = ui.anchors.fill

  def lockdir fn, btn
    if self.dirsubs != null
      self.dirsubs.remove
      self.dirsubs = null
    autopilot.disable
    if fn != null and (btn == null || btn.pressed)
      self.dirsubs = system.update def
        autopilot.direction = fn()
  def xbtn parent, text, steer
    var btn = parent.addExclusive2 text, lockdir.bind steer
    btn.width = 80
    return btn

//orbital/surface buttons
  var blk1 = btns.addVertical()
  var row = blk1.addHorizontal()
  var bProgr  = xbtn row, "Progr.", def => mSrf.pressed ? ship.srfvel : ship.velocity
  var bRetro  = xbtn row, "Retro.", def => mSrf.pressed ? -ship.srfvel : -ship.velocity
  row = blk1.addHorizontal()
  var bNormal = xbtn row, "Normal", def => ship.velocity.cross ship.away
  var bAntiN  = xbtn row, "Anti-N", def => -ship.velocity.cross ship.away
  row = blk1.addHorizontal()
  var bRadOut = xbtn row, "Rad-OUT", def => ship.velocity.cross ship.away.cross ship.velocity
  var bRadIn  = xbtn row, "Rad-IN", def => -ship.velocity.cross ship.away.cross ship.velocity
  row = blk1.addHorizontal()
  var unlock = row.addExclusive2 "UNLOCK", lockdir.bind null
  unlock.flexWidth = 1
  unlock.flexHeight = 1
  unlock.pressed = true

//target buttons
  var blk2 = btns.addVertical()
  blk2.visible = false
  row = blk2.addHorizontal()
  var bTowards = xbtn row, "Towards", def
    var target = ship.target
    if target != null
      return target.position
    return ship.velocity
  var bAway = xbtn row, "Away Fr.", def
    var target = ship.target
    if target != null
      return -target.position
    return -ship.velocity

  row = blk2.addHorizontal()
  var bMatchSpeed = xbtn row, "Match Speed", def
    var dv
    var target = ship.target
    if target != null
      if target is types.part
        target = target.ship
      dv = target.velocity-ship.velocity
    else // circularization if no target
      var pos = ship.position - ship.body.position
      dv = math.sqrt(ship.body.mu/pos.size) * pos.cross(ship.velocity.cross pos).normalized - ship.velocity
    if dv.size < 0.01
      if ship == global.ship
        user.throttle = 0
      autopilot.throttle = nan
      unlock2.press
    else
      var d = dv.angle ship.forward // direction / face-angle error
      var e = d <= 1 ? 1 : math.deg.cos math.min 89.4, d^2.0 // min 0.0105
      autopilot.throttle = e * math.min ship == global.ship ? user.throttle : 0.5,
        dv.size * ship.mass / math.max 1, ship.engines.getThrust()
    return dv
  bMatchSpeed.flexWidth = 1

  row = blk2.addHorizontal()
  var bControlTarget = xbtn row, "Control Target", def
    var target = ship.target
    if target != null
      if target is types.part
        target = target.ship
      if target is types.ship
        var gui = control target
        gui.wnd.x = wnd.x
        gui.wnd.y = wnd.y + wnd.height * 2 < unity.screen.height ?
          wnd.y + wnd.height : wnd.y - wnd.height          
    unlock2.press
    return vector.none
  bControlTarget.flexWidth = 1

  row = blk2.addHorizontal()
  var unlock2 = row.addExclusive2 "UNLOCK", lockdir.bind null
  unlock2.flexWidth = 1
  unlock2.flexHeight = 1

//startup selection
  if "control_dir" in global
    var sel = global.control_dir
    global.control_dir = null
    if sel == "obt.prograde"
      bProgr.pressed = true

//staging
  self.stgsubs = system.idle def
    if ship != global.ship
      return
    if !stage.ready
      return
    var nextDecoupler = ship.parts.nextDecoupler
    if nextDecoupler == null
    //nothing to separate (using stage.pending is too dangerous in this script)
        return
    if nextDecoupler.isType "LaunchClamp"
    //not releasing launch clamps in this script
      return
    if !stage.engines.anyOperational
      print "No operational engine"
      stage
      return
    if stage.fuel <= 0.1
      print "Stage out of fuel"
      stage
      return

//main loop
  self.main = def
    if self.terminate
      if dirsubs != null
        dirsubs.remove
        dirsubs = null
      if stgsubs != null
        stgsubs.remove
        stgsubs = null
      autopilot.disable()
      wnd.dispose()
      guis.remove self
      return false
    if mObt.pressed and ship.altitude < math.max atmosphere.height/4, 1000
      mSrf.pressed = true
    if !blk1.visible and (mObt.pressed or mSrf.pressed)
      blk2.visible = false
      blk1.visible = true
      unlock.press
    if !blk2.visible and mTgt.pressed
      blk1.visible = false
      blk2.visible = true
      unlock2.press
    return true

  return self

control ship
try
  while guis.count > 0
    for var i = 0; i < guis.count
    //the gui can still be in the process of creation
      var main = guis[i].main
      if main == null or main()
        i++
    yield
finally
  for var gui in guis
    gui.terminate = true
    var dirsubs = gui.dirsubs
    gui.dirsubs = null
    if dirsubs != null
      dirsubs.remove
    var stgsubs = gui.stgsubs
    gui.stgsubs = null
    if stgsubs != null
      stgsubs.remove
    gui.wnd.dispose()
    gui.ship.autopilot.disable
  autopilot.disable
