// list of all active control guis
var guis = new list
// requests for new windows (better do that in main)
var reqs = new queue

def control ship, target, x, y
  var self = this ?? new object
  self.terminate = false
  self.ship = ship
  self.target = target
  self.dirsubs = null // system.update subscriptions for direction manipulation
  self.stgsubs = null // system.idle subscription for staging
  var wnd = new ui.window false, ui.layout.vertical
  self.wnd = wnd
  guis.add self
  wnd.x -= (unity.screen.width - 200) / 3
  if x != null then wnd.x = x
  if y != null then wnd.y = y
  wnd.title = "Control " + ship.name
  wnd.closed.add def
    self.terminate = true
  var autopilot = ship.autopilot

//mode vs. the rest
  var split = wnd.addHorizontal()
  split.padding = 0

//mode
  var mode = split.addVertical()
  def mbtn text
    var btn = mode.addExclusive text
    btn.width = 60
    return btn
  var mObt = mbtn "OBT" // orbital steering
  var mSrf = mbtn "SRF" // surface steering
  var mTgt = mbtn "TGT" // target steering and utils
  var mMan = mbtn "MAN" // maneuver execution
  var mNde = mbtn "NDE" // nodes only (+ "EXEC" button)
  mObt.pressed = true

//main content (buttons and footer)
  var main = split.addVertical()
  main.width = 163
  main.childAnchors = ui.anchors.fill
  var btns = main.addHorizontal() //TODO: stack
  btns.childAnchors = ui.anchors.fill

//helper for buttons that control direction
  def lockdir fn, btn
    if self.dirsubs != null
      self.dirsubs.remove
      self.dirsubs = null
    autopilot.disable
    if fn != null and (btn == null || btn.pressed)
      self.dirsubs = system.update def
        autopilot.direction = fn()
//create button that controls direction
  def xbtn parent, text, initOrSteer, steer
    if steer == null
      var btn = parent.addExclusive2 text, lockdir.bind initOrSteer
      btn.width = 80
      return btn
    var btn = parent.addExclusive2 text, def
      initOrSteer()
      lockdir steer, btn
    btn.width = 80
    return btn
//create button that manages the subscriptions on its own
  def cbtn parent, text, fn
    var btn = parent.addExclusive2 text, def btn
      if self.dirsubs != null
        self.dirsubs.remove
        self.dirsubs = null
      autopilot.disable
      if fn != null and (btn == null || btn.pressed)
        fn()
    btn.width = 80
    return btn

//orbital/surface buttons
  var blk1 = btns.addVertical()
  var row = blk1.addHorizontal()
  var bProgr  = xbtn row, "Progr.", def => mSrf.pressed ? ship.srfvel : ship.velocity
  var bRetro  = xbtn row, "Retro.", def
    if mObt.pressed
      return -ship.velocity
  //landing assist
    var rv = -ship.srfvel
    if rv.size < 1 then rv = ship.away
    if ship.altitude >= 10000 or ship.periapsis >= 0
      autopilot.throttle = nan
      return rv
    var acc = ship.engines.getThrust() / ship.mass
    if acc <= 0.001
      autopilot.throttle = nan
      return rv
    if rv.angle(ship.away) > 120
      autopilot.throttle = 0
      return rv
    autopilot.throttle = math.min user.throttle, rv.size / acc
    return rv

  row = blk1.addHorizontal()
  var bNormal = xbtn row, "Normal", def => ship.velocity.cross ship.away
  var bAntiN  = xbtn row, "Anti-N", def => -ship.velocity.cross ship.away
  row = blk1.addHorizontal()
  var bRadOut = xbtn row, "Rad-OUT", def => ship.velocity.cross ship.away.cross ship.velocity
  var bRadIn  = xbtn row, "Rad-IN", def => -ship.velocity.cross ship.away.cross ship.velocity
  row = blk1.addHorizontal()
  var unlock = row.addExclusive2 "UNLOCK", lockdir.bind null
  unlock.flexWidth = 1
  unlock.flexHeight = 1
  unlock.pressed = true

//target buttons
  var blk2 = btns.addVertical()
  blk2.visible = false
  row = blk2.addHorizontal()
  var bTowards = xbtn row, "Towards", def
    prevTgtBtn = bTowards
    var target = ship.target ?? self.target
    if target != null
      return target.position - ship.position
    autopilot.killRot = true
    return vector.none
  var bAway = xbtn row, "Away Fr.", def
    prevTgtBtn = bAway
    var target = ship.target ?? self.target
    if target != null
      return ship.position - target.position
    autopilot.killRot = true
    return vector.none

  row = blk2.addHorizontal()
  var bMatchSpeed = xbtn row, "Match Speed", def
    prevTgtBtn = bMatchSpeed
    var dv = vector.none
    var target = ship.target ?? self.target
    if target == null
      autopilot.killRot = true
    else
      if target is types.part
        target = target.ship
      dv = target.velocity-ship.velocity
      if dv.size >= 0.01
        var d = dv.angle ship.forward // direction / face-angle error
        var e = d <= 1 ? 1 : math.deg.cos math.min 89.4, d^2.0 // min 0.0105
        autopilot.throttle = e * math.min ship == global.ship ? user.throttle : 0.5,
          dv.size * ship.mass / math.max 1, ship.engines.getThrust()
      else
        if ship == global.ship
          user.throttle = 0
        autopilot.throttle = nan
        unlock2.press
    return dv
  bMatchSpeed.flexWidth = 1

  row = blk2.addHorizontal()
  var bControlTarget = xbtn row, "Control Target", def
    var target = ship.target ?? self.target
    if target != null
      if target is types.part
        target = target.ship
      if target is types.ship
        var rq = new object
        rq.ship = target
        rq.target = ship
        rq.x = wnd.x
        rq.y = wnd.y + wnd.height * 2 < unity.screen.height ?
          wnd.y + wnd.height : wnd.y - wnd.height
        reqs.push rq
    prevTgtBtn.press
    return vector.none
  bControlTarget.flexWidth = 1

  row = blk2.addHorizontal()
  var unlock2 = row.addExclusive2 "UNLOCK", lockdir.bind def
    prevTgtBtn = unlock2
    return vector.none
  unlock2.flexWidth = 1
  unlock2.flexHeight = 1
  var prevTgtBtn = unlock2

//maneuvers
  var blk3 = btns.addVertical()
  blk3.visible = false
  row = blk3.addHorizontal()
  var warpDelay
  var report
  var dvMin
  def execInit
    warpDelay = null
    report = null
    dvMin = inf
    ship.sas = true
  def execSteer
    if bAbort.pressed
      return
    unless mMan.pressed or mNde.pressed
      return
    var nde = node.next
    if nde == null
      bAbort.press
      return vector.none
    var dv = nde.deltav
    var xt = 0.5 * stage.burnTime dv.size
    var dt = nde.time - time() - xt
    var d = dv.angle ship.forward // direction / face-angle error
    var e = d <= 1 ? 1 : math.deg.cos math.min 89.4, d^2.0 // min 0.0105
    if dt > 30 and time.warp.ready
      if warpDelay == null
        warpDelay = time()
        ship.sas = true
      else if (time.since(warpDelay) >= 1 and d < 1
        and ship.angularVelocity.size < 0.1)
        warpDelay = null
        time.warp.to time() + dt - (dt > 600 ? 600 : 10)
      if report == null or time.since(report) >= 1
        report = time()
        print "DV: {0,4:F1} AD: {1,4:F1} AV: {2,5:F2}", dv.size, d, ship.angularVelocity.size
    autopilot.throttle = dt >= 1 ? 0 : (dt <= 0 ? 1 : 1-dt) * e *
      dv.size * ship.mass / math.max 1, ship.engines.getThrust()
    dvMin = math.min dvMin, dv.size
    if dvMin < 0.05
      nde.remove
      bAbort.press
    return dv
  var bExec = xbtn row, "EXEC", execInit, execSteer

  var bCirc = cbtn row, "CIRC", def
    while node.next != null
      node.next.remove
      wait
    var tm = time() + (ship.apoapsis > 0 and ship.timeToPe > ship.timeToAp and ship.eccentricity > 0.001 ?
      ship.timeToAp : ship.periapsis > math.max(atmosphere.height, 3000) and ship.eccentricity > 0.001 ?
      ship.timeToPe : 0)
    var pos = ship.positionAt(tm) - body.position
    var vel = ship.velocityAt(tm)
    var dv = math.sqrt(body.mu / pos.size) * pos.cross(vel.cross pos).normalized - vel
    new node tm, dv
    if mMan.pressed
      bExec.press
    else bAbort.press

  row = blk3.addHorizontal()
  var bHohm = cbtn row, "Hohmann", def
    var target = ship.target ?? self.target
    if target == null
      print "No target"
      bAbort.press
      return
    var our = ship
    var its = target
    if our.body != its.body
      if its.body != null and our.body.body == its.body
      //e.g. from Kerbin to Duna or from Mun to Minmus, calculate like if transfering Kerbin/Mun itself
        set our to our.body
      else if its.body != null and its.body.body != null and our.body.body == its.body.body
      //e.g. Kerbin to Ike, redirect to Duna
        set our to our.body
        set its to its.body
      else
        print "Incompatible orbits"
        bAbort.press
        return
    while node.next != null
      node.next.remove
      wait
    var r1 = our.semiMajorAxis
    var r2 = its.semiMajorAxis
    var pt = 0.5 * ((r1+r2) / (2*r2))^1.5
    var ft = pt - math.floor pt
  //angular distance that target will travel during transfer (if circular)
    var theta = 360 * ft
  //angles to universal reference direction
    var sa = our.lan + our.argumentOfPeriapsis + our.trueAnomaly
    var ta = its.lan + its.argumentOfPeriapsis + its.trueAnomaly
    var t0 = time()
  //match angle (+k*360)
    var ma = math.clamp360 ta+theta-sa-180
  //angle change rate (inaccurate for eccentric orbits but good for a start)
    var ar = 360/our.period - 360/its.period
  //estimated burn time
    var dv = math.sqrt(our.body.mu/r1) * (math.sqrt((2*r2)/(r1+r2)) - 1)
    var mt = 5+.5*dv*ship.mass/math.max(0.1,ship.engines.getThrust())
  //k closest to zero such that (ma + k*360)/ar >= mt
    var k = (mt*ar - ma)/360
  //closest integer
    if ar < 0 then k = math.floor k
    else k = math.ceiling k
  //time to node (exact if both orbits are perfectly circular)
    var dt = (ma+k*360)/ar
  //precise burn vector
    var t1 = t0+dt
    var v1 = our.velocityAt t1
    var p1 = our.positionAt(t1)-our.body.position
    var r1 = p1.size
  //https://en.wikipedia.org/wiki/Orbital_speed#Precise_orbital_speed
    var nv = p1.cross(v1.cross p1).normalized
    var v2 = math.sqrt(our.body.mu*(2/r1-2/(r1+r2))) * nv
    var dv = v2 - v1
    if our == ship
      new node t1, dv
    else
    // interplanetary or moon-to-moon transfer
      if our.body.body != null
      //moon to moon (e.g. Mun to Minmus)
      // We can no longer ignore the semi minor axis of departure hyperbolic
      // - this is very rough correction, needs some more work
        if r1 > r2 then r1 -= ship.semiMajorAxis*3
        else r1 += ship.semiMajorAxis*3
        v2 = math.sqrt(our.body.mu*(2/r1-2/(r1+r2))) * p1.cross(nv).normalized
        dv = v2 - v1

    //hyperbolic departure magnitude
      var pb = math.sqrt(dv.size^2+2*body.mu/ship.semiMajorAxis) - math.sqrt(body.mu/ship.semiMajorAxis)
      var mt = 5+.5*pb*ship.mass/math.max(0.1,ship.engines.getThrust())
    //correction for optimal angle
      var ca = (ship.positionAt(t1)-body.position).angle(v2, nv) - 90 -
        math.deg.asin(1/(1+ship.semiMajorAxis*dv.size^2/body.mu))
      if r2 < r1 then ca += ca+180
      ca = math.clamp360 ca
    //finalize eta and add node
      t1 += ca/360*ship.period
      if ca > 180 and t1 - ship.period > mt
        t1 -= ship.period
      new node t1, pb
    
    if mMan.pressed
      bExec.press
    else bAbort.press

  var bIncline = cbtn row, "Incline", def
    while node.next != null
      node.next.remove
      wait
    var di = 0 // inclination difference (target-current)
    var ta = 0 // angle from periapsis to DN (burn in normal direction here)
    var t0 = time()
    var i0 = ship.inclination
    var sp = ship.position - body.position
    var sv = ship.velocity
    var sn = sv.cross sp
    var target = ship.target ?? self.target
    if target == null
      di = -i0
      ta = -ship.argumentOfPeriapsis
    else
      var i1 = target.inclination
      var tp = target.position - body.position
      var tv = target.velocity
      var tn = tv.cross tp
      var ln = tn.cross sn
      di = sn.angle tn, ln
      ta = sp.angle ln, sn
      ta += ship.trueAnomaly
    ta = math.clamp360 ta
    if math.clamp360(ta-ship.trueAnomaly) > 180
      ta = math.clamp360(ta+180)
      di = -di
    var dt = ship.timeToTrueAnomaly ta
    var t1 = t0 + dt
    var v1 = ship.velocityAt t1
    var dv = v1.rotate(-di, ship.positionAt(t1) - body.position) - v1

    if dt < 5+.5*stage.burnTime dv.size
      ta = math.clamp360 ta+180
      di = -di
      dt = ship.timeToTrueAnomaly ta
      t1 = t0 + dt
      v1 = ship.velocityAt t1
      dv = v1.rotate(-di, ship.positionAt(t1) - body.position) - v1
    new node t1, dv
    
    if mMan.pressed
      bExec.press
    else bAbort.press
    
  row = blk3.addHorizontal()
  var bAbort = xbtn row, "ABORT"
  bAbort.flexWidth = 1
  bAbort.flexHeight = 1

//startup selection
  if "control_dir" in global
    var sel = global.control_dir
    global.control_dir = null
    if sel == "obt.prograde"
      bProgr.pressed = true

//staging
  self.stgsubs = system.idle def
    if ship != global.ship
      return
    if !stage.ready
      return
    if stage.pending
    //not using that in this script
      return
    if ship.engines.count == 0
    //no point in staging if there is no engine
      return
    var nextDecoupler = ship.parts.nextDecoupler
    if nextDecoupler == null
        return
    if nextDecoupler.isType "LaunchClamp"
    //not releasing launch clamps in this script
      return
    if !stage.engines.anyOperational
      print "No operational engine"
      stage
      return
    if stage.fuel <= 0.1
      print "Stage out of fuel"
      stage
      return

//main loop
  self.main = def
    if self.terminate
      if self.dirsubs != null
        self.dirsubs.remove
        self.dirsubs = null
      if self.stgsubs != null
        self.stgsubs.remove
        self.stgsubs = null
      autopilot.disable()
      wnd.dispose()
      guis.remove self
      return false
    if mObt.pressed and ship.altitude < math.max atmosphere.height/4, 1000
      mSrf.pressed = true
    if !blk1.visible and (mObt.pressed or mSrf.pressed)
      blk2.visible = false
      blk3.visible = false
      blk1.visible = true
      unlock.press
    if !blk2.visible and mTgt.pressed
      blk1.visible = false
      blk3.visible = false
      blk2.visible = true
      unlock2.press
    if !blk3.visible and (mMan.pressed or mNde.pressed)
      blk1.visible = false
      blk2.visible = false
      blk3.visible = true
      lockdir //null, null - disable current
      bAbort.press
      
    //remember last target
    self.target = ship.target ?? self.target
    //visual hint which ship is active
    wnd.alpha = ship == global.ship ? 0.9 : 0.7
    return true

  wnd.visible = true
  return self

control ship
try
  while guis.count > 0
    for var i = 0; i < guis.count
      if guis[i].main(); i++
    if reqs.count > 0
      var rq = reqs.pop()
      control rq.ship, rq.target, rq.x, rq.y
    wait
finally
  for var gui in guis
    gui.terminate = true
    var dirsubs = gui.dirsubs
    gui.dirsubs = null
    if dirsubs != null
      dirsubs.remove
    var stgsubs = gui.stgsubs
    gui.stgsubs = null
    if stgsubs != null
      stgsubs.remove
    gui.wnd.dispose()
    gui.ship.autopilot.disable
  autopilot.disable
