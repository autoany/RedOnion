use bee.run, sys, ms.vs.testTools.unitTesting
pkg bee.tests

//	return
//	return a && b
//	if cond then break
//	if cond: v = true\nelse v = false
//	var x = 0\nvar y = x\nvar z int = x\nvar i: int
//	while loop do loop = action()
//	do again = action()\nuntil again
//	do again = action() until again
//	do again = action(); until again
//	for var i = 0; i < 5; i++; loop()
//	try it(); catch: print exception; finally: fin()
//	switch x: case 0: break; case 1: return; default: continue

def beeStatementCodeTests beeCodeTestsBase
; testClass

	test, string
		unit string

	CS01_return
	; testMethod

		test "return"

		check  0, byte! opcode.return
		check  1, byte! opcode.undef
		check  2

	CS02_return_expr
	; testMethod

		test "return a && b"

		check  0, byte! opcode.return
		check  1, byte! opcode.logicAnd
		check  2, byte! opcode.ident
		check  3, byte! 1
		check  4, byte! 'a'
		check  5, 3
		check  9, byte! opcode.ident
		check 10, byte! 1
		check 11, byte! 'b'
		check 12

	CS03_ifbreak
	; testMethod

		test "if cond then break"

		check  0, byte! opcode.if
		check  1, byte! opcode.ident
		check  2, byte! 4
		check  7, 1
		check 11, byte! opcode.break
		check 12

	CS04_ifelse
	; testMethod

		test "if cond: v = true\nelse v = false"

		check  0, byte! opcode.if
		check  1, byte! opcode.ident
		check  2, byte! 4
		check  7, 5
		check 11, byte! opcode.assign
		check 12, byte! opcode.ident
		check 13, byte! 1
		check 14, byte! 'v'
		check 15, byte! opcode.true
		check 16, byte! opcode.else
		check 17, 5
		check 21, byte! opcode.assign
		check 22, byte! opcode.ident
		check 23, byte! 1
		check 24, byte! 'v'
		check 25, byte! opcode.false
		check 26

	CS05_var
	; testMethod

		test \
			"var x = 1\n" +
			"var y = x\n" +
			"var z int = x\n" +
			"var i: int"

		check  0,  byte! opcode.var
		check  1,  byte! 1
		check  2,  byte! 'x'
		check  3,  byte! opcode.undef
		check  4,  byte! opcode.int
		check  5,  1

		check  9, byte! opcode.var
		check 10, byte! 1
		check 11, byte! 'y'
		check 12, byte! opcode.undef
		check 13, byte! opcode.ident
		check 14, byte! 1
		check 15, byte! 'x'

		check 16, byte! opcode.var
		check 17, byte! 1
		check 18, byte! 'z'
		check 19, byte! opcode.int
		check 20, byte! opcode.ident
		check 21, byte! 1
		check 22, byte! 'x'

		check 23, byte! opcode.var
		check 24, byte! 1
		check 25, byte! 'i'
		check 26, byte! opcode.int
		check 27, byte! opcode.undef
		check 28

	CS06_while
	; testMethod

		test "while loop do loop = action()"

		check  0, byte! opcode.while
		check  1, byte! opcode.ident
		check  2, byte! 4

		check 11, byte! opcode.assign
		check 12, byte! opcode.ident

		check 18, byte! opcode.ecall
		check 19, byte! opcode.ident
		check 20, byte! 6
		check 27


	CS07_dountil_v1
	; testMethod
		test "do again = action()\nuntil again"
		CS07_dountil_code()
	CS07_dountil_v2
	; testMethod
		test "do again = action() until again"
		CS07_dountil_code()
	CS07_dountil_v3
	; testMethod
		test "do again = action(); until again"
		CS07_dountil_code()

	CS07_dountil_code

		check  0, byte! opcode.dountil

		check  5, byte! opcode.assign
		check  6, byte! opcode.ident
		check  7, byte! 5

		check 13, byte! opcode.ecall
		check 14, byte! opcode.ident
		check 15, byte! 6

		check 22, byte! opcode.ident
		check 23, byte! 5
		check 29

	CS08_for
	; testMethod

		test "for var i = 0; i < 5; i++; loop()"

		check  0, byte! opcode.for
		check  1, byte! opcode.var
		check  2, byte! 1
		check  3, byte! 'i'
		check  4, byte! opcode.undef
		check  5, byte! opcode.int
		check  6, 0

		check 10, byte! opcode.less
		check 11, byte! opcode.ident
		check 12, byte! 1
		check 13, byte! 'i'
		check 14, byte! opcode.int
		check 15, 5

		check 23, byte! opcode.postInc
		check 24, byte! opcode.ident
		check 25, byte! 1
		check 26, byte! 'i'
		check 19, 4

		check 31, byte! opcode.ecall
		check 32, byte! opcode.ident
		check 38

	CS09_catch
	; testMethod

		test "try it(); catch: print exception; finally: fin()"

		check  0, byte! opcode.catch

		check  5, byte! opcode.ecall
		check  6, byte! opcode.ident
		check  7, byte! 2

		check 14, byte! opcode.undef
		check 15, byte! 0

		check 20, byte! opcode.call
		check 21, byte! opcode.ident
		check 22, byte! 5
		check 28, byte! opcode.exception

		check 33, byte! opcode.ecall
		check 34, byte! opcode.ident
		check 35, byte! 3
		check 39

	CS10_switch
	; testMethod

		test "switch x: case 0: break; case 1: return; default: continue"

		check  0, byte! opcode.switch
		check  1, byte! opcode.ident
		check  2, byte! 1
		check  3, byte! 'x'

		check  8, byte! opcode.int
		check  9, 0

		check 17, byte! opcode.break
