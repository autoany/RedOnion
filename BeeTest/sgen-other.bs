use ms.vs.testTools.unitTesting, sys: text
pkg bee.tests

def beeFullSourceGeneratorTests beeFullSourceGeneratorTestsBase
; testClass

	.ctor
		csgen.aliasing = csGenerator.alias.exceptLocal
	init
	; testInitialize
		csgen.defClassAccess = run.tflag.none
		csgen.defMethodAccess = run.tflag.none

	GU01_import
	; testMethod

		test \
			"import sys",
		//C#
			"using System;",
		//B#
			"use sys"
		
		test \
			"use sys, ms",
		//C#
			"using System;\n" +
			"using Microsoft;",
		//B#
			"use sys\n" +
			"use ms"
		
		test \
			"using sys: io",
		//C#
			"using System;\n" +
			"using System.IO;",
		//B#
			"use sys\n" +
			"use sys.io"
		
		test \
			"import sys: io, text;",
		//C#
			"using System;\n" +
			"using System.IO;\n" +
			"using System.Text;",
		//B#
			"use sys\n" +
			"use sys.io\n" +
			"use sys.text"
		
		test \
			"use sys: lang, cols: gen;;",
		//C#
			"using System;\n" +
			"using System.Globalization;\n" +
			"using System.Collections;\n" +
			"using System.Collections.Generic;",
		//B#
			"use sys\n" +
			"use sys.lang\n" +
			"use sys.cols\n" +
			"use sys.cols.gen"
		
		test \
			"using\nsys:\ndiag,\nrun:\ninter",
		//C#
			"using System;\n" +
			"using System.Diagnostics;\n" +
			"using System.Runtime;\n" +
			"using System.Runtime.InteropServices;",
		//B#
			"use sys\n" +
			"use sys.diag\n" +
			"use sys.run\n" +
			"use sys.run.inter"

		test \
			"use bee; using eto.forms;\nimport ms.vs:\ntest",
		//C#
			"using Bee;\n" +
			"using Eto.Forms;\n" +
			"using Microsoft.VisualStudio;\n" +
			"using Microsoft.VisualStudio.TestTools.UnitTesting;",
		//B#
			"use bee\n" +
			"use eto.forms\n" +
			"use ms.vs\n" +
			"use ms.vs.test"

//##################################################################################################

	GU02_class
	; testMethod

		test \
			"def type",
			"class Type {}"

		test \
			"def type: struct",
			"struct Type {}",
			"def type struct"

		test \
			"interface type",
			"interface Type {}",
			"def type interface"
		test \
			"type enum",
			"enum Type {}",
			"def type enum"

		test \
			"program static class",
			"static class Program {}",
			"def program static"
		test \
			"public static unsafe partial class program",
			"public static unsafe partial class Program {}",
			"def program public static partial unsafe"
		test \
			"public, static,, unsafe, partial,, class, program",
			"public static unsafe partial class Program {}",
			"def program public static partial unsafe"
		test \
			"program class: public, static:,:, unsafe,:, partial",
			"public static unsafe partial class Program {}",
			"def program public static partial unsafe"
		test \
			"class:\nprogram: public: static,\n:unsafe, partial",
			"public static unsafe partial class Program {}",
			"def program public static partial unsafe"

	GU03_inherit
	; testMethod

		test \
			"def a b",
			"class A: B {}"

		test \
			"enum e: byte",
			"enum E: byte {}",
			"def e enum byte"

		test \
			"interface a:b,c",
			"interface A: B, C {}",
			"def a interface b c"

		test \
			"class a:,\n\n,\n:b:,\n:,:c",
			"class A: B, C {}",
			"def a b c"

//##################################################################################################

	GU04_field
	; testMethod

		test \
			"def a\n" +
			"	var x int",

			"class A\n" +
			"{\n" +
			"	int X;\n" +
			"}"

		test \
			"def test\n" +
			"	static var data\n" +
			"	var static data2\n" +
			"	var data3 static",

			"class Test\n" +
			"{\n" +
			"	static Data Data;\n" +
			"	static Data2 Data2;\n" +
			"	static Data3 Data3;\n" +
			"}",

			"def test\n" +
			"	var data static\n" +
			"	var data2 static\n" +
			"	var data3 static"

		test \
			"def test\n" +
			"	event handler eventHandler.[eventArgs]\n" +
			"	readonly static data\n" +
			"	const c int = 1",

			"class Test\n" +
			"{\n" +
			"	event EventHandler<EventArgs> Handler;\n" +
			"	static readonly Data Data;\n" +
			"	const int C = 1;\n" +
			"}",

			"def test\n" +
			"	event handler eventHandler.[eventArgs]\n" +
			"	var data static readonly\n" +
			"	const c int = 1"

	GU05_method
	; testMethod

		csgen.defMethodAccess = run.tflag.public
		test \
			"def program static\n" +
			"	main\n" +
			"		return",

			"static class Program\n" +
			"{\n" +
			"	public void Main()\n" +
			"	{\n" +
			"		return;\n" +
			"	}\n" +
			"}"

		test \
			"def mystery\n" +
			"	secret int, input int private\n" +
			"		if input & 1 != 0\n" +
			"			input = 3 * input + 1\n" +
			"		return input >> 1\n" +
			"	steps int, input int\n" +
			"		var n = 0\n" +
			"		while input > 1\n" +
			"			input = secret input\n" +
			"		return n",

			"class Mystery\n" +
			"{\n" +
			"	private int Secret(int input)\n" +
			"	{\n" +
			"		if ((input & 1) != 0)\n" +
			"		{\n" +
			"			input = 3 * input + 1;\n" +
			"		}\n" +
			"		return input >> 1;\n" +
			"	}\n" +
			"	public int Steps(int input)\n" +
			"	{\n" +
			"		var n = 0;\n" +
			"		while (input > 1)\n" +
			"		{\n" +
			"			input = Secret(input);\n" +
			"		}\n" +
			"		return n;\n" +
			"	}\n" +
			"}"

		test \
			"def short\n" +
			"	nothing() return\n",

			"class Short\n" +
			"{\n" +
			"	public void Nothing()\n" +
			"	{\n" +
			"		return;\n" +
			"	}\n" +
			"}",

			"def short\n" +
			"	nothing\n" +
			"		return"

	GU06_property
	; testMethod

		test \
			"def p\n" +
			"	var _name string\n" +
			"	name string\n" +
			"		get\n" +
			"			return _name\n" +
			"		set\n" +
			"			_name = value\n",

			"class P\n" +
			"{\n" +
			"	string _name;\n" +
			"	public string Name\n" +
			"	{\n" +
			"		get\n" +
			"		{\n" +
			"			return _name;\n" +
			"		}\n" +
			"		set\n" +
			"		{\n" +
			"			_name = value;\n" +
			"		}\n" +
			"	}\n" +
			"}"
