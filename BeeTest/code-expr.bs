use bee.run, sys, ms.vs.testTools.unitTesting
pkg bee.tests

//	x + 1
//	1 + x * 3
//	abs(-1)
//	abs -1
//	fn(x,y)
//	fn x,y
//	fn(null, this, base.field)
//	fn null, this, base.field
//	cond ? true : false
//	++x--
//	"string" + 'c'
//  f -g x

def beeCodeTestsBase codeGenerator

	cint int, int
		return bits.int code, int
	cfloat float, int
		return bits.float code, int
	clong long, int
		return bits.long code, int
	cdouble double, int
		return bits.double code, int

	check, at int, byte
		assert.isTrue	at < codeAt, "code: {0} >= {1}", at, codeAt
		assert.areEqual byte, code[at], "code[{0}] = 0x{1:X2} ! 0x{2:X2}", at, code[at], byte
	check, at int, int
		assert.areEqual int,  cint(at), "cint({0})", at
	check, at int, float
		assert.areEqual float,  cfloat(at), "cfloat({0})", at
	check, at int, long
		assert.areEqual long,  clong(at), "clong({0})", at
	check, at int, double
		assert.areEqual double,  cdouble(at), "cdouble({0})", at
	check, at int
		assert.areEqual at, codeAt, "codeAt"

	vcheck, at int, byte
		assert.isTrue	at < valsAt, "vals: {0} >= {1}", at, valsAt
		assert.areEqual byte, vals[at], "vals[{0}] = 0x{1:X2} ! 0x{2:X2}", at, vals[at], byte
	vcheck, at int, int
		assert.isTrue	at+4 <= valsAt, "vals: {0} > {1}-4", at, valsAt
		assert.areEqual int, (bits.int vals, at), "vint({0})", at
	vcheck, at int, float
		assert.isTrue	at+4 <= valsAt, "vals: {0} > {1}-4", at, valsAt
		assert.areEqual float, (bits.float vals, at), "vfloat({0})", at
	vcheck, at int, long
		assert.isTrue	at+4 <= valsAt, "vals: {0} > {1}-4", at, valsAt
		assert.areEqual long, (bits.long vals, at), "vlong({0})", at
	vcheck, at int, double
		assert.isTrue	at+4 <= valsAt, "vals: {0} > {1}-4", at, valsAt
		assert.areEqual double, (bits.double vals, at), "vdouble({0})", at
	vtopmk, at int, int
		assert.isTrue	at < valsAt, "vals: {0} >= {1}", at, valsAt
		assert.areEqual int, topInt(at), "vtop {0}", at
	vtopmk, int
		assert.areEqual int, topInt(), "vtop"
	vfinal, int
		assert.areEqual int, valsAt, "valsAt"
		vtopmk 0


def beeExpressionCodeTests beeCodeTestsBase
; testClass

	test, string
	//	want to call rewrite later, once we check vals
		try
			parser.line = string
			parser.expression()
		catch e exception
			raise exception String.format("{0}: {1}; IN: <{2}>",
				e.getType().toString(), e.Message, string), e

	CX01_add
	; testMethod

		test "x + 1"

		vcheck  0, byte! 'x'
		vcheck  1, byte! opcode.ident
		vtopmk  6, 0
		vcheck  6, 1
		vcheck 10, byte! opcode.int
		vtopmk 15, 6
		vcheck 15, byte! opcode.add
		vfinal 20

		rewrite valsAt
		check  0, byte! opcode.add
		check  1, byte! opcode.ident
		check  2, byte! 1
		check  3, byte! 'x'
		check  4, byte! opcode.int
		check  5, 1
		check  9

	CX02_addmul
	; testMethod

		test "1u + x * 3f"

		vcheck  0, 1
		vcheck  4, byte! opcode.uint
		vtopmk  9, 0
		vcheck  9, byte! 'x'
		vcheck 10, byte! opcode.ident
		vtopmk 15, 9
		vcheck 15, 3f
		vcheck 19, byte! opcode.float
		vtopmk 24, 15
		vcheck 24, byte! opcode.mul
		vtopmk 29, 9
		vcheck 29, byte! opcode.add
		vfinal 34		

		rewrite valsAt
		check  0, byte! opcode.add
		check  1, byte! opcode.uint
		check  2, 1
		check  6, byte! opcode.mul
		check  7, byte! opcode.ident
		check  8, byte! 1
		check  9, byte! 'x'
		check 10, byte! opcode.float
		check 11, 3f
		check 15

	CX03_paren
	; testMethod

		test "(1L + x) * 3.0"

		vcheck  0, 1L
		vcheck  8, byte! opcode.long
		vtopmk 13, 0
		vcheck 13, byte! 'x'
		vcheck 14, byte! opcode.ident
		vtopmk 19, 13
		vcheck 19, byte! opcode.add
		vtopmk 24, 0
		vcheck 24, 3.0
		vcheck 32, byte! opcode.double
		vtopmk 37, 24
		vcheck 37, byte! opcode.mul
		vfinal 42

		rewrite valsAt
		check  0, byte! opcode.mul
		check  1, byte! opcode.add
		check  2, byte! opcode.long
		check  3, 1L
		check 11, byte! opcode.ident
		check 12, byte! 1
		check 13, byte! 'x'
		check 14, byte! opcode.double
		check 15, 3.0
		check 23

	CX04_ternary
	; testMethod
		test "cond ? true : false"

		vcheck  0, byte! 'c'
		vcheck  3, byte! 'd'
		vcheck  4, byte! opcode.ident
		vtopmk  9, 0
		vcheck  9, byte! opcode.true
		vtopmk 14, 9
		vcheck 14, byte! opcode.false
		vtopmk 19, 14
		vcheck 19, byte! opcode.ternary
		vfinal 24

		rewrite valsAt
		check  0, byte! opcode.ternary
		check  1, byte! opcode.ident
		check  2, byte! 4
		check  3, byte! 'c'
		check  6, byte! 'd'
		check  7, 1
		check 11, byte! opcode.true
		check 12, 1
		check 16, byte! opcode.false
		check 17

	CX05_uncall_v1
	; testMethod
		test "abs(-1)"
		CX05_uncall()

	CX05_uncall_v2
	; testMethod
		test "abs -1"
		CX05_uncall()

	CX05_uncall
		vcheck  0, byte! 'a'
		vcheck  3, byte! opcode.ident
		vtopmk  8, 0
		vcheck  8, -1
		vcheck 12, byte! opcode.int
		vtopmk 17, 8
		vcheck 17, byte! opcode.call
		vfinal 22

		rewrite valsAt
		check  0, byte! opcode.call
		check  1, byte! opcode.ident
		check  2, byte! 3
		check  3, byte! 'a'
		check  6, byte! opcode.int
		check  7, -1
		check 11

	CX06_call2_v1
	; testMethod
		test "fn(x,y)"
		CX06_call2()

	CX06_call2_v2
	; testMethod
		test "fn x,y"
		CX06_call2()

	CX06_call2
		vcheck  0, byte! 'f'
		vcheck  1, byte! 'n'
		vcheck  2, byte! opcode.ident
		vtopmk  7, 0
		vcheck  7, byte! 'x'
		vcheck  8, byte! opcode.ident
		vtopmk 13, 7
		vcheck 13, byte! 'y'
		vcheck 14, byte! opcode.ident
		vtopmk 19, 13
		vcheck 19, byte! opcode.call2
		vfinal 24

		rewrite valsAt
		check  0, byte! opcode.call2
		check  1, byte! opcode.ident
		check  2, byte! 2
		check  3, byte! 'f'
		check  4, byte! 'n'
		check  5, byte! opcode.ident
		check  6, byte! 1
		check  7, byte! 'x'
		check  8, byte! opcode.ident
		check  9, byte! 1
		check 10, byte! 'y'
		check 11

	CX07_mcall_v1
	; testMethod
		test "fn(null, this, base.field)"
		CX07_mcall()

	CX07_mcall_v2
	; testMethod
		test "fn null, this, base.field"
		CX07_mcall()

	CX07_mcall
		vcheck  0, byte! 'f'
		vcheck  1, byte! 'n'
		vcheck  2, byte! opcode.ident
		vtopmk  7, 0
		vcheck  7, byte! opcode.null
		vtopmk 12, 7
		vcheck 12, byte! opcode.this
		vtopmk 17, 12
		vcheck 17, byte! opcode.base
		vtopmk 22, 17
		vcheck 22, byte! 'f'
		vcheck 26, byte! 'd'
		vcheck 27, byte! opcode.ident
		vtopmk 32, 22
		vcheck 32, byte! opcode.dot
		vtopmk 37, 17
		vcheck 37, byte! 4
		vcheck 38, byte! opcode.mcall
		vfinal 43

		rewrite valsAt
		check  0, byte! opcode.mcall
		check  1, byte! 4
		check  2, byte! opcode.ident
		check  3, byte! 2
		check  4, byte! 'f'
		check  5, byte! 'n'
		check  6, byte! opcode.null
		check  7, byte! opcode.this
		check  8, byte! opcode.dot
		check  9, byte! opcode.base
		check 10, byte! 5
		check 11, byte! 'f'
		check 15, byte! 'd'
		check 16

	CX08_calls
	; testMethod

		test "f g(x), h y"

		vcheck  0, byte! 'f'
		vcheck  1, byte! opcode.ident
		vtopmk  6, 0
		vcheck  6, byte! 'g'
		vcheck  7, byte! opcode.ident
		vtopmk 12, 6
		vcheck 12, byte! 'x'
		vcheck 13, byte! opcode.ident
		vtopmk 18, 12
		vcheck 18, byte! opcode.call
		vtopmk 23, 6
		vcheck 23, byte! 'h'
		vcheck 24, byte! opcode.ident
		vtopmk 29, 23
		vcheck 29, byte! 'y'
		vcheck 30, byte! opcode.ident
		vtopmk 35, 29
		vcheck 35, byte! opcode.call
		vtopmk 40, 23
		vcheck 40, byte! opcode.call2
		vfinal 45

		rewrite valsAt
		check  0, byte! opcode.call2
		check  1, byte! opcode.ident
		check  2, byte! 1
		check  3, byte! 'f'
		check  4, byte! opcode.call
		check  5, byte! opcode.ident
		check  6, byte! 1
		check  7, byte! 'g'
		check  8, byte! opcode.ident
		check  9, byte! 1
		check 10, byte! 'x'
		check 11, byte! opcode.call
		check 12, byte! opcode.ident
		check 13, byte! 1
		check 14, byte! 'h'
		check 15, byte! opcode.ident
		check 16, byte! 1
		check 17, byte! 'y'
		check 18

	CX09_calls2
	; testMethod

		test "f (g x, y), z, h()"

		vcheck  0, byte! 'f'
		vcheck  1, byte! opcode.ident
		vtopmk  6, 0
		vcheck  6, byte! 'g'
		vcheck  7, byte! opcode.ident
		vtopmk 12, 6
		vcheck 12, byte! 'x'
		vcheck 13, byte! opcode.ident
		vtopmk 18, 12
		vcheck 18, byte! 'y'
		vcheck 19, byte! opcode.ident
		vtopmk 24, 18
		vcheck 24, byte! opcode.call2
		vtopmk 29, 6
		vcheck 29, byte! 'z'
		vcheck 30, byte! opcode.ident
		vtopmk 35, 29
		vcheck 35, byte! 'h'
		vcheck 36, byte! opcode.ident
		vcheck 37, byte! opcode.ecall
		vtopmk 42, 35
		vcheck 42, byte! 4
		vcheck 43, byte! opcode.mcall
		vfinal 48

		rewrite valsAt
		check  0, byte! opcode.mcall
		check  1, byte! 4
		check  2, byte! opcode.ident
		check  3, byte! 1
		check  4, byte! 'f'
		check  5, byte! opcode.call2
		check  6, byte! opcode.ident
		check  7, byte! 1
		check  8, byte! 'g'
		check  9, byte! opcode.ident
		check 10, byte! 1
		check 11, byte! 'x'
		check 12, byte! opcode.ident
		check 13, byte! 1
		check 14, byte! 'y'
		check 15, byte! opcode.ident
		check 16, byte! 1
		check 17, byte! 'z'
		check 18, byte! opcode.ecall
		check 19, byte! opcode.ident
		check 20, byte! 1
		check 21, byte! 'h'
		check 22

	CX10_prepost
	; testMethod
		test "++x--"

		vcheck  0, byte! 'x'
		vcheck  1, byte! opcode.ident
		vcheck  2, byte! opcode.inc
		vcheck  3, byte! opcode.postDec
		vfinal  8

		rewrite valsAt
		check  0, byte! opcode.postDec
		check  1, byte! opcode.inc
		check  2, byte! opcode.ident
		check  5

	CX11_strchar
	; testMethod
		test "\"string\" + 'c'"

		vcheck  0, byte! 's'
		vcheck  5, byte! 'g'
		vcheck  6, byte! opcode.string
		vtopmk 11, 0
		vcheck 11, byte! 'c'
		vcheck 12, byte! opcode.char
		vtopmk 17, 11
		vcheck 17, byte! opcode.add
		vfinal 22

		rewrite valsAt
		check  0, byte! opcode.add
		check  1, byte! opcode.string
		check  2, byte! 6
		check  9, byte! opcode.char
		check 10, byte! 'c'
		check 11

	CX12_unarg
	; testMethod
		test "f -x"

		assert.areEqual byte! 'f',				vals[0]
		assert.areEqual byte! opcode.ident,		vals[1]
		assert.areEqual 0, topInt 6
		assert.areEqual byte! 'x',				vals[6]
		assert.areEqual byte! opcode.ident,		vals[7]
		assert.areEqual byte! opcode.neg,		vals[8]
		assert.areEqual 6, topInt 13
		assert.areEqual 0, topInt()
		assert.areEqual 18, valsAt

		rewrite valsAt
		assert.areEqual byte! opcode.call,		code[0]
		assert.areEqual byte! opcode.ident,		code[1]
		assert.areEqual byte! 1,				code[2]
		assert.areEqual byte! 'f',				code[3]
		assert.areEqual byte! opcode.neg,		code[4]
		assert.areEqual byte! opcode.ident,		code[5]
		assert.areEqual byte! 1,				code[6]
		assert.areEqual byte! 'x',				code[7]
		assert.areEqual 8, codeAt

//	variable declaration moved to expressions
	CX13_var1
	; testMethod
		test "var x"
		assert.areEqual byte! 'x',				vals[0]
		assert.areEqual byte! opcode.ident,		vals[1]
		assert.areEqual 0, topInt 6
		assert.areEqual byte! opcode.undef,		vals[6]
		assert.areEqual 6, topInt 11
		assert.areEqual byte! opcode.undef,		vals[11]
		assert.areEqual 11, topInt 16
		assert.areEqual byte! opcode.var,		vals[16]
		assert.areEqual 0, topInt()

		rewrite valsAt
		assert.areEqual byte! opcode.var,		code[0]
		assert.areEqual byte! 1,				code[1]
		assert.areEqual byte! 'x',				code[2]
		assert.areEqual byte! opcode.undef,		code[3]
		assert.areEqual byte! opcode.undef,		code[4]
		assert.areEqual 5, codeAt

	CX14_var2
	; testMethod
		test "var x int"
		vcheck  0, byte! 'x'
		vcheck  1, byte! opcode.ident
		vtopmk  6, 0
		vcheck  6, byte! opcode.int
		vtopmk 11, 6
		vcheck 11, byte! opcode.undef
		vtopmk 16, 11
		vcheck 16, byte! opcode.var
		vfinal 21

		rewrite valsAt
		check 0, byte! opcode.var
		check 1, byte! 1
		check 2, byte! 'x'
		check 3, byte! opcode.int
		check 4, byte! opcode.undef
		check 5

	CX15_array
	; testMethod
		test "var a byte[]"
		vcheck  0, byte! 'a'
		vcheck	1, byte! opcode.ident
		vtopmk	6, 0
		vcheck	6, byte! opcode.byte
		vtopmk 11, 6
		vcheck 11, byte! 1
		vcheck 12, byte! opcode.array
		vtopmk 17, 6
		vcheck 17, byte! opcode.undef
		vtopmk 22, 17
		vcheck 22, byte! opcode.var
		vfinal 27

		rewrite valsAt
		check 0, byte! opcode.var
		check 1, byte! 1
		check 2, byte! 'a'
		check 3, byte! opcode.array
		check 4, byte! 1
		check 5, byte! opcode.byte
		check 6, byte! opcode.undef
		check 7

	CX16_array_create
	; testMethod
		test "var a = new byte[n]"
		vcheck  0, byte! 'a'
		vcheck  1, byte! opcode.ident
		vtopmk  6, 0
		vcheck  6, byte! opcode.undef
		vtopmk 11, 6
		vcheck 11, byte! opcode.byte
		vtopmk 16, 11
		vcheck 16, byte! 'n'
		vcheck 17, byte! opcode.ident
		vtopmk 22, 16
		vcheck 22, byte! 2
		vcheck 23, byte! opcode.array
		vcheck 24, byte! opcode.create
		vtopmk 29, 11
		vcheck 29, byte! opcode.var
		vfinal 34

		rewrite valsAt
		check  0, byte! opcode.var
		check  1, byte! 1
		check  2, byte! 'a'
		check  3, byte! opcode.undef
		check  4, byte! opcode.create
		check  5, byte! opcode.array
		check  6, byte! 2
		check  7, byte! opcode.byte
		check  8, byte! opcode.ident
		check  9, byte! 1
		check 10, byte! 'n'
		check 11

	CX17_generic
	; testMethod
		test "var a list.[byte]"
		vcheck	0, byte! 'a'
		vcheck	1, byte! opcode.ident
		vtopmk	6, 0
		vcheck  6, byte! 'l'
		vcheck 10, byte! opcode.ident
		vtopmk 15, 6
		vcheck 15, byte! opcode.byte
		vtopmk 20, 15
		vcheck 20, byte! 2
		vcheck 21, byte! opcode.generic
		vtopmk 26, 6
		vcheck 26, byte! opcode.undef
		vtopmk 31, 26
		vcheck 31, byte! opcode.var
		vfinal 36

		rewrite valsAt
		check  0, byte! opcode.var
		check  1, byte! 1
		check  2, byte! 'a'
		check  3, byte! opcode.generic
		check  4, byte! 2
		check  5, byte! opcode.ident
		check  6, byte! 4
		check  7, byte! 'l'
		check 11, byte! opcode.byte
		check 12, byte! opcode.undef
		check 13

	CX18_generic_create
	; testMethod
		test "var a = new list.[byte]"
		vcheck	0, byte! 'a'
		vcheck	1, byte! opcode.ident
		vtopmk	6, 0
		vcheck  6, byte! opcode.undef
		vtopmk 11, 6
		vcheck 11, byte! 'l'
		vcheck 15, byte! opcode.ident
		vtopmk 20, 11
		vcheck 20, byte! opcode.byte
		vtopmk 25, 20
		vcheck 25, byte! 2
		vcheck 26, byte! opcode.generic
		vcheck 27, byte! opcode.create
		vtopmk 32, 11
		vcheck 32, byte! opcode.var
		vfinal 37

		rewrite valsAt
		check  0, byte! opcode.var
		check  1, byte! 1
		check  2, byte! 'a'
		check  3, byte! opcode.undef
		check  4, byte! opcode.create
		check  5, byte! opcode.generic
		check  6, byte! 2
		check  7, byte! opcode.ident
		check  8, byte! 4
		check  9, byte! 'l'
		check 13, byte! opcode.byte
		check 14