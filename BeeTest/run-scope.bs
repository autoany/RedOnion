use ms.vs.testTools.unitTesting, sys: text
pkg bee.run.tests

def beeScopeRunTests beeStatementRunTestsBase
; testClass

	cleanup
	; testCleanup
		opts = opt.none

	RV01_global
	; testMethod

		test 1,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	return x\r\n" +
			"f()"
		test 1,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	return this.x\r\n" +
			"f()"

	RV02_local
	; testMethod

		test 2,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	var x = 2\r\n" +
			"	return x\r\n" +
			"f()"

	/*	NOTE:
		we would currently fail following test:

			var x = 1
			functino f
				var y = x
				var x = 2
				return y

		from the point of JavaScript, returning 1 instead of undefined
		it would require patching parser.iGenerator.funcEnd
		to rediscover all variable declarations and move them to the top
		to effectively produce this:

			var x
			x = 1
			functino f
				var x,y
				y = x
				x = 2
				return y

		but I hope this is acceptable difference
		*/

	RV03_block
	; testMethod

		var s =
			"var x = 1\r\n" +
			"function f\r\n" +
			"	if true\r\n" +
			"		var x = 2\r\n" +
			"	return x\r\n" +
			"f()"

		test 2, s
		opts = opt.blockScope
		test 1, s

	/*	NOTE:
		JavaScript does not use block scope (except 'let' extension since 1.7)
		We may, in the future, support 'let' actually being 'using' from C# (opcode.using)
		*/

	RV04_closure
	; testMethod

		test 2,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	var x = 2\r\n" +
			"	functon g\r\n" +
			"		return x\r\n" +
			"	return g()\r\n" +
			"f()"

	RV05_prototype
	; testMethod

		test 2,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	this.x = 2\r\n" +
			"f.prototype = new object\r\n" +
			"f.prototype.x = 3\r\n" +
			"(new f).x"
		test 3,
			"var x = 1\r\n" +
			"function f\r\n" +
			"	x = 2\r\n" +
			"f.prototype = new object\r\n" +
			"f.prototype.x = 3\r\n" +
			"(new f).x"
